(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{326:function(e,v,t){e.exports=t.p+"assets/img/bab95704bf2f5dd8e05236c74a98d487fafa6d41.6bb5cc41.png"},327:function(e,v,t){e.exports=t.p+"assets/img/ea53e535fbda0627b4bab6bf90592e0d151a5ec2.3817d2b4.png"},397:function(e,v,t){"use strict";t.r(v);var _=t(7),s=Object(_.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"node-js是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js是什么"}},[e._v("#")]),e._v(" Node.js是什么？")]),e._v(" "),v("h3",{attrs:{id:"官方定义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#官方定义"}},[e._v("#")]),e._v(" 官方定义")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://nodejs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js"),v("OutboundLink")],1),e._v(" 是一个基于 "),v("strong",[e._v("Chrome V8 引擎")]),e._v("的 JavaScript 运行环境。Node.js 使用了一个"),v("strong",[e._v("事件驱动")]),e._v("、"),v("strong",[e._v("非阻塞式 I/O")]),e._v("的模型，使其轻量又高效。Node.js 的包管理工具 npm 是全球最大的开源库生态系统。")]),e._v(" "),v("p",[e._v("Node.js 不是一门语言，也不是 JavaScript 的框架，也不是像Nginx一样的Web服务器 ，"),v("strong",[e._v("Node.js 是 JavaScript 在服务器端的运行环境（平台）")]),e._v("。")]),e._v(" "),v("h3",{attrs:{id:"node-js-的组成"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js-的组成"}},[e._v("#")]),e._v(" Node.js 的组成")]),e._v(" "),v("p",[e._v("在 Node.js 里运行 JavaScript，跟在 Chrome 里运行 JavaScript 有什么不同？")]),e._v(" "),v("p",[e._v("二者采用的是同样的 JS 引擎。在 Node.js 里写 JS，和在前端写 JS，几乎没有不同。在写法上的区别在于：Node.js 没有浏览器、页面标签相关的 API，但是新增了一些 Node.js 相关的 API。通俗来说，对于开发者而言，在前端写 JS 是用于控制浏览器；而 Node.js 环境写 JS 可以控制整个计算机。")]),e._v(" "),v("p",[e._v("我们知道，JavaScript 的组成分为三个部分：")]),e._v(" "),v("ul",[v("li",[e._v("ECMAScript")]),e._v(" "),v("li",[e._v("DOM：标签元素相关的API")]),e._v(" "),v("li",[e._v("BOM：浏览器相关的API")])]),e._v(" "),v("p",[e._v("ECMAScript 是 JS 的语法；DOM 和 BOM 浏览器端为 JS 提供的 API。")]),e._v(" "),v("p",[e._v("而 Node.js 的组成分为：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("ECMAScript")]),e._v("。ECMAScript 的所有语法在 Node 环境中都可以使用。")]),e._v(" "),v("li",[v("strong",[e._v("Node 环境")]),e._v("提供的一些"),v("strong",[e._v("附加 API")]),e._v("(包括文件、网络等相关的 API)。")])]),e._v(" "),v("p",[e._v("如下图所示：")]),e._v(" "),v("p",[v("img",{attrs:{src:t(326),alt:"image-20221102140543274"}})]),e._v(" "),v("h3",{attrs:{id:"小总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#小总结"}},[e._v("#")]),e._v(" 小总结")]),e._v(" "),v("ul",[v("li",[e._v("Node 是一个服务器端 JavaScript 解释器")]),e._v(" "),v("li",[e._v("Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境")]),e._v(" "),v("li",[e._v("Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效")]),e._v(" "),v("li",[e._v("Node.js 的包管理器 npm，是全球最大的开源库生态系统")]),e._v(" "),v("li",[e._v("Node.js 是一门动态语言，运行在服务端的 Javascript")])]),e._v(" "),v("h2",{attrs:{id:"node-js-的应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js-的应用"}},[e._v("#")]),e._v(" Node.js 的应用")]),e._v(" "),v("p",[e._v("Node.js 拥有强大的开发者社区，现在已经发展出比较成熟的技术体系，以及庞大的生态。它被广泛地应用在 Web 服务、开发工作流、客户端应用等诸多领域。其中，在 "),v("strong",[e._v("Web 服务")]),e._v("领域，业界对 Node.js 的接受程度最高。")]),e._v(" "),v("h3",{attrs:{id:"bff-中间层"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#bff-中间层"}},[e._v("#")]),e._v(" BFF 中间层")]),e._v(" "),v("p",[e._v("BFF，即 Backend For Frontend（服务于前端的后端）。玉伯在《"),v("a",{attrs:{href:"https://mp.weixin.qq.com/s/IYddaaw2ps1wR2VT1dZWPg",target:"_blank",rel:"noopener noreferrer"}},[e._v("从前端技术进化到体验科技"),v("OutboundLink")],1),e._v("》这篇文章中点出了 BFF 层的概念：")]),e._v(" "),v("blockquote",[v("p",[e._v("BFF 模式下，整体分工很清晰，"),v("strong",[e._v("后端通过 Java/C++ 等语言负责服务实现，理想情况下给前端提供的是基于领域模型的 RPC 接口，前端则在 BFF 层直接调用服务端 RPC 接口拿到数据")]),e._v("，按需加工消费数据，并实现人机交互。基于 BFF 模式的研发，很适合拥有前端技术背景的全栈型工程师。这种模式的好处很明显，后端可以专注于业务领域，更多从领域模型的视角去思考问题，页面视角的数据则交给前端型全栈工程师去搞定。"),v("strong",[e._v("领域模型与页面数据是两种思维模式，通过 BFF 可以很好地解耦开，让彼此更专业高效")]),e._v("。")])]),e._v(" "),v("p",[e._v("在 Web 服务里，搭建一个中间层，前端访问中间层的接口，中间层再访问后台的 Java/C++ 服务。这类服务的特点是不需要太强的服务器运算能力，但对程序的灵活性有较高的要求。这两个特点，正好和 Node.js 的优势相吻合。Node.js 非常适合用来做 BFF 层，优势如下：")]),e._v(" "),v("ul",[v("li",[e._v("对于前端来说：让前端"),v("strong",[e._v("有能力自由组装后台数据")]),e._v("，这样可以减少大量的业务沟通成本，加快业务的迭代速度；并且，前端同学能够"),v("strong",[e._v("自主决定")]),e._v("与后台的通讯方式。")]),e._v(" "),v("li",[e._v("对于后台和运维来说，好处是：安全性（不会把主服务器暴露在外面）、降低主服务器的复杂度等。")])]),e._v(" "),v("h3",{attrs:{id:"服务端渲染"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务端渲染"}},[e._v("#")]),e._v(" 服务端渲染")]),e._v(" "),v("p",[v("strong",[e._v("客户端渲染")]),e._v("（CSR / Client side render）：前端通过一大堆接口请求数据，然后通过 JS 动态处理和生成页面结构和展示。优点是"),v("strong",[e._v("前后端分离")]),e._v("、减小服务器压力、局部刷新。缺点是不利于 SEO（如果你的页面然后通过 Ajax 异步获取内容，抓取工具并不会等待异步完成后再行抓取页面内容）、首屏渲染慢。")]),e._v(" "),v("p",[v("strong",[e._v("服务端渲染")]),e._v("（SSR / Server Side Render）：服务器返回的不是接口数据，而是一整个页面（或整个楼层）的 HTML 字符串，浏览器直接显示即可。也就是说，在服务器端直接就渲染好了，然后一次性打包返回给前端。优点是"),v("strong",[e._v("有利于 SEO、首屏渲染很快")]),e._v("。")]),e._v(" "),v("p",[v("strong",[e._v("总结： 搜索引擎优化 + 首屏速度优化 = 服务端渲染")]),e._v("。")]),e._v(" "),v("p",[e._v("备注：这里的「服务端渲染」只是让 Node.js 做中间层，不会替代后端的，后台同学请放心。")]),e._v(" "),v("p",[e._v("参考链接：")]),e._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://ssr.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue 服务端渲染的概念"),v("OutboundLink")],1)]),e._v(" "),v("li",[e._v("https://blog.csdn.net/u012036171/article/details/88833200")]),e._v(" "),v("li",[e._v("https://juejin.im/post/5c068fd8f265da61524d2abc")]),e._v(" "),v("li",[v("a",{attrs:{href:"https://www.zhihu.com/question/59578433/answer/326694511",target:"_blank",rel:"noopener noreferrer"}},[e._v("方应杭"),v("OutboundLink")],1)])]),e._v(" "),v("p",[e._v("历史回顾：")]),e._v(" "),v("p",[e._v("（1）一开始，页面很简单，html 是后端渲染的（比如PHP、ASP、JSP等方式）。后端发现页面中的 js 好麻烦（虽然简单，但是坑多），于是让公司招聘专门写 js 的人，简称「前端切图仔」。")]),e._v(" "),v("p",[e._v("（2）随着 Node.js 和前端 MVC 的兴起，以及前端越来越复杂，慢慢演变成了「前后端分离」。")]),e._v(" "),v("p",[e._v("（3）前端的 SPA 应用流行之后，发现 SEO 问题很大，而且首屏渲染速度很慢，但是自己选的路再难走也要走下去，于是用 Node.js 在服务端渲染被看成是一条出路。")]),e._v(" "),v("p",[e._v("（4）以前在一起的时候，是后端做部分前端的工作；现在在一起的时候，是前端做部分后端的工作。")]),e._v(" "),v("h3",{attrs:{id:"做小型服务、小型网站的后端-基于-express、koa-框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#做小型服务、小型网站的后端-基于-express、koa-框架"}},[e._v("#")]),e._v(" 做小型服务、小型网站的后端（基于 Express、Koa 框架）")]),e._v(" "),v("p",[e._v("现在很多公司的后台管理系统，都是用 Node.js 来开发接口，毕竟，后台管理系统对性能和并发的要求不是太高。有了 Node.js 之后，通过 JS 直接操作 DB，做增删改查，生成接口，极大降低了前端同学的学习门槛。")]),e._v(" "),v("p",[e._v("当然，有时候做 Node.js 开发，是因为：后台人力不够，所以把后台开发的一部分工作量，转移给前端同学。")]),e._v(" "),v("h3",{attrs:{id:"做项目构建工具"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#做项目构建工具"}},[e._v("#")]),e._v(" 做项目构建工具")]),e._v(" "),v("p",[e._v("前端正在广泛使用的构建工具 gulp、Webpack，就是基于 Node.js 来实现的。")]),e._v(" "),v("h3",{attrs:{id:"做-pc-客户端软件-基于-electron-框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#做-pc-客户端软件-基于-electron-框架"}},[e._v("#")]),e._v(" 做 PC 客户端软件（基于 Electron 框架）")]),e._v(" "),v("p",[e._v("Electron 框架就是基于 Node.js 的，可以用来开发客户端软件。")]),e._v(" "),v("p",[e._v("Electron 原名为 Atom Shell，是由 GitHub 开发的一个开源框架。Electron 以 Node.js 作为运行时（runtime），以 chromium 作为渲染引擎，使开发者可以使用 JS 这种前端技术栈开来发跨平台的桌面GUI应用程序。")]),e._v(" "),v("p",[e._v("有一点你可能会感到惊讶：程序员们都在用的代码编辑器 VS Code 软件， 就是基于 Electron 框架来开发的。其他使用 Electron 进行开发的知名应用还有：Skype、GitHub Desktop、Slack、WhatsApp等。")]),e._v(" "),v("p",[e._v("还有一个例子是：电子游戏直播网站 "),v("a",{attrs:{href:"https://www.twitch.tv/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Twitch"),v("OutboundLink")],1),e._v("，号称是国外游戏直播的鼻祖，它在 PC 端的客户端软件，就是用 Electron 框架的。你会发现，Twitch 的网站视觉，和 PC 端的视觉，几乎是一样的。如果两端都采用 JS 语言，就可以极大的复用现有的工程。")]),e._v(" "),v("h3",{attrs:{id:"知名度较高的-node-js-开源项目"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#知名度较高的-node-js-开源项目"}},[e._v("#")]),e._v(" 知名度较高的 Node.js 开源项目")]),e._v(" "),v("p",[v("img",{attrs:{src:t(327),alt:"image-20221102140856507"}})]),e._v(" "),v("ul",[v("li",[v("p",[e._v("express：Node.js 中著名的 web 服务框架。")])]),e._v(" "),v("li",[v("p",[e._v("Koa：下一代的 Node.js 的 Web 服务框架。所谓的“下一代”是相对于 Express 而言的。")])]),e._v(" "),v("li",[v("p",[v("a",{attrs:{href:"https://eggjs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Egg"),v("OutboundLink")],1),e._v("：2016 年，阿里巴巴研发了知名的 Egg.js 开源项目，号称企业级 Web 服务框架。Egg.js 是基于 Koa 开发的。")])]),e._v(" "),v("li",[v("p",[e._v("mocha：是现在最流行的 JavaScript 测试框架，在浏览器和 Node 环境都可以使用。")])]),e._v(" "),v("li",[v("p",[e._v("PM2：node 多进程管理。")])]),e._v(" "),v("li",[v("p",[e._v("jade：非常优秀的模板引擎，不仅限于 js 语言。")])]),e._v(" "),v("li",[v("p",[e._v("CoffeeScript：用简洁的方式展示 JavaScript 优秀的部分。")])]),e._v(" "),v("li",[v("p",[e._v("Atom：编辑器。")])]),e._v(" "),v("li",[v("p",[e._v("VS Code：最酷炫的编辑器。")])]),e._v(" "),v("li",[v("p",[e._v("socket.io：实时通信框架。")])])]),e._v(" "),v("h3",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),v("p",[e._v("或许，能用 Node.js 做的后台应用，Java/C++ 也能做；但是 Node.js 可以让我们多一种选择。")]),e._v(" "),v("p",[e._v("短期来看，Node.js 很难像 Java/C++ 那样，成为后台的主力开发语言。这并非是因为 Node.js 的性能问题，主要是因为，Node.js 还比较年轻，经验积累太少，框架的支持度不够。搞企业级服务，Node.js 敌不过 Java/C++，所以目前只能搞「轻量级」；但未来可期。")]),e._v(" "),v("p",[e._v("限制语言能力的不是语言本身，而是生态。")]),e._v(" "),v("h2",{attrs:{id:"node-js-的特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-js-的特点"}},[e._v("#")]),e._v(" Node.js 的特点")]),e._v(" "),v("ul",[v("li",[e._v("异步、非阻塞 IO 模型")]),e._v(" "),v("li",[e._v("事件循环")]),e._v(" "),v("li",[e._v("单线程")]),e._v(" "),v("li",[e._v("总结：轻量和高效")])]),e._v(" "),v("p",[e._v("Node.js 的性能和效率非常高。")]),e._v(" "),v("p",[e._v("传统的 Java 语言是一个请求开启一个线程，当请求处理完毕后就关闭这个线程。而 Node.js 则完全没有采用这种模型，它本质上就是一个单线程。")]),e._v(" "),v("p",[e._v("你可能会疑问：一个线程如何服务于大量的请求、如何处理高并发的呢？这是因为，Node.js 采用的是异步的、非阻塞的模型。")]),e._v(" "),v("p",[e._v("这里所谓的“单线程”，指的是 Node 的主线程只有一个。为了确保主线程不被阻塞，主线程是用于接收客户端请求。但不会处理具体的任务。而 Node 的背后还有一个线程池，线程池会处理长时间运行的任务（比如 IO 操作、网络操作）。线程池里的任务是通过队列和事件循环的机制来执行。")]),e._v(" "),v("h2",{attrs:{id:"使用-node-js-时的劣势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用-node-js-时的劣势"}},[e._v("#")]),e._v(" 使用 Node.js 时的劣势")]),e._v(" "),v("ul",[v("li",[e._v("程序运行不稳定，可能会出现服务不可用的情况")]),e._v(" "),v("li",[e._v("程序运行效率较低，每秒的请求数维持在一个较低的水平")]),e._v(" "),v("li",[e._v("前端同学对服务器端的技术不太熟悉。")])])])}),[],!1,null,null,null);v.default=s.exports}}]);