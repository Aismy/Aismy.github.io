(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{381:function(s,a,n){"use strict";n.r(a);var t=n(7),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"一、类字节码详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、类字节码详解"}},[s._v("#")]),s._v(" 一、类字节码详解")]),s._v(" "),a("blockquote",[a("p",[s._v("多语言编译为字节码在JVM运行")])]),s._v(" "),a("p",[s._v("为什么jvm不能直接运行java代码呢，这是因为在cpu层面看来计算机中所有的操作都是一个个指令的运行汇集而成的，java是高级语言，只有人类才能理解其逻辑，计算机是无法识别的，所以java代码必须要先编译(javac编译器)成字节码文件，jvm才能正确识别代码转换后的指令并将其运行。")]),s._v(" "),a("ul",[a("li",[s._v("Java代码间接翻译成字节码，储存字节码的文件再交由运行于不同平台上的JVM虚拟机去读取执行，从而实现一次编写，到处运行的目的。")]),s._v(" "),a("li",[s._v("JVM也不再只支持Java，由此衍生出了许多基于JVM的编程语言，如Groovy, Scala, Koltin等等。")])]),s._v(" "),a("blockquote",[a("p",[s._v("Java字节码文件")])]),s._v(" "),a("p",[a("strong",[s._v("class文件")]),s._v("本质上是一个以"),a("strong",[s._v("8位字节为")]),s._v("基础单位的二进制流，各个数据项目严格按照顺序紧凑的排列在class文件中。jvm根据其特定的规则解析该二进制数据，从而得到相关信息。")]),s._v(" "),a("p",[s._v("Class文件采用一种伪结构来存储数据，它有两种类型：无符号数和表。这里暂不详细的讲。")]),s._v(" "),a("p",[s._v("本文将通过简单的java例子编译后的文件来理解。")]),s._v(" "),a("h2",{attrs:{id:"二-类加载过程详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-类加载过程详解"}},[s._v("#")]),s._v(" 二. 类加载过程详解")]),s._v(" "),a("h3",{attrs:{id:"_1-类的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-类的生命周期"}},[s._v("#")]),s._v(" 1.类的生命周期")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-11/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B-%E5%AE%8C%E5%96%84.png",alt:"img"}})]),s._v(" "),a("h3",{attrs:{id:"_2-类加载过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-类加载过程"}},[s._v("#")]),s._v(" 2.类加载过程")]),s._v(" "),a("p",[s._v("Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？")]),s._v(" "),a("p",[s._v("系统加载 Class 类型的文件主要三步："),a("strong",[s._v("加载->连接->初始化")]),s._v("。连接过程又可分为三步："),a("strong",[s._v("验证->准备->解析")]),s._v("。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.png",alt:"img"}})]),s._v(" "),a("blockquote",[a("p",[s._v("类的加载: 查找并加载类的二进制数据")])]),s._v(" "),a("ol",[a("li",[s._v("通过全类名获取定义此类的二进制字节流")]),s._v(" "),a("li",[s._v("将字节流所代表的静态存储结构转换为方法区的运行时数据结构")]),s._v(" "),a("li",[s._v("在内存中生成一个代表该类的 "),a("code",[s._v("Class")]),s._v(" 对象，作为方法区这些数据的访问入口")])]),s._v(" "),a("p",[s._v("相对于类加载的其他阶段而言，"),a("em",[s._v("加载阶段(准确地说，是加载阶段获取类的二进制字节流的动作)是可控性最强的阶段")]),s._v("，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。")]),s._v(" "),a("p",[s._v("加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个"),a("code",[s._v("java.lang.Class")]),s._v("类的对象，这样便可以通过该对象访问方法区中的这些数据。")]),s._v(" "),a("p",[s._v("类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误(LinkageError错误)如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。")]),s._v(" "),a("p",[s._v("加载阶段和连接阶段的部分内容是交叉进行的，加载阶段尚未结束，连接阶段可能就已经开始了")]),s._v(" "),a("blockquote",[a("p",[s._v("验证（连接）:确保被加载的类的正确性")])]),s._v(" "),a("p",[s._v("验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作:")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("文件格式验证")]),s._v(": 验证字节流是否符合Class文件格式的规范；例如: 是否以"),a("code",[s._v("0xCAFEBABE")]),s._v("开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。")]),s._v(" "),a("li",[a("code",[s._v("元数据验证")]),s._v(": 对字节码描述的信息进行语义分析(注意: 对比"),a("code",[s._v("javac")]),s._v("编译阶段的语义分析)，以保证其描述的信息符合Java语言规范的要求；例如: 这个类是否有父类，除了"),a("code",[s._v("java.lang.Object")]),s._v("之外。")]),s._v(" "),a("li",[a("code",[s._v("字节码验证")]),s._v(": 通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。")]),s._v(" "),a("li",[a("code",[s._v("符号引用验证")]),s._v(": 确保解析动作能正确执行。")])]),s._v(" "),a("p",[s._v("验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，"),a("em",[s._v("如果所引用的类经过反复验证，那么可以考虑采用"),a("code",[s._v("-Xverifynone")]),s._v("参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间")])]),s._v(" "),a("blockquote",[a("p",[s._v("准备（连接）: 为类的静态变量分配内存，并将其初始化为默认值")])]),s._v(" "),a("p",[s._v("准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，"),a("strong",[s._v("这些内存都将在方法区中分配")]),s._v("。对于该阶段有以下几点需要注意:")]),s._v(" "),a("ul",[a("li",[s._v("这时候进行内存分配的仅包括类变量("),a("code",[s._v("static")]),s._v(")，而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。")]),s._v(" "),a("li",[s._v("这里所设置的初始值通常情况下是数据类型默认的零值(如"),a("code",[s._v("0")]),s._v("、"),a("code",[s._v("0L")]),s._v("、"),a("code",[s._v("null")]),s._v("、"),a("code",[s._v("false")]),s._v("等)，而不是被在Java代码中被显式地赋予的值。")])]),s._v(" "),a("p",[s._v('这里所设置的初始值"通常情况"下是数据类型默认的零值（如 0、0L、null、false 等），比如我们定义了'),a("code",[s._v("public static int value=111")]),s._v(" ，那么 value 变量在准备阶段的初始值就是 0 而不是 111（初始化阶段才会赋值）。特殊情况：比如给 value 变量加上了 final 关键字"),a("code",[s._v("public static final int value=111")]),s._v(" ，那么准备阶段 value 的值就被赋值为 111。")]),s._v(" "),a("p",[a("strong",[s._v("基本数据类型的零值")]),s._v(" ：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%9B%B6%E5%80%BC.png",alt:"基本数据类型的零值"}})]),s._v(" "),a("p",[s._v("这里还需要注意如下几点")]),s._v(" "),a("ul",[a("li",[s._v("对基本数据类型来说，对于类变量(static)和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。")]),s._v(" "),a("li",[s._v("对于同时被"),a("code",[s._v("static")]),s._v("和"),a("code",[s._v("final")]),s._v("修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。")]),s._v(" "),a("li",[s._v("对于引用数据类型"),a("code",[s._v("reference")]),s._v("来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即"),a("code",[s._v("null")]),s._v("。")]),s._v(" "),a("li",[s._v("如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值。")]),s._v(" "),a("li",[s._v("如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。假设上面的类变量value被定义为: "),a("code",[s._v("public static final int value = 3；")]),s._v("编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3。我们可以理解为"),a("code",[s._v("static final")]),s._v("常量在编译期就将其结果放入了调用它的类的常量池中")])]),s._v(" "),a("blockquote",[a("p",[s._v("解析（连接）: 把类中的符号引用转换为直接引用")])]),s._v(" "),a("p",[s._v("解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对"),a("code",[s._v("类")]),s._v("或"),a("code",[s._v("接口")]),s._v("、"),a("code",[s._v("字段")]),s._v("、"),a("code",[s._v("类方法")]),s._v("、"),a("code",[s._v("接口方法")]),s._v("、"),a("code",[s._v("方法类型")]),s._v("、"),a("code",[s._v("方法句柄")]),s._v("和"),a("code",[s._v("调用点")]),s._v("限定符7类符号引用进行。")]),s._v(" "),a("p",[a("code",[s._v("符号引用")]),s._v("就是一组符号来描述目标，可以是任何字面量。")]),s._v(" "),a("p",[a("code",[s._v("直接引用")]),s._v("就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。")]),s._v(" "),a("p",[s._v("在程序实际运行时，只有符号引用是不够的，举个例子：在程序执行方法时，系统需要明确知道这个方法所在的位置。Java 虚拟机为每个类都准备了一张方法表来存放类中所有的方法。当需要调用一个类的方法的时候，只要知道这个方法在方法表中的偏移量就可以直接调用该方法了。通过解析操作符号引用就可以直接转变为目标方法在类中方法表的位置，从而使得方法可以被调用。")]),s._v(" "),a("p",[s._v("综上，解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，也就是得到类或者字段、方法在内存中的指针或者偏移量。")]),s._v(" "),a("blockquote",[a("p",[s._v("初始化---静态代码块在此时执行")])]),s._v(" "),a("p",[s._v("初始化其实就是执行类构造器方法的"),a("code",[s._v("clinit()")]),s._v("的过程，而且要保证执行前父类的"),a("code",[s._v("clinit()")]),s._v("方法执行完毕。这个方法由编译器收集，顺序执行所有类变量（static修饰的成员变量）显式初始化和静态代码块中语句。此时准备阶段时的那个 "),a("code",[s._v("static int a")]),s._v(" 由默认初始化的0变成了显式初始化的3。 由于执行顺序缘故，初始化阶段类变量如果在静态代码块中又进行了更改，会覆盖类变量的显式初始化，最终值会为静态代码块中的赋值。")]),s._v(" "),a("p",[s._v("初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式:")]),s._v(" "),a("ul",[a("li",[s._v("声明类变量是指定初始值")]),s._v(" "),a("li",[s._v("使用静态代码块为类变量指定初始值")])]),s._v(" "),a("p",[a("strong",[s._v("JVM初始化步骤")])]),s._v(" "),a("ul",[a("li",[s._v("假如这个类还没有被加载和连接，则程序先加载并连接该类")]),s._v(" "),a("li",[s._v("假如该类的直接父类还没有被初始化，则先初始化其直接父类")]),s._v(" "),a("li",[s._v("假如类中有初始化语句，则系统依次执行这些初始化语句")])]),s._v(" "),a("p",[a("strong",[s._v("类初始化时机")]),s._v(": 只有当对类的主动使用的时候才会导致类的初始化，类的主动使用包括以下六种:")]),s._v(" "),a("ul",[a("li",[s._v("创建类的实例，也就是new的方式")]),s._v(" "),a("li",[s._v("访问某个类或接口的静态变量，或者对该静态变量赋值")]),s._v(" "),a("li",[s._v("调用类的静态方法")]),s._v(" "),a("li",[s._v('反射(如Class.forName("com.pdai.jvm.Test"))，，，newInstance()等')]),s._v(" "),a("li",[s._v("初始化某个类的子类，则其父类也会被初始化")]),s._v(" "),a("li",[s._v("Java虚拟机启动时被标明为启动类的类(Java Test)，直接使用java.exe命令来运行某个主类")])]),s._v(" "),a("h2",{attrs:{id:"三-类加载器及其机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-类加载器及其机制"}},[s._v("#")]),s._v(" 三.类加载器及其机制")]),s._v(" "),a("blockquote",[a("p",[s._v("类加载器可以大致划分为以下三类 :")])]),s._v(" "),a("p",[a("code",[s._v("启动类加载器")]),s._v(": Bootstrap Class Loader，负责加载存放在JDK\\jre\\lib(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库(如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载)。启动类加载器是无法被Java程序直接引用的。")]),s._v(" "),a("p",[a("code",[s._v("扩展类加载器")]),s._v(": Extension ClassLoader，该加载器由"),a("code",[s._v("sun.misc.Launcher$ExtClassLoader")]),s._v("实现，它负责加载JDK\\jre\\lib\\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库(如javax.*开头的类)，开发者可以直接使用扩展类加载器。")]),s._v(" "),a("p",[a("code",[s._v("应用程序类加载器")]),s._v(": Application ClassLoader，该类加载器由"),a("code",[s._v("sun.misc.Launcher$AppClassLoader")]),s._v("来实现，它负责加载用户类路径(ClassPath)所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。")]),s._v(" "),a("p",[s._v("应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。因为JVM自带的ClassLoader只是懂得从本地文件系统加载标准的java class文件，因此如果编写了自己的ClassLoader，便可以做到如下几点:")]),s._v(" "),a("ul",[a("li",[s._v("在执行非置信代码之前，自动验证数字签名。")]),s._v(" "),a("li",[s._v("动态地创建符合用户特定需要的定制化构建类。")]),s._v(" "),a("li",[s._v("从特定的场所取得java class，例如数据库中和网络中。")])]),s._v(" "),a("p",[s._v("寻找类加载器小例子如下:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassloderTest")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassloderTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" aClass "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassloderTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" classLoader "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" aClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("classLoader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("classLoader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getParent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("classLoader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getParent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getParent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("输出：\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("sun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("misc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("Launcher")]),s._v("$"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AppClassLoader")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@18b4aac2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("sun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("misc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("Launcher")]),s._v("$"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExtClassLoader")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@1b6d3586")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("从上面的结果可以看出，并没有获取到"),a("code",[s._v("ExtClassLoader")]),s._v("的父Loader，原因是"),a("code",[s._v("BootstrapLoader")]),s._v("(引导类加载器)是用C语言实现的，找不到一个确定的返回父Loader的方式，于是就返回"),a("code",[s._v("null")])]),s._v(" "),a("blockquote",[a("p",[s._v("类的加载")])]),s._v(" "),a("p",[s._v("类加载有三种方式:")]),s._v(" "),a("p",[s._v("1、命令行启动应用时候由JVM初始化加载")]),s._v(" "),a("p",[s._v("2、通过Class.forName()方法动态加载")]),s._v(" "),a("p",[s._v("3、通过ClassLoader.loadClass()方法动态加载")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassloderTest")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassloderTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" aClass "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassloderTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" classLoader "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" aClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用ClassLoader.loadClass()来加载类，不会执行初始化块")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//classLoader.loadClass("test");')]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用Class.forName()来加载类，默认会执行初始化块")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//Class.forName("test");')]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n        *使用Class.forName()来加载类，并指定ClassLoader，初始化时不执行静态块\n        *第一个参数：被加载类的名称\n        *第二个参数：是否被初始化\n        *第三个参数：指定类加载器\n        */")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" classLoader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"静态初始化块执行了！"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("blockquote",[a("p",[s._v("Class.forName()和ClassLoader.loadClass()区别?")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Class.forName(): 将类的.class文件加载到jvm中之外，还会对类进行解释，执行类中的static块；")])]),s._v(" "),a("li",[a("p",[s._v("ClassLoader.loadClass(): 只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容,只有在newInstance才会去执行static块。")])]),s._v(" "),a("li",[a("p",[s._v("Class.forName(name, initialize, loader)带参函数也可控制是否加载static块。并且只有调用了newInstance()方法采用调用构造函数，创建类的对象 。")])])]),s._v(" "),a("h3",{attrs:{id:"_3-jvm类加载机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-jvm类加载机制"}},[s._v("#")]),s._v(" 3.JVM类加载机制")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("全盘负责")]),s._v("，当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("父类委托")]),s._v("，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("缓存机制")]),s._v("，缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("双亲委派机制")]),s._v(", 如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。")])])]),s._v(" "),a("blockquote",[a("p",[s._v("双亲委派机制过程？")])]),s._v(" "),a("ol",[a("li",[s._v("当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。")]),s._v(" "),a("li",[s._v("当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。")]),s._v(" "),a("li",[s._v("如果BootStrapClassLoader加载失败(例如在$JAVA_HOME/jre/lib里未查找到该class)，会使用ExtClassLoader来尝试加载；")]),s._v(" "),a("li",[s._v("若ExtClassLoader也加载失败，则会使用AppClassLoader来加载，如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 首先判断该类型是否已经被加载")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("findLoadedClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果没有被加载，就委托给父类加载或者委派给启动类加载器加载")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果存在父类加载器，就委派给父类加载器加载")]),s._v("\n                c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果不存在父类加载器，就检查是否是由启动类加载器加载的类，通过调用本地方法native Class findBootstrapClass(String name)")]),s._v("\n                c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("findBootstrapClass0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果父类加载器和启动类加载器都不能完成加载任务，才调用自身的加载功能")]),s._v("\n            c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("findClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolveClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[s._v("双亲委派优势")]),s._v(" "),a("ul",[a("li",[s._v("系统类防止内存中出现多份同样的字节码")]),s._v(" "),a("li",[s._v("保证Java程序安全稳定运行")])]),s._v(" "),a("h2",{attrs:{id:"一、什么是jvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是jvm"}},[s._v("#")]),s._v(" 一、什么是JVM")]),s._v(" "),a("h3",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[s._v("#")]),s._v(" 定义")]),s._v(" "),a("p",[s._v("Java Virtual Machine，JAVA程序的"),a("strong",[s._v("运行环境")]),s._v("（JAVA二进制字节码的运行环境）")]),s._v(" "),a("h3",{attrs:{id:"好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#好处"}},[s._v("#")]),s._v(" 好处")]),s._v(" "),a("ul",[a("li",[s._v("一次编写，到处运行")]),s._v(" "),a("li",[s._v("自动内存管理，垃圾回收机制")]),s._v(" "),a("li",[s._v("数组下标越界检查")])]),s._v(" "),a("h3",{attrs:{id:"比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[s._v("#")]),s._v(" 比较")]),s._v(" "),a("p",[s._v("JVM JRE JDK的区别")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150422.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150422.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"二、内存结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、内存结构"}},[s._v("#")]),s._v(" 二、内存结构")]),s._v(" "),a("h3",{attrs:{id:"整体架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整体架构"}},[s._v("#")]),s._v(" "),a("strong",[s._v("整体架构")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150440.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150440.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h3",{attrs:{id:"_1、程序计数器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、程序计数器"}},[s._v("#")]),s._v(" 1、程序计数器")]),s._v(" "),a("h4",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[s._v("#")]),s._v(" 作用")]),s._v(" "),a("p",[s._v("用于保存JVM中下一条所要执行的指令的地址")]),s._v(" "),a("h4",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[s._v("#")]),s._v(" 特点")]),s._v(" "),a("ul",[a("li",[s._v("线程私有\n"),a("ul",[a("li",[s._v("CPU会为每个线程分配时间片，当当前线程的时间片使用完以后，CPU就会去执行另一个线程中的代码")]),s._v(" "),a("li",[s._v("程序计数器是"),a("strong",[s._v("每个线程")]),s._v("所"),a("strong",[s._v("私有")]),s._v("的，当另一个线程的时间片用完，又返回来执行当前线程的代码时，通过程序计数器可以知道应该执行哪一句指令")])])]),s._v(" "),a("li",[s._v("不会存在内存溢出")])]),s._v(" "),a("h3",{attrs:{id:"_2、虚拟机栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、虚拟机栈"}},[s._v("#")]),s._v(" 2、虚拟机栈")]),s._v(" "),a("h4",{attrs:{id:"_2-1-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-定义"}},[s._v("#")]),s._v(" 2.1 定义")]),s._v(" "),a("ul",[a("li",[s._v("每个"),a("strong",[s._v("线程")]),s._v("运行需要的内存空间，称为"),a("strong",[s._v("虚拟机栈")])]),s._v(" "),a("li",[s._v("每个栈由多个"),a("strong",[s._v("栈帧")]),s._v("组成，对应着每次调用方法时所占用的内存")]),s._v(" "),a("li",[s._v("每个线程只能有"),a("strong",[s._v("一个活动栈帧")]),s._v("，对应着"),a("strong",[s._v("当前正在执行的方法")])])]),s._v(" "),a("h4",{attrs:{id:"_2-2-演示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-演示"}},[s._v("#")]),s._v(" 2.2 演示")]),s._v(" "),a("p",[s._v("代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Main {\n\tpublic static void main(String[] args) {\n\t\tmethod1();\n\t}\n\n\tprivate static void method1() {\n\t\tmethod2(1, 2);\n\t}\n\n\tprivate static int method2(int a, int b) {\n\t\tint c = a + b;\n\t\treturn c;\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150534.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150534.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("在控制台中可以看到，主类中的方法在进入虚拟机栈的时候，符合栈的特点")]),s._v(" "),a("h4",{attrs:{id:"_2-3-问题辨析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-问题辨析"}},[s._v("#")]),s._v(" 2.3 问题辨析")]),s._v(" "),a("ul",[a("li",[s._v("垃圾回收是否涉及栈内存？\n"),a("ul",[a("li",[a("strong",[s._v("不需要")]),s._v("。因为虚拟机栈中是由一个个栈帧组成的，在方法执行完毕后，对应的栈帧就会被弹出栈。所以无需通过垃圾回收机制去回收内存。")])])]),s._v(" "),a("li",[s._v("栈内存的分配越大越好吗？\n"),a("ul",[a("li",[s._v("不是。因为"),a("strong",[s._v("物理内存是一定的")]),s._v("，栈内存越大，可以支持更多的递归调用，但是可执行的线程数就会越少。")])])]),s._v(" "),a("li",[s._v("方法内的局部变量是否是线程安全的？\n"),a("ul",[a("li",[s._v("如果方法内"),a("strong",[s._v("局部变量没有逃离方法的作用范围")]),s._v("，则是"),a("strong",[s._v("线程安全")]),s._v("的")]),s._v(" "),a("li",[s._v("如果如果"),a("strong",[s._v("局部变量引用了对象")]),s._v("，并"),a("strong",[s._v("逃离了方法的作用范围")]),s._v("，则需要考虑线程安全问题")])])])]),s._v(" "),a("h4",{attrs:{id:"_2-4-内存溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-内存溢出"}},[s._v("#")]),s._v(" 2.4 内存溢出")]),s._v(" "),a("ul",[a("li",[a("strong",[a("code",[s._v("StackOverFlowError")]),s._v("：")]),s._v(" 若栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 "),a("code",[s._v("StackOverFlowError")]),s._v(" 错误。")]),s._v(" "),a("li",[a("strong",[a("code",[s._v("OutOfMemoryError")]),s._v("：")]),s._v(" 如果栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出"),a("code",[s._v("OutOfMemoryError")]),s._v("异常。")])]),s._v(" "),a("h4",{attrs:{id:"_2-4-线程运行诊断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-线程运行诊断"}},[s._v("#")]),s._v(" 2.4 线程运行诊断")]),s._v(" "),a("p",[s._v("CPU占用过高")]),s._v(" "),a("ul",[a("li",[s._v("Linux环境下运行某些程序的时候，可能导致CPU的占用过高，这时需要定位占用CPU过高的线程\n"),a("ul",[a("li",[a("strong",[s._v("top")]),s._v("命令，查看是哪个"),a("strong",[s._v("进程")]),s._v("占用CPU过高")]),s._v(" "),a("li",[a("strong",[s._v("ps H -eo pid, tid（线程id）, %cpu | grep 刚才通过top查到的进程号")]),s._v(" 通过ps命令进一步查看是哪个线程占用CPU过高")]),s._v(" "),a("li",[a("strong",[s._v("jstack 进程id")]),s._v(" 通过查看进程中的线程的nid，刚才通过ps命令看到的tid来"),a("strong",[s._v("对比定位")]),s._v("，注意jstack查找出的线程id是"),a("strong",[s._v("16进制的")]),s._v("，"),a("strong",[s._v("需要转换")])])])])]),s._v(" "),a("h3",{attrs:{id:"_3、本地方法栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、本地方法栈"}},[s._v("#")]),s._v(" 3、本地方法栈")]),s._v(" "),a("p",[s._v("一些带有"),a("strong",[s._v("native关键字")]),s._v("的方法就是需要JAVA去调用本地的C或者C++方法，因为JAVA有时候没法直接和操作系统底层交互，所以需要用到本地方法")]),s._v(" "),a("h3",{attrs:{id:"_4、堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、堆"}},[s._v("#")]),s._v(" 4、堆")]),s._v(" "),a("h4",{attrs:{id:"_4-1-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-定义"}},[s._v("#")]),s._v(" 4.1 定义")]),s._v(" "),a("p",[s._v("通过new关键字"),a("strong",[s._v("创建的对象")]),s._v("都会被放在堆内存")]),s._v(" "),a("h4",{attrs:{id:"_4-2-特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-特点"}},[s._v("#")]),s._v(" 4.2 特点")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("所有线程共享")]),s._v("，堆内存中的对象都需要"),a("strong",[s._v("考虑线程安全问题")])]),s._v(" "),a("li",[s._v("有垃圾回收机制")])]),s._v(" "),a("h4",{attrs:{id:"_4-3-堆内存溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-堆内存溢出"}},[s._v("#")]),s._v(" 4.3 堆内存溢出")]),s._v(" "),a("p",[a("strong",[s._v("java.lang.OutofMemoryError")]),s._v(" ：java heap space. 堆内存溢出")]),s._v(" "),a("h4",{attrs:{id:"_4-4-堆内存诊断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-堆内存诊断"}},[s._v("#")]),s._v(" 4.4 堆内存诊断")]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[s._v("jps")]),s._v("：查看当前系统中有哪些java进程")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("jmap")]),s._v(" -heap +pid：查看某个进程堆内存占有情况")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("jconsole")]),s._v("：图形界面，多功能的监测工具，可以连续监测")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("jvirsalvm")])])])]),s._v(" "),a("h3",{attrs:{id:"_5、方法区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、方法区"}},[s._v("#")]),s._v(" 5、方法区")]),s._v(" "),a("h4",{attrs:{id:"_5-1-结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-结构"}},[s._v("#")]),s._v(" 5.1 结构")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150547.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150547.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[s._v("1.8之前使用永久代实现方法区，使用的是堆内存")]),s._v(" "),a("li",[s._v("1.8之后改用元空间实现方法区，使用的是本地内存，但是运行时常量池放在堆中")])]),s._v(" "),a("h4",{attrs:{id:"_5-2方法区内存溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2方法区内存溢出"}},[s._v("#")]),s._v(" 5. 2方法区内存溢出")]),s._v(" "),a("ul",[a("li",[s._v("1.8以前会导致"),a("strong",[s._v("永久代")]),s._v("内存溢出："),a("strong",[s._v("java.lang.OutofMemoryError")]),s._v(" ： PermGen space")]),s._v(" "),a("li",[s._v("1.8以后会导致"),a("strong",[s._v("元空间")]),s._v("内存溢出："),a("strong",[s._v("java.lang.OutofMemoryError")]),s._v(" ： Metaspace")])]),s._v(" "),a("p",[s._v("场景：spring、mabits生成大量运行时类可能导致")]),s._v(" "),a("h4",{attrs:{id:"_5-3-常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-常量池"}},[s._v("#")]),s._v(" 5.3 常量池")]),s._v(" "),a("p",[s._v("就是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息")]),s._v(" "),a("p",[s._v("也叫做**.class常量池**")]),s._v(" "),a("p",[s._v("主要存放编译期生成的各种"),a("strong",[s._v("字面量(Literal)和符号引用(Symbolic References)")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("通过反编译来查看类的信息")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("使用Javac进行编译。得到.class文件（编译）")])]),s._v(" "),a("li",[a("p",[s._v("使用javap -v 进行反编译得到编译后的字节码（反编译）")]),s._v(" "),a("p",[s._v(".class文件二进制字节码的组成：类的基本信息、常量池、类的方法定义（包含了虚拟机指令）")])]),s._v(" "),a("li",[a("p",[s._v("然后能在控制台看到反编译以后类的信息了")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("类的基本信息")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150618.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150618.png",alt:"img"}}),a("OutboundLink")],1)])]),s._v(" "),a("li",[a("p",[s._v("常量池")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150630.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150630.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150641.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150641.png",alt:"img"}}),a("OutboundLink")],1)])]),s._v(" "),a("li",[a("p",[s._v("虚拟机中执行编译的方法（框内的是真正编译执行的内容，"),a("strong",[s._v("#号的内容需要在常量池中查找")]),s._v("）")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150653.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150653.png",alt:"img"}}),a("OutboundLink")],1)])])])])]),s._v(" "),a("h4",{attrs:{id:"_5-4-运行时常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-运行时常量池"}},[s._v("#")]),s._v(" 5.4 运行时常量池")]),s._v(" "),a("ul",[a("li",[s._v("常量池\n"),a("ul",[a("li",[s._v("就是一张表（如上图中的constant pool），虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量信息")])])]),s._v(" "),a("li",[s._v("运行时常量池\n"),a("ul",[a("li",[s._v("常量池是*.class文件中的，当该"),a("strong",[s._v("类被加载以后")]),s._v("，它的常量池信息就会"),a("strong",[s._v("放入运行时常量池")]),s._v("，并把里面的"),a("strong",[s._v("符号地址变为真实地址")])])])])]),s._v(" "),a("h4",{attrs:{id:"_5-5-常量池与串池的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-常量池与串池的关系"}},[s._v("#")]),s._v(" 5.5 常量池与串池的关系")]),s._v(" "),a("h5",{attrs:{id:"串池stringtable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串池stringtable"}},[s._v("#")]),s._v(" "),a("strong",[s._v("串池")]),s._v("StringTable")]),s._v(" "),a("p",[s._v("字符串常量池，也可以理解成运行时常量池分出来的一部分。类加载到内存的时候，字符串会存到字符串常量池里面。利用池的概念，避免大量频繁创建字符串。")]),s._v(" "),a("p",[a("strong",[s._v("特征")])]),s._v(" "),a("ul",[a("li",[s._v("常量池中的字符串仅是符号，只有"),a("strong",[s._v("在被用到时才会转化为对象")])]),s._v(" "),a("li",[s._v("利用串池的机制，来避免重复创建字符串对象")]),s._v(" "),a("li",[s._v("字符串"),a("strong",[s._v("变量")]),s._v("拼接的原理是"),a("strong",[s._v("StringBuilder")])]),s._v(" "),a("li",[s._v("字符串"),a("strong",[s._v("常量")]),s._v("拼接的原理是"),a("strong",[s._v("编译期优化")])]),s._v(" "),a("li",[s._v("可以使用"),a("strong",[s._v("intern方法")]),s._v("，主动将串池中还没有的字符串对象放入串池中")]),s._v(" "),a("li",[a("strong",[s._v("注意")]),s._v("：无论是串池还是堆里面的字符串，都是对象")])]),s._v(" "),a("p",[s._v("用来放字符串对象且里面的"),a("strong",[s._v("元素不重复")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class StringTableStudy {\n\tpublic static void main(String[] args) {\n\t\tString a = "a"; \n\t\tString b = "b";\n\t\tString ab = "ab";\n\t}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("常量池中的信息，都会被加载到运行时常量池中，但这是a b ab 仅是常量池中的符号，"),a("strong",[s._v("还没有成为java字符串")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("0: ldc           #2                  // String a\n2: astore_1\n3: ldc           #3                  // String b\n5: astore_2\n6: ldc           #4                  // String ab\n8: astore_3\n9: return\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("当执行到 ldc #2 时，会把符号 a 变为 “a” 字符串对象，"),a("strong",[s._v("并放入串池中")]),s._v("（hashtable结构 不可扩容）")]),s._v(" "),a("p",[s._v("当执行到 ldc #3 时，会把符号 b 变为 “b” 字符串对象，并放入串池中")]),s._v(" "),a("p",[s._v("当执行到 ldc #4 时，会把符号 ab 变为 “ab” 字符串对象，并放入串池中")]),s._v(" "),a("p",[s._v("最终"),a("strong",[s._v("StringTable [“a”, “b”, “ab”]")])]),s._v(" "),a("p",[a("strong",[s._v("注意")]),s._v("：字符串对象的创建都是"),a("strong",[s._v("懒惰的")]),s._v("，只有当运行到那一行字符串且在串池中不存在的时候（如 ldc #2）时，该字符串才会被创建并放入串池中。")]),s._v(" "),a("p",[s._v("使用拼接"),a("strong",[s._v("字符串变量对象")]),s._v("创建字符串的过程")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class StringTableStudy {\n\tpublic static void main(String[] args) {\n\t\tString a = "a";\n\t\tString b = "b";\n\t\tString ab = "ab";\n\t\t//拼接字符串对象来创建新的字符串\n\t\tString ab2 = a+b; \n\t}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("反编译后的结果")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\t Code:\n      stack=2, locals=5, args_size=1\n         0: ldc           #2                  // String a\n         2: astore_1\n         3: ldc           #3                  // String b\n         5: astore_2\n         6: ldc           #4                  // String ab\n         8: astore_3\n         9: new           #5                  // class java/lang/StringBuilder\n        12: dup\n        13: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V\n        16: aload_1\n        17: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String\n;)Ljava/lang/StringBuilder;\n        20: aload_2\n        21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String\n;)Ljava/lang/StringBuilder;\n        24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/Str\ning;\n        27: astore        4\n        29: return\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("通过拼接的方式来创建字符串的"),a("strong",[s._v("过程")]),s._v("是：new StringBuilder().append(“a”).append(“b”).toString()")]),s._v(" "),a("p",[s._v("最后的toString方法的返回值是一个"),a("strong",[s._v("新的字符串")]),s._v("，但字符串的"),a("strong",[s._v("值")]),s._v("和拼接的字符串一致，但是两个不同的字符串，"),a("strong",[s._v("一个存在于串池之中，一个存在于堆内存之中")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('String ab = "ab";\nString ab2 = a+b;\n//结果为false,因为ab是存在于串池之中，ab2是由StringBuilder的toString方法所返回的一个对象，存在于堆内存之中\nSystem.out.println(ab == ab2);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("使用"),a("strong",[s._v("拼接字符串常量对象")]),s._v("的方法创建字符串")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class StringTableStudy {\n\tpublic static void main(String[] args) {\n\t\tString a = "a";\n\t\tString b = "b";\n\t\tString ab = "ab";\n\t\tString ab2 = a+b;\n\t\t//使用拼接字符串的方法创建字符串\n\t\tString ab3 = "a" + "b";\n\t}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("反编译后的结果")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(' \t  Code:\n      stack=2, locals=6, args_size=1\n         0: ldc           #2                  // String a\n         2: astore_1\n         3: ldc           #3                  // String b\n         5: astore_2\n         6: ldc           #4                  // String ab\n         8: astore_3\n         9: new           #5                  // class java/lang/StringBuilder\n        12: dup\n        13: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V\n        16: aload_1\n        17: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String\n;)Ljava/lang/StringBuilder;\n        20: aload_2\n        21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String\n;)Ljava/lang/StringBuilder;\n        24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/Str\ning;\n        27: astore        4\n        //ab3初始化时直接从串池中获取字符串\n        29: ldc           #4                  // String ab\n        31: astore        5\n        33: return\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("ul",[a("li",[s._v("使用"),a("strong",[s._v("拼接字符串常量")]),s._v("的方法来创建新的字符串时，因为"),a("strong",[s._v("内容是常量，javac在编译期会进行优化，结果已在编译期确定为ab")]),s._v("，而创建ab的时候已经在串池中放入了“ab”，所以ab3直接从串池中获取值，所以进行的操作和 ab = “ab” 一致。")]),s._v(" "),a("li",[s._v("使用"),a("strong",[s._v("拼接字符串变量")]),s._v("的方法来创建新的字符串时，因为内容是变量，只能"),a("strong",[s._v("在运行期确定它的值，所以需要使用StringBuilder来创建")])])]),s._v(" "),a("h5",{attrs:{id:"intern方法-1-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intern方法-1-8"}},[s._v("#")]),s._v(" intern方法 1.8")]),s._v(" "),a("p",[s._v("调用字符串对象的intern方法，会将该字符串对象（地址）尝试放入到串池中")]),s._v(" "),a("ul",[a("li",[s._v("如果串池中没有该字符串对象，则放入成功")]),s._v(" "),a("li",[s._v("如果有该字符串对象，则放入失败")])]),s._v(" "),a("p",[s._v("无论放入是否成功，都会返回"),a("strong",[s._v("串池中")]),s._v("的字符串对象")]),s._v(" "),a("p",[a("strong",[s._v("注意")]),s._v("：此时如果调用intern方法成功，堆内存与串池中的字符串对象是同一个对象；如果失败，则不是同一个对象")]),s._v(" "),a("p",[a("strong",[s._v("例1")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Main {\n\tpublic static void main(String[] args) {\n\t\t//"a" "b" 被放入串池中，str则存在于堆内存之中\n\t\tString str = new String("a") + new String("b");\n\t\t//调用str的intern方法，这时串池中没有"ab"，则会将该字符串对象放入到串池中，此时堆内存与串池中的"ab"是同一个对象\n\t\tString st2 = str.intern();\n\t\t//给str3赋值，因为此时串池中已有"ab"，则直接将串池中的内容返回\n\t\tString str3 = "ab";\n\t\t//因为堆内存与串池中的"ab"是同一个对象，所以以下两条语句打印的都为true\n\t\tSystem.out.println(str == st2);\n\t\tSystem.out.println(str == str3);\n\t}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[a("strong",[s._v("例2")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Main {\n\tpublic static void main(String[] args) {\n        //此处创建字符串对象"ab"，因为串池中还没有"ab"，所以将其放入串池中\n\t\tString str3 = "ab";\n        //"a" "b" 被放入串池中，str则存在于堆内存之中\n\t\tString str = new String("a") + new String("b");\n        //此时因为在创建str3时，"ab"已存在与串池中，所以放入失败，但是会返回串池中的"ab"\n\t\tString str2 = str.intern();\n        //false\n\t\tSystem.out.println(str == str2);\n        //false\n\t\tSystem.out.println(str == str3);\n        //true\n\t\tSystem.out.println(str2 == str3);\n\t}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h5",{attrs:{id:"intern方法-1-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intern方法-1-6"}},[s._v("#")]),s._v(" intern方法 1.6")]),s._v(" "),a("p",[s._v("调用字符串对象的intern方法，会将该字符串对象尝试放入到串池中")]),s._v(" "),a("ul",[a("li",[s._v("如果串池中没有该字符串对象，会将该字符串对象复制一份，再放入到串池中")]),s._v(" "),a("li",[s._v("如果有该字符串对象，则放入失败")])]),s._v(" "),a("p",[s._v("无论放入是否成功，都会返回"),a("strong",[s._v("串池中")]),s._v("的字符串对象")]),s._v(" "),a("p",[a("strong",[s._v("注意")]),s._v("：此时无论调用intern方法成功与否，串池中的字符串对象和堆内存中的字符串对象"),a("strong",[s._v("都不是同一个对象")])]),s._v(" "),a("h4",{attrs:{id:"_5-6-stringtable-位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-stringtable-位置"}},[s._v("#")]),s._v(" 5.6 StringTable 位置")]),s._v(" "),a("p",[s._v("JDK6时字符串常量池位于运行时常量池：发生内存溢出时报："),a("strong",[s._v("java.lang.OutofMemoryError")]),s._v(" ： PermGen space")]),s._v(" "),a("p",[s._v("JDK7挪到堆中。发生内存溢出时报："),a("strong",[s._v("java.lang.OutofMemoryError")]),s._v(" ： java heap space")]),s._v(" "),a("blockquote",[a("p",[s._v("运行时常量池（Runtime Constant Pool）是虚拟机规范中是方法区的一部分，在加载类和结构到虚拟机后，就会创建对应的运行时常量池；而字符串常量池是这个过程中常量字符串的存放位置。所以从这个角度，字符串常量池属于虚拟机规范中的方法区，它是一个"),a("strong",[s._v("逻辑上的概念")]),s._v("；而堆区，永久代以及元空间是实际的存放位置。")]),s._v(" "),a("p",[s._v("不同的虚拟机对虚拟机的规范（比如方法区）是不一样的，只有 HotSpot 才有永久代的概念。")]),s._v(" "),a("p",[s._v("HotSpot也是发展的，由于[一些问题 opens new window 的存在，HotSpot考虑逐渐去永久代，对于不同版本的JDK，"),a("strong",[s._v("实际的存储位置")]),s._v("是有差异的，具体看如下表格：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[s._v("JDK版本")])]),s._v(" "),a("th",[a("strong",[s._v("是否有永久代，字符串常量池放在哪里？")])]),s._v(" "),a("th",[a("strong",[s._v("方法区逻辑上规范，由哪些实际的部分实现的？")])])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("jdk1.6及之前")]),s._v(" "),a("td",[s._v("有永久代，运行时常量池（包括字符串常量池），静态变量存放在永久代上")]),s._v(" "),a("td",[s._v("这个时期方法区在HotSpot中是由永久代来实现的，以至于"),a("strong",[s._v("这个时期说方法区就是指永久代")])])]),s._v(" "),a("tr",[a("td",[s._v("jdk1.7")]),s._v(" "),a("td",[s._v("有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中；")]),s._v(" "),a("td",[s._v("这个时期方法区在HotSpot中由"),a("strong",[s._v("永久代")]),s._v("（类型信息、字段、方法、常量）和"),a("strong",[s._v("堆")]),s._v("（字符串常量池、静态变量）共同实现")])]),s._v(" "),a("tr",[a("td",[s._v("jdk1.8及之后")]),s._v(" "),a("td",[s._v("取消永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍在堆中")]),s._v(" "),a("td",[s._v("这个时期方法区在HotSpot中由本地内存的"),a("strong",[s._v("元空间")]),s._v("（类型信息、字段、方法、常量）和"),a("strong",[s._v("堆")]),s._v("（字符串常量池、静态变量）共同实现")])])])])]),s._v(" "),a("h4",{attrs:{id:"_5-7-stringtable-垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-stringtable-垃圾回收"}},[s._v("#")]),s._v(" 5.7 StringTable 垃圾回收")]),s._v(" "),a("p",[s._v("StringTable在堆内存紧张时，也会发生垃圾回收，字符串常量池在堆中")]),s._v(" "),a("h4",{attrs:{id:"_5-8-stringtable调优"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-8-stringtable调优"}},[s._v("#")]),s._v(" 5.8 StringTable调优")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("因为StringTable是由HashTable实现的，所以可以"),a("strong",[s._v("适当增加HashTable桶的个数")]),s._v("，来减少字符串放入串池所需要的时间")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("XX")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringTableSize")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("xxxx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("考虑是否需要将字符串对象入池")]),s._v(" "),a("p",[s._v("可以通过"),a("strong",[s._v("intern方法减少重复入池")])])])]),s._v(" "),a("h3",{attrs:{id:"_6、直接内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、直接内存"}},[s._v("#")]),s._v(" 6、直接内存")]),s._v(" "),a("ul",[a("li",[s._v("属于操作系统，常见于NIO操作时，"),a("strong",[s._v("用于数据缓冲区")])]),s._v(" "),a("li",[s._v("分配回收成本较高，但读写性能高（系统内存和Java内存都可直接访问）")]),s._v(" "),a("li",[s._v("不受JVM内存回收管理")])]),s._v(" "),a("h4",{attrs:{id:"文件读写流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件读写流程"}},[s._v("#")]),s._v(" 文件读写流程")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150715.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150715.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("使用了DirectBuffer")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150736.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150736.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:""}},[s._v("直接内存是操作系统和Java代码"),a("strong",[s._v("都可以访问的一块区域")]),s._v("，无需将代码从系统内存复制到Java堆内存，从而提高了效率")])]),s._v(" "),a("h4",{attrs:{id:"释放原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#释放原理"}},[s._v("#")]),s._v(" 释放原理")]),s._v(" "),a("p",[s._v("直接内存的回收不是通过JVM的垃圾回收来释放的，而是通过"),a("strong",[s._v("unsafe.freeMemory")]),s._v("来手动释放")]),s._v(" "),a("p",[s._v("通过")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//通过ByteBuffer申请1M的直接内存\nByteBuffer byteBuffer = ByteBuffer.allocateDirect(_1M);Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("申请直接内存，但JVM并不能回收直接内存中的内容，它是如何实现回收的呢？")]),s._v(" "),a("p",[a("strong",[s._v("allocateDirect的实现")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public static ByteBuffer allocateDirect(int capacity) {\n    return new DirectByteBuffer(capacity);\n}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("DirectByteBuffer类")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("DirectByteBuffer(int cap) {   // package-private\n   \n    super(-1, 0, cap, cap);\n    boolean pa = VM.isDirectMemoryPageAligned();\n    int ps = Bits.pageSize();\n    long size = Math.max(1L, (long)cap + (pa ? ps : 0));\n    Bits.reserveMemory(size, cap);\n\n    long base = 0;\n    try {\n        base = unsafe.allocateMemory(size); //申请内存\n    } catch (OutOfMemoryError x) {\n        Bits.unreserveMemory(size, cap);\n        throw x;\n    }\n    unsafe.setMemory(base, size, (byte) 0);\n    if (pa && (base % ps != 0)) {\n        // Round up to page boundary\n        address = base + ps - (base & (ps - 1));\n    } else {\n        address = base;\n    }\n    cleaner = Cleaner.create(this, new Deallocator(base, size, cap)); //通过虚引用，来实现直接内存的释放，this为虚引用的实际对象\n    att = null;\n}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("这里调用了一个Cleaner的create方法，且后台线程还会对虚引用的对象监测，如果虚引用的实际对象（这里是DirectByteBuffer）被回收以后，就会调用Cleaner的clean方法，来清除直接内存中占用的内存")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public void clean() {\n       if (remove(this)) {\n           try {\n               this.thunk.run(); //调用run方法\n           } catch (final Throwable var2) {\n               AccessController.doPrivileged(new PrivilegedAction<Void>() {\n                   public Void run() {\n                       if (System.err != null) {\n                           (new Error("Cleaner terminated abnormally", var2)).printStackTrace();\n                       }\n\n                       System.exit(1);\n                       return null;\n                   }\n               });\n           }Copy\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("对应对象的run方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public void run() {\n    if (address == 0) {\n        // Paranoia\n        return;\n    }\n    unsafe.freeMemory(address); //释放直接内存中占用的内存\n    address = 0;\n    Bits.unreserveMemory(size, capacity);\n}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h5",{attrs:{id:"直接内存的回收机制总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接内存的回收机制总结"}},[s._v("#")]),s._v(" 直接内存的回收机制总结")]),s._v(" "),a("ul",[a("li",[s._v("使用了Unsafe类来完成直接内存的分配回收，回收需要主动调用freeMemory方法")]),s._v(" "),a("li",[s._v("ByteBuffer的实现内部使用了Cleaner（虚引用）来检测ByteBuffer。一旦ByteBuffer被垃圾回收，那么会由ReferenceHandler来调用Cleaner的clean方法调用freeMemory来释放内存")])]),s._v(" "),a("h2",{attrs:{id:"三、垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、垃圾回收"}},[s._v("#")]),s._v(" 三、垃圾回收")]),s._v(" "),a("h3",{attrs:{id:"_1、如何判断对象可以回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、如何判断对象可以回收"}},[s._v("#")]),s._v(" 1、如何判断对象可以回收")]),s._v(" "),a("h4",{attrs:{id:"引用计数法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用计数法"}},[s._v("#")]),s._v(" 引用计数法")]),s._v(" "),a("p",[s._v("弊端：循环引用时，两个对象的计数都为1，导致两个对象都无法被释放")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150750.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150750.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"可达性分析算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可达性分析算法"}},[s._v("#")]),s._v(" 可达性分析算法")]),s._v(" "),a("ul",[a("li",[s._v("JVM中的垃圾回收器通过"),a("strong",[s._v("可达性分析")]),s._v("来探索所有存活的对象")]),s._v(" "),a("li",[s._v("扫描堆中的对象，看能否沿着GC Root对象为起点的引用链找到该对象，如果"),a("strong",[s._v("找不到，则表示可以回收")])]),s._v(" "),a("li",[s._v("可以作为GC Root的对象\n"),a("ul",[a("li",[s._v("虚拟机栈（栈帧中的本地变量表）中引用的对象。")]),s._v(" "),a("li",[s._v("方法区中类静态属性引用的对象")]),s._v(" "),a("li",[s._v("方法区中常量引用的对象")]),s._v(" "),a("li",[s._v("本地方法栈中JNI（即一般说的Native方法）引用的对象")])])])]),s._v(" "),a("h4",{attrs:{id:"五种引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五种引用"}},[s._v("#")]),s._v(" 五种引用")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150800.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150800.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h5",{attrs:{id:"强引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强引用"}},[s._v("#")]),s._v(" 强引用")]),s._v(" "),a("p",[s._v("只有GC Root"),a("strong",[s._v("都不引用")]),s._v("该对象时，才会回收"),a("strong",[s._v("强引用")]),s._v("对象")]),s._v(" "),a("ul",[a("li",[s._v("如上图B、C对象都不引用A1对象时，A1对象才会被回收")])]),s._v(" "),a("h5",{attrs:{id:"软引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软引用"}},[s._v("#")]),s._v(" 软引用")]),s._v(" "),a("p",[s._v("当GC Root指向软引用对象时，在"),a("strong",[s._v("内存不足时")]),s._v("，会"),a("strong",[s._v("回收软引用所引用的对象")])]),s._v(" "),a("ul",[a("li",[s._v("如上图如果B对象不再引用A2对象且内存不足时，软引用所引用的A2对象就会被回收")])]),s._v(" "),a("h6",{attrs:{id:"软引用的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软引用的使用"}},[s._v("#")]),s._v(" 软引用的使用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tfinal int _4M = 4*1024*1024;\n\t\t//使用软引用对象 list和SoftReference是强引用，而SoftReference和byte数组则是软引用\n\t\tList<SoftReference<byte[]>> list = new ArrayList<>();\n\t\tSoftReference<byte[]> ref= new SoftReference<>(new byte[_4M]);\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("如果在垃圾回收时发现内存不足，在回收软引用所指向的对象时，"),a("strong",[s._v("软引用本身不会被清理")])]),s._v(" "),a("p",[s._v("如果想要"),a("strong",[s._v("清理软引用")]),s._v("，需要使"),a("strong",[s._v("用引用队列")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" _4M "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用引用队列，用于移除引用为空的软引用对象")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReferenceQueue")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReferenceQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用软引用对象 list和SoftReference是强引用，而SoftReference和byte数组则是软引用")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SoftReference")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SoftReference")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ref"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SoftReference")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("_4M"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//遍历引用队列，如果有元素，则移除")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Reference")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" poll "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("poll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("poll "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//引用队列不为空，则从集合中移除该元素")]),s._v("\n\t\t\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("poll"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//移动到引用队列中的下一个元素")]),s._v("\n\t\t\tpoll "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("poll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("**大概思路为：**查看引用队列中有无软引用，如果有，则将该软引用从存放它的集合中移除（这里为一个list集合）")]),s._v(" "),a("h5",{attrs:{id:"弱引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弱引用"}},[s._v("#")]),s._v(" 弱引用")]),s._v(" "),a("p",[s._v("只有弱引用引用该对象时，在垃圾回收时，"),a("strong",[s._v("无论内存是否充足")]),s._v("，都会回收弱引用所引用的对象")]),s._v(" "),a("ul",[a("li",[s._v("如上图如果B对象不再引用A3对象，则A3对象会被回收")])]),s._v(" "),a("p",[a("strong",[s._v("弱引用的使用和软引用类似")]),s._v("，只是将 "),a("strong",[s._v("SoftReference 换为了 WeakReference")])]),s._v(" "),a("h5",{attrs:{id:"虚引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚引用"}},[s._v("#")]),s._v(" "),a("strong",[s._v("虚引用")])]),s._v(" "),a("p",[s._v("当虚引用对象所引用的对象被回收以后，虚引用对象就会被放入引用队列中，调用虚引用的方法")]),s._v(" "),a("ul",[a("li",[s._v("虚引用的一个体现是"),a("strong",[s._v("释放直接内存所分配的内存")]),s._v("，当引用的对象ByteBuffer被垃圾回收以后，虚引用对象Cleaner就会被放入引用队列中，然后调用Cleaner的clean方法来释放直接内存")]),s._v(" "),a("li",[s._v("如上图，B对象不再引用ByteBuffer对象，ByteBuffer就会被回收。但是直接内存中的内存还未被回收。这时需要将虚引用对象Cleaner放入引用队列中，然后调用它的clean方法来释放直接内存")])]),s._v(" "),a("h5",{attrs:{id:"终结器引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#终结器引用"}},[s._v("#")]),s._v(" 终结器引用")]),s._v(" "),a("p",[s._v("所有的类都继承自Object类，Object类有一个finalize方法。当某个对象不再被其他的对象所引用时，会先将终结器引用对象放入引用队列中，然后根据终结器引用对象找到它所引用的对象，然后调用该对象的finalize方法。调用以后，该对象就可以被垃圾回收了")]),s._v(" "),a("ul",[a("li",[s._v("如上图，B对象不再引用A4对象。这是终结器对象就会被放入引用队列中，引用队列会根据它，找到它所引用的对象。然后调用被引用对象的finalize方法。调用以后，该对象就可以被垃圾回收了")])]),s._v(" "),a("h5",{attrs:{id:"引用队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用队列"}},[s._v("#")]),s._v(" 引用队列")]),s._v(" "),a("ul",[a("li",[s._v("软引用和弱引用"),a("strong",[s._v("可以配合")]),s._v("引用队列\n"),a("ul",[a("li",[s._v("在"),a("strong",[s._v("弱引用")]),s._v("和"),a("strong",[s._v("虚引用")]),s._v("所引用的对象被回收以后，会将这些引用放入引用队列中，方便一起回收这些软/弱引用对象")])])]),s._v(" "),a("li",[s._v("虚引用和终结器引用"),a("strong",[s._v("必须配合")]),s._v("引用队列\n"),a("ul",[a("li",[s._v("虚引用和终结器引用在使用时会关联一个引用队列")])])])]),s._v(" "),a("h3",{attrs:{id:"如何判断一个常量是废弃常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个常量是废弃常量"}},[s._v("#")]),s._v(" 如何判断一个常量是废弃常量？")]),s._v(" "),a("p",[s._v("运行时常量池主要回收的是废弃的常量。那么，我们如何判断一个常量是废弃常量呢？")]),s._v(" "),a("p",[a("strong",[s._v("JDK1.7 及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。")])]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("🐛 修正（参见："),a("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide/issues/747",target:"_blank",rel:"noopener noreferrer"}},[s._v("issue747open in new window"),a("OutboundLink")],1),s._v("，"),a("a",{attrs:{href:"https://blog.csdn.net/q5706503/article/details/84640762",target:"_blank",rel:"noopener noreferrer"}},[s._v("referenceopen in new window"),a("OutboundLink")],1),s._v("）")]),s._v(" ：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代")])]),s._v(" "),a("li",[a("strong",[s._v("JDK1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代")]),s._v(" 。")]),s._v(" "),a("li",[a("strong",[s._v("JDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)")])])])]),s._v(" "),a("p",[s._v('假如在字符串常量池中存在字符串 "abc"，如果当前没有任何 String 对象引用该字符串常量的话，就说明常量 "abc" 就是废弃常量，如果这时发生内存回收的话而且有必要的话，"abc" 就会被系统清理出常量池了。')]),s._v(" "),a("h3",{attrs:{id:"如何判断一个类是无用的类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个类是无用的类"}},[s._v("#")]),s._v(" 如何判断一个类是无用的类")]),s._v(" "),a("p",[s._v("方法区主要回收的是无用的类，那么如何判断一个类是无用的类的呢？")]),s._v(" "),a("p",[s._v("判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足下面 3 个条件才能算是 "),a("strong",[s._v("“无用的类”")]),s._v(" ：")]),s._v(" "),a("ul",[a("li",[s._v("该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。")]),s._v(" "),a("li",[s._v("加载该类的 "),a("code",[s._v("ClassLoader")]),s._v(" 已经被回收。")]),s._v(" "),a("li",[s._v("该类对应的 "),a("code",[s._v("java.lang.Class")]),s._v(" 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。")])]),s._v(" "),a("p",[s._v("虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然被回收。")]),s._v(" "),a("h3",{attrs:{id:"_2、垃圾回收算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、垃圾回收算法"}},[s._v("#")]),s._v(" 2、垃圾回收算法")]),s._v(" "),a("h4",{attrs:{id:"标记-清除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记-清除"}},[s._v("#")]),s._v(" 标记-清除")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150813.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150813.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("定义")]),s._v("：标记清除算法顾名思义，是指在虚拟机执行垃圾回收的过程中，先采用标记算法确定可回收对象，然后垃圾收集器根据标识清除相应的内容，给堆内存腾出相应的空间")]),s._v(" "),a("ul",[a("li",[s._v("这里的腾出内存空间并不是将内存空间的字节清0，而是记录下这段内存的起始结束地址，下次分配内存的时候，会直接"),a("strong",[s._v("覆盖")]),s._v("这段内存")])]),s._v(" "),a("p",[a("strong",[s._v("缺点")]),s._v("："),a("strong",[s._v("容易产生大量的内存碎片")]),s._v("，可能无法满足大对象的内存分配，一旦导致无法分配对象，那就会导致jvm启动gc，一旦启动gc，我们的应用程序就会暂停，这就导致应用的响应速度变慢")]),s._v(" "),a("h4",{attrs:{id:"标记-整理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记-整理"}},[s._v("#")]),s._v(" 标记-整理")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150827.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150827.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("标记-整理 会将不被GC Root引用的对象回收，清楚其占用的内存空间。然后整理剩余的对象，可以有效避免因内存碎片而导致的问题，但是因为整体需要消耗一定的时间，所以效率较低")]),s._v(" "),a("h4",{attrs:{id:"复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复制"}},[s._v("#")]),s._v(" 复制")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150842.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150842.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150856.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150856.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150907.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150907.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150919.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150919.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("将内存分为等大小的两个区域，FROM和TO（TO中为空）。先将被GC Root引用的对象从FROM放入TO中，再回收不被GC Root引用的对象。然后交换FROM和TO。这样也可以避免内存碎片的问题，但是会占用双倍的内存空间。")]),s._v(" "),a("h3",{attrs:{id:"_3、分代回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、分代回收"}},[s._v("#")]),s._v(" 3、分代回收")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150931.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150931.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"回收流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回收流程"}},[s._v("#")]),s._v(" 回收流程")]),s._v(" "),a("p",[s._v("新创建的对象都被放在了"),a("strong",[s._v("新生代的伊甸园")]),s._v("中")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150939.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150939.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("当伊甸园中的内存不足时，就会进行一次垃圾回收，这时的回收叫做 "),a("strong",[s._v("Minor GC")])]),s._v(" "),a("p",[s._v("Minor GC 会将"),a("strong",[s._v("伊甸园和幸存区FROM")]),s._v("存活的对象"),a("strong",[s._v("先")]),s._v("复制到 "),a("strong",[s._v("幸存区 TO")]),s._v("中， 并让其"),a("strong",[s._v("寿命加1")]),s._v("，再"),a("strong",[s._v("交换两个幸存区")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150946.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150946.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150955.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150955.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151002.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151002.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("再次创建对象，若新生代的伊甸园又满了，则会"),a("strong",[s._v("再次触发 Minor GC")]),s._v("（会触发 "),a("strong",[s._v("stop the world")]),s._v("， 暂停其他用户线程，只让垃圾回收线程工作），这时不仅会回收伊甸园中的垃圾，"),a("strong",[s._v("还会回收幸存区中的垃圾")]),s._v("，再将活跃对象复制到幸存区TO中。回收以后会交换两个幸存区，并让幸存区中的对象"),a("strong",[s._v("寿命加1")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151010.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151010.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("如果幸存区中的对象的"),a("strong",[s._v("寿命超过某个阈值")]),s._v("（最大为15，4bit），就会被"),a("strong",[s._v("放入老年代")]),s._v("中")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151018.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151018.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("如果新生代老年代中的内存都满了，就会先触发Minor GC，再触发"),a("strong",[s._v("Full GC")]),s._v("，扫描"),a("strong",[s._v("新生代和老年代中")]),s._v("所有不再使用的对象并回收")]),s._v(" "),a("h4",{attrs:{id:"gc-分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gc-分析"}},[s._v("#")]),s._v(" GC 分析")]),s._v(" "),a("h5",{attrs:{id:"大对象处理策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大对象处理策略"}},[s._v("#")]),s._v(" 大对象处理策略")]),s._v(" "),a("p",[s._v("当遇到一个"),a("strong",[s._v("较大的对象")]),s._v("时，就算新生代的"),a("strong",[s._v("伊甸园")]),s._v("为空，也"),a("strong",[s._v("无法容纳该对象")]),s._v("时，会将该对象"),a("strong",[s._v("直接晋升为老年代")])]),s._v(" "),a("h5",{attrs:{id:"线程内存溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程内存溢出"}},[s._v("#")]),s._v(" 线程内存溢出")]),s._v(" "),a("p",[s._v("某个线程的内存溢出了而抛异常（out of memory），不会让其他的线程结束运行")]),s._v(" "),a("p",[s._v("这是因为当一个线程"),a("strong",[s._v("抛出OOM异常后")]),s._v("，"),a("strong",[s._v("它所占据的内存资源会全部被释放掉")]),s._v("，从而不会影响其他线程的运行，"),a("strong",[s._v("进程依然正常")])]),s._v(" "),a("h3",{attrs:{id:"_4、垃圾回收器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、垃圾回收器"}},[s._v("#")]),s._v(" 4、垃圾回收器")]),s._v(" "),a("h4",{attrs:{id:"相关概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[s._v("#")]),s._v(" 相关概念")]),s._v(" "),a("p",[a("strong",[s._v("并行收集")]),s._v("：指多条垃圾收集线程并行工作，但此时"),a("strong",[s._v("用户线程仍处于等待状态")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("并发收集")]),s._v("：指用户线程与垃圾收集线程"),a("strong",[s._v("同时工作")]),s._v("（不一定是并行的可能会交替执行）。"),a("strong",[s._v("用户程序在继续运行")]),s._v("，而垃圾收集程序运行在另一个CPU上")]),s._v(" "),a("p",[a("strong",[s._v("吞吐量")]),s._v("：即CPU用于"),a("strong",[s._v("运行用户代码的时间")]),s._v("与CPU"),a("strong",[s._v("总消耗时间")]),s._v("的比值（吞吐量 = 运行用户代码时间 / ( 运行用户代码时间 + 垃圾收集时间 )），也就是。例如：虚拟机共运行100分钟，垃圾收集器花掉1分钟，那么吞吐量就是99%")]),s._v(" "),a("h4",{attrs:{id:"串行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串行"}},[s._v("#")]),s._v(" 串行")]),s._v(" "),a("ul",[a("li",[s._v("单线程")]),s._v(" "),a("li",[s._v("内存较小，个人电脑（CPU核数较少）")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151027.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151027.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("安全点")]),s._v("：让其他线程都在这个点停下来，以免垃圾回收时移动对象地址，使得其他线程找不到被移动的对象")]),s._v(" "),a("p",[s._v("因为是串行的，所以只有一个垃圾回收线程。且在该线程执行回收工作时，其他线程进入"),a("strong",[s._v("阻塞")]),s._v("状态")]),s._v(" "),a("h5",{attrs:{id:"serial-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial-收集器"}},[s._v("#")]),s._v(" Serial 收集器")]),s._v(" "),a("p",[s._v("Serial收集器是最基本的、发展历史最悠久的收集器")]),s._v(" "),a("p",[a("strong",[s._v("特点："),a("strong",[s._v("单线程、简单高效（与其他收集器的单线程相比），采用")]),s._v("复制算法")]),s._v("。对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程手机效率。收集器进行垃圾回收时，必须暂停其他所有的工作线程，直到它结束（Stop The World）")]),s._v(" "),a("h5",{attrs:{id:"parnew-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parnew-收集器"}},[s._v("#")]),s._v(" ParNew 收集器")]),s._v(" "),a("p",[s._v("ParNew收集器其实就是Serial收集器的多线程版本")]),s._v(" "),a("p",[a("strong",[s._v("特点")]),s._v("：多线程、ParNew收集器默认开启的收集线程数与CPU的数量相同，在CPU非常多的环境中，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。和Serial收集器一样存在Stop The World问题")]),s._v(" "),a("h5",{attrs:{id:"serial-old-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial-old-收集器"}},[s._v("#")]),s._v(" Serial Old 收集器")]),s._v(" "),a("p",[s._v("Serial Old是Serial收集器的老年代版本")]),s._v(" "),a("p",[a("strong",[s._v("特点")]),s._v("：同样是单线程收集器，采用"),a("strong",[s._v("标记-整理算法")])]),s._v(" "),a("h4",{attrs:{id:"吞吐量优先"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#吞吐量优先"}},[s._v("#")]),s._v(" 吞吐量优先")]),s._v(" "),a("ul",[a("li",[s._v("多线程")]),s._v(" "),a("li",[s._v("堆内存较大，多核CPU")]),s._v(" "),a("li",[s._v("单位时间内，STW（stop the world，停掉其他所有工作线程）时间最短")]),s._v(" "),a("li",[a("strong",[s._v("JDK1.8默认使用")]),s._v("的垃圾回收器")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151039.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151039.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h5",{attrs:{id:"parallel-scavenge-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parallel-scavenge-收集器"}},[s._v("#")]),s._v(" Parallel Scavenge 收集器")]),s._v(" "),a("p",[s._v("与吞吐量关系密切，故也称为吞吐量优先收集器")]),s._v(" "),a("p",[a("strong",[s._v("特点")]),s._v("：属于新生代收集器也是采用"),a("strong",[s._v("复制算法")]),s._v("的收集器（用到了新生代的幸存区），又是并行的多线程收集器（与ParNew收集器类似）")]),s._v(" "),a("p",[s._v("该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是："),a("strong",[s._v("GC自适应调节策略")]),s._v("（与ParNew收集器最重要的一个区别）")]),s._v(" "),a("p",[a("strong",[s._v("GC自适应调节策略")]),s._v("：Parallel Scavenge收集器可设置-XX:+UseAdptiveSizePolicy参数。当开关打开时"),a("strong",[s._v("不需要")]),s._v("手动指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:SurvivorRation）、晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等，虚拟机会根据系统的运行状况收集性能监控信息，动态设置这些参数以提供最优的停顿时间和最高的吞吐量，这种调节方式称为GC的自适应调节策略。")]),s._v(" "),a("p",[s._v("Parallel Scavenge收集器使用两个参数控制吞吐量：")]),s._v(" "),a("ul",[a("li",[s._v("XX:MaxGCPauseMillis 控制最大的垃圾收集停顿时间")]),s._v(" "),a("li",[s._v("XX:GCRatio 直接设置吞吐量的大小")])]),s._v(" "),a("h5",{attrs:{id:"parallel-old-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old-收集器"}},[s._v("#")]),s._v(" "),a("strong",[s._v("Parallel Old 收集器")])]),s._v(" "),a("p",[s._v("是Parallel Scavenge收集器的老年代版本")]),s._v(" "),a("p",[a("strong",[s._v("特点")]),s._v("：多线程，采用"),a("strong",[s._v("标记-整理算法")]),s._v("（老年代没有幸存区）")]),s._v(" "),a("h4",{attrs:{id:"响应时间优先"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应时间优先"}},[s._v("#")]),s._v(" 响应时间优先")]),s._v(" "),a("ul",[a("li",[s._v("多线程")]),s._v(" "),a("li",[s._v("堆内存较大，多核CPU")]),s._v(" "),a("li",[s._v("尽可能让单次STW时间变短（尽量不影响其他线程运行）")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151052.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151052.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h5",{attrs:{id:"cms-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cms-收集器"}},[s._v("#")]),s._v(" CMS 收集器")]),s._v(" "),a("p",[s._v("Concurrent Mark Sweep，一种以获取"),a("strong",[s._v("最短回收停顿时间")]),s._v("为目标的"),a("strong",[s._v("老年代")]),s._v("收集器")]),s._v(" "),a("p",[a("strong",[s._v("特点")]),s._v("：基于"),a("strong",[s._v("标记-清除算法")]),s._v("实现。并发收集、低停顿，但是会产生内存碎片")]),s._v(" "),a("p",[a("strong",[s._v("应用场景")]),s._v("：适用于注重服务的响应速度，希望系统停顿时间最短，给用户带来更好的体验等场景下。如web程序、b/s服务")]),s._v(" "),a("p",[a("strong",[s._v("CMS收集器的运行过程分为下列4步：")])]),s._v(" "),a("p",[a("strong",[s._v("初始标记")]),s._v("：标记GC Roots能直接到的对象。速度很快但是"),a("strong",[s._v("仍存在Stop The World问题")])]),s._v(" "),a("p",[a("strong",[s._v("并发标记")]),s._v("：进行GC Roots Tracing 的过程，找出存活对象且用户线程可并发执行")]),s._v(" "),a("p",[a("strong",[s._v("重新标记")]),s._v("：为了"),a("strong",[s._v("修正并发标记期间")]),s._v("因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录。仍然存在Stop The World问题")]),s._v(" "),a("p",[a("strong",[s._v("并发清除")]),s._v("：对标记的对象进行清除回收")]),s._v(" "),a("p",[s._v("CMS收集器的内存回收过程是与用户线程一起"),a("strong",[s._v("并发执行")]),s._v("的")]),s._v(" "),a("h4",{attrs:{id:"g1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1"}},[s._v("#")]),s._v(" G1")]),s._v(" "),a("h5",{attrs:{id:"定义-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义-2"}},[s._v("#")]),s._v(" "),a("strong",[s._v("定义")]),s._v("：")]),s._v(" "),a("p",[s._v("Garbage First")]),s._v(" "),a("p",[s._v("JDK 9以后默认使用，而且替代了CMS 收集器")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200909201212.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200909201212.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h5",{attrs:{id:"适用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[s._v("#")]),s._v(" 适用场景")]),s._v(" "),a("ul",[a("li",[s._v("同时注重吞吐量和低延迟（响应时间）")]),s._v(" "),a("li",[s._v("超大堆内存（内存大的），会将堆内存划分为多个"),a("strong",[s._v("大小相等")]),s._v("的区域")]),s._v(" "),a("li",[s._v("整体上是"),a("strong",[s._v("标记-整理")]),s._v("算法，两个区域之间是"),a("strong",[s._v("复制")]),s._v("算法")])]),s._v(" "),a("p",[a("strong",[s._v("相关参数")]),s._v("：JDK8 并不是默认开启的，所需要参数开启")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151100.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151100.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h5",{attrs:{id:"g1垃圾回收阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1垃圾回收阶段"}},[s._v("#")]),s._v(" G1垃圾回收阶段")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151109.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151109.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("新生代伊甸园垃圾回收—–>内存不足，新生代回收+并发标记—–>回收新生代伊甸园、幸存区、老年代内存——>新生代伊甸园垃圾回收(重新开始)")]),s._v(" "),a("h5",{attrs:{id:"young-collection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#young-collection"}},[s._v("#")]),s._v(" Young Collection")]),s._v(" "),a("p",[a("strong",[s._v("分区算法region")])]),s._v(" "),a("p",[s._v("分代是按对象的生命周期划分，分区则是将堆空间划分连续几个不同小区间，每一个小区间独立回收，可以控制一次回收多少个小区间，方便控制 GC 产生的停顿时间")]),s._v(" "),a("p",[s._v("E：伊甸园 S：幸存区 O：老年代")]),s._v(" "),a("ul",[a("li",[s._v("会STW")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151119.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151119.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151129.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151129.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151140.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151140.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h5",{attrs:{id:"young-collection-cm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#young-collection-cm"}},[s._v("#")]),s._v(" Young Collection + CM")]),s._v(" "),a("p",[s._v("CM：并发标记")]),s._v(" "),a("ul",[a("li",[s._v("在 Young GC 时会"),a("strong",[s._v("对 GC Root 进行初始标记")])]),s._v(" "),a("li",[s._v("在老年代"),a("strong",[s._v("占用堆内存的比例")]),s._v("达到阈值时，对进行并发标记（不会STW），阈值可以根据用户来进行设定")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151150.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151150.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h5",{attrs:{id:"mixed-collection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mixed-collection"}},[s._v("#")]),s._v(" Mixed Collection")]),s._v(" "),a("p",[s._v("会对E S O 进行"),a("strong",[s._v("全面的回收")])]),s._v(" "),a("ul",[a("li",[s._v("最终标记")]),s._v(" "),a("li",[a("strong",[s._v("拷贝")]),s._v("存活")])]),s._v(" "),a("p",[s._v("-XX:MaxGCPauseMills:xxx 用于指定最长的停顿时间")]),s._v(" "),a("p",[a("strong",[s._v("问")]),s._v("：为什么有的老年代被拷贝了，有的没拷贝？")]),s._v(" "),a("p",[s._v("因为指定了最大停顿时间，如果对所有老年代都进行回收，耗时可能过高。为了保证时间不超过设定的停顿时间，会"),a("strong",[s._v("回收最有价值的老年代")]),s._v("（回收后，能够得到更多内存）")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151201.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151201.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h5",{attrs:{id:"full-gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#full-gc"}},[s._v("#")]),s._v(" Full GC")]),s._v(" "),a("p",[s._v("G1在老年代内存不足时（老年代所占内存超过阈值）")]),s._v(" "),a("ul",[a("li",[s._v("如果垃圾产生速度慢于垃圾回收速度，不会触发Full GC，还是并发地进行清理")]),s._v(" "),a("li",[s._v("如果垃圾产生速度快于垃圾回收速度，便会触发Full GC")])]),s._v(" "),a("h5",{attrs:{id:"young-collection-跨代引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#young-collection-跨代引用"}},[s._v("#")]),s._v(" Young Collection 跨代引用")]),s._v(" "),a("ul",[a("li",[s._v("新生代回收的跨代引用（老年代引用新生代）问题")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151211.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151211.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[s._v("卡表与Remembered Set\n"),a("ul",[a("li",[s._v("Remembered Set 存在于E中，用于保存新生代对象对应的脏卡\n"),a("ul",[a("li",[s._v("脏卡：O被划分为多个区域（一个区域512K），如果该区域引用了新生代对象，则该区域被称为脏卡")])])])])]),s._v(" "),a("li",[s._v("在引用变更时通过post-write barried + dirty card queue")]),s._v(" "),a("li",[s._v("concurrent refinement threads 更新 Remembered Set")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151222.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151222.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h5",{attrs:{id:"remark"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remark"}},[s._v("#")]),s._v(" Remark")]),s._v(" "),a("p",[s._v("重新标记阶段")]),s._v(" "),a("p",[s._v("在垃圾回收时，收集器处理对象的过程中")]),s._v(" "),a("p",[s._v("黑色：已被处理，需要保留的 灰色：正在处理中的 白色：还未处理的")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151229.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151229.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("但是在"),a("strong",[s._v("并发标记过程中")]),s._v("，有可能A被处理了以后未引用C，但该处理过程还未结束，在处理过程结束之前A引用了C，这时就会用到remark")]),s._v(" "),a("p",[s._v("过程如下")]),s._v(" "),a("ul",[a("li",[s._v("之前C未被引用，这时A引用了C，就会给C加一个写屏障，写屏障的指令会被执行，将C放入一个队列当中，并将C变为 处理中 状态")]),s._v(" "),a("li",[s._v("在"),a("strong",[s._v("并发标记")]),s._v("阶段结束以后，重新标记阶段会STW，然后将放在该队列中的对象重新处理，发现有强引用引用它，就会处理它")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151239.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151239.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h5",{attrs:{id:"jdk-8u20-字符串去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk-8u20-字符串去重"}},[s._v("#")]),s._v(" JDK 8u20 字符串去重")]),s._v(" "),a("p",[s._v("过程")]),s._v(" "),a("ul",[a("li",[s._v("将所有新分配的字符串（底层是char[]）放入一个队列")]),s._v(" "),a("li",[s._v("当新生代回收时，G1并发检查是否有重复的字符串")]),s._v(" "),a("li",[s._v("如果字符串的值一样，就让他们"),a("strong",[s._v("引用同一个字符串对象")])]),s._v(" "),a("li",[s._v("注意，其与String.intern的区别\n"),a("ul",[a("li",[s._v("intern关注的是字符串对象")]),s._v(" "),a("li",[s._v("字符串去重关注的是char[]")]),s._v(" "),a("li",[s._v("在JVM内部，使用了不同的字符串标")])])])]),s._v(" "),a("p",[s._v("优点与缺点")]),s._v(" "),a("ul",[a("li",[s._v("节省了大量内存")]),s._v(" "),a("li",[s._v("新生代回收时间略微增加，导致略微多占用CPU")])]),s._v(" "),a("h5",{attrs:{id:"jdk-8u40-并发标记类卸载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk-8u40-并发标记类卸载"}},[s._v("#")]),s._v(" JDK 8u40 并发标记类卸载")]),s._v(" "),a("p",[s._v("在并发标记阶段结束以后，就能知道哪些类不再被使用。如果一个类加载器的所有类都不在使用，则卸载它所加载的所有类")]),s._v(" "),a("h5",{attrs:{id:"jdk-8u60-回收巨型对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk-8u60-回收巨型对象"}},[s._v("#")]),s._v(" JDK 8u60 回收巨型对象")]),s._v(" "),a("ul",[a("li",[s._v("一个对象大于region的一半时，就称为巨型对象")]),s._v(" "),a("li",[s._v("G1不会对巨型对象进行拷贝")]),s._v(" "),a("li",[s._v("回收时被优先考虑")]),s._v(" "),a("li",[s._v("G1会跟踪老年代所有incoming引用，如果老年代incoming引用为0的巨型对象就可以在新生代垃圾回收时处理掉")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151249.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151249.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h3",{attrs:{id:"_5、gc-调优"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、gc-调优"}},[s._v("#")]),s._v(" 5、GC 调优")]),s._v(" "),a("p",[s._v("查看虚拟机参数命令")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('"F:\\JAVA\\JDK8.0\\bin\\java" -XX:+PrintFlagsFinal -version | findstr "GC"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("可以根据参数去查询具体的信息")]),s._v(" "),a("h4",{attrs:{id:"调优领域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调优领域"}},[s._v("#")]),s._v(" 调优领域")]),s._v(" "),a("ul",[a("li",[s._v("内存")]),s._v(" "),a("li",[s._v("锁竞争")]),s._v(" "),a("li",[s._v("CPU占用")]),s._v(" "),a("li",[s._v("IO")]),s._v(" "),a("li",[s._v("GC")])]),s._v(" "),a("h4",{attrs:{id:"确定目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#确定目标"}},[s._v("#")]),s._v(" 确定目标")]),s._v(" "),a("p",[s._v("低延迟/高吞吐量？ 选择合适的GC")]),s._v(" "),a("ul",[a("li",[s._v("CMS G1 ZGC")]),s._v(" "),a("li",[s._v("ParallelGC")]),s._v(" "),a("li",[s._v("Zing")])]),s._v(" "),a("h4",{attrs:{id:"最快的gc是不发生gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最快的gc是不发生gc"}},[s._v("#")]),s._v(" 最快的GC是不发生GC")]),s._v(" "),a("p",[s._v("首先排除减少因为自身编写的代码而引发的内存问题")]),s._v(" "),a("ul",[a("li",[s._v("查看Full GC前后的内存占用，考虑以下几个问题\n"),a("ul",[a("li",[s._v("数据是不是太多？")]),s._v(" "),a("li",[s._v("数据表示是否太臃肿\n"),a("ul",[a("li",[s._v("对象图")]),s._v(" "),a("li",[s._v("对象大小")])])]),s._v(" "),a("li",[s._v("是否存在内存泄漏")])])])]),s._v(" "),a("h4",{attrs:{id:"新生代调优"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新生代调优"}},[s._v("#")]),s._v(" 新生代调优")]),s._v(" "),a("ul",[a("li",[s._v("新生代的特点\n"),a("ul",[a("li",[s._v("所有的new操作分配内存都是非常廉价的\n"),a("ul",[a("li",[s._v("TLAB")])])]),s._v(" "),a("li",[s._v("死亡对象回收零代价")]),s._v(" "),a("li",[s._v("大部分对象用过即死（朝生夕死）")]),s._v(" "),a("li",[s._v("MInor GC 所用时间远小于Full GC")])])]),s._v(" "),a("li",[s._v("新生代内存越大越好么？\n"),a("ul",[a("li",[s._v("不是\n"),a("ul",[a("li",[s._v("新生代内存太小：频繁触发Minor GC，会STW，会使得吞吐量下降")]),s._v(" "),a("li",[s._v("新生代内存太大：老年代内存占比有所降低，会更频繁地触发Full GC。而且触发Minor GC时，清理新生代所花费的时间会更长")])])]),s._v(" "),a("li",[s._v("新生代内存设置为内容纳[并发量*(请求-响应)]的数据为宜")])])])]),s._v(" "),a("h4",{attrs:{id:"幸存区调优"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#幸存区调优"}},[s._v("#")]),s._v(" 幸存区调优")]),s._v(" "),a("ul",[a("li",[s._v("幸存区需要能够保存 "),a("strong",[s._v("当前活跃对象")]),s._v("+"),a("strong",[s._v("需要晋升的对象")])]),s._v(" "),a("li",[s._v("晋升阈值配置得当，让长时间存活的对象尽快晋升")])]),s._v(" "),a("h4",{attrs:{id:"老年代调优"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#老年代调优"}},[s._v("#")]),s._v(" 老年代调优")]),s._v(" "),a("h2",{attrs:{id:"四、类加载与字节码技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、类加载与字节码技术"}},[s._v("#")]),s._v(" 四、类加载与字节码技术")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151300.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151300.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h3",{attrs:{id:"_1、类文件结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、类文件结构"}},[s._v("#")]),s._v(" 1、类文件结构")]),s._v(" "),a("p",[s._v("首先获得.class字节码文件")]),s._v(" "),a("p",[s._v("方法：")]),s._v(" "),a("ul",[a("li",[s._v("在文本文档里写入java代码（文件名与类名一致），将文件类型改为.java")]),s._v(" "),a("li",[s._v("java终端中，执行javac X:...\\XXX.java")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200910155135.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200910155135.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("以下是字节码文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09 \n0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b 07 \n0000040 00 1c 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29 \n0000060 56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e \n0000100 75 6d 62 65 72 54 61 62 6c 65 01 00 12 4c 6f 63 \n0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 01 \n0000140 00 04 74 68 69 73 01 00 1d 4c 63 6e 2f 69 74 63 \n0000160 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c 6f \n0000200 57 6f 72 6c 64 3b 01 00 04 6d 61 69 6e 01 00 16 \n0000220 28 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 \n0000240 69 6e 67 3b 29 56 01 00 04 61 72 67 73 01 00 13 \n0000260 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 \n0000300 6e 67 3b 01 00 10 4d 65 74 68 6f 64 50 61 72 61 \n0000320 6d 65 74 65 72 73 01 00 0a 53 6f 75 72 63 65 46 \n0000340 69 6c 65 01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64\n0000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d 0c 00 1e \n0000400 00 1f 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64 \n0000420 07 00 20 0c 00 21 00 22 01 00 1b 63 6e 2f 69 74 \n0000440 63 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c \n0000460 6f 57 6f 72 6c 64 01 00 10 6a 61 76 61 2f 6c 61 \n0000500 6e 67 2f 4f 62 6a 65 63 74 01 00 10 6a 61 76 61 \n0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d 01 00 03 6f \n0000540 75 74 01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72 \n0000560 69 6e 74 53 74 72 65 61 6d 3b 01 00 13 6a 61 76 \n0000600 61 2f 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d \n0000620 01 00 07 70 72 69 6e 74 6c 6e 01 00 15 28 4c 6a \n0000640 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b \n0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 00 01 \n0000700 00 07 00 08 00 01 00 09 00 00 00 2f 00 01 00 01 \n0000720 00 00 00 05 2a b7 00 01 b1 00 00 00 02 00 0a 00 \n0000740 00 00 06 00 01 00 00 00 04 00 0b 00 00 00 0c 00 \n0000760 01 00 00 00 05 00 0c 00 0d 00 00 00 09 00 0e 00 \n0001000 0f 00 02 00 09 00 00 00 37 00 02 00 01 00 00 00 \n0001020 09 b2 00 02 12 03 b6 00 04 b1 00 00 00 02 00 0a \n0001040 00 00 00 0a 00 02 00 00 00 06 00 08 00 07 00 0b \n0001060 00 00 00 0c 00 01 00 00 00 09 00 10 00 11 00 00 \n0001100 00 12 00 00 00 05 01 00 10 00 00 00 01 00 13 00 \n0001120 00 00 02 00 14Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("p",[s._v("根据 JVM 规范，"),a("strong",[s._v("类文件结构")]),s._v("如下")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("u4 \t\t\t magic\nu2             minor_version;    \nu2             major_version;    \nu2             constant_pool_count;    \ncp_info        constant_pool[constant_pool_count-1];    \nu2             access_flags;    \nu2             this_class;    \nu2             super_class;   \nu2             interfaces_count;    \nu2             interfaces[interfaces_count];   \nu2             fields_count;    \nfield_info     fields[fields_count];   \nu2             methods_count;    \nmethod_info    methods[methods_count];    \nu2             attributes_count;    \nattribute_info attributes[attributes_count];Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h4",{attrs:{id:"魔数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#魔数"}},[s._v("#")]),s._v(" 魔数")]),s._v(" "),a("p",[s._v("u4 magic")]),s._v(" "),a("p",[s._v("对应字节码文件的0~3个字节")]),s._v(" "),a("p",[s._v("0000000 "),a("strong",[s._v("ca fe ba be")]),s._v(" 00 00 00 34 00 23 0a 00 06 00 15 09")]),s._v(" "),a("h4",{attrs:{id:"版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本"}},[s._v("#")]),s._v(" 版本")]),s._v(" "),a("p",[s._v("u2 minor_version;")]),s._v(" "),a("p",[s._v("u2 major_version;")]),s._v(" "),a("p",[s._v("0000000 ca fe ba be "),a("strong",[s._v("00 00 00 34")]),s._v(" 00 23 0a 00 06 00 15 09")]),s._v(" "),a("p",[s._v("34H = 52，代表JDK8")]),s._v(" "),a("h4",{attrs:{id:"常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量池"}},[s._v("#")]),s._v(" 常量池")]),s._v(" "),a("p",[s._v("见资料文件")]),s._v(" "),a("p",[s._v("…略")]),s._v(" "),a("h3",{attrs:{id:"_2、字节码指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、字节码指令"}},[s._v("#")]),s._v(" 2、字节码指令")]),s._v(" "),a("p",[s._v("可参考")]),s._v(" "),a("p",[s._v("https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5")]),s._v(" "),a("h4",{attrs:{id:"javap工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javap工具"}},[s._v("#")]),s._v(" javap工具")]),s._v(" "),a("p",[s._v("Oracle 提供了 "),a("strong",[s._v("javap")]),s._v(" 工具来反编译 class 文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('javap -v F:\\Thread_study\\src\\com\\nyima\\JVM\\day01\\Main.classCopy\nF:\\Thread_study>javap -v F:\\Thread_study\\src\\com\\nyima\\JVM\\day5\\Demo1.class\nClassfile /F:/Thread_study/src/com/nyima/JVM/day5/Demo1.class\n  Last modified 2020-6-6; size 434 bytes\n  MD5 checksum df1dce65bf6fb0b4c1de318051f4a67e\n  Compiled from "Demo1.java"\npublic class com.nyima.JVM.day5.Demo1\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #6.#15         // java/lang/Object."<init>":()V\n   #2 = Fieldref           #16.#17        // java/lang/System.out:Ljava/io/PrintStream;\n   #3 = String             #18            // hello world\n   #4 = Methodref          #19.#20        // java/io/PrintStream.println:(Ljava/lang/String;)V\n   #5 = Class              #21            // com/nyima/JVM/day5/Demo1\n   #6 = Class              #22            // java/lang/Object\n   #7 = Utf8               <init>\n   #8 = Utf8               ()V\n   #9 = Utf8               Code\n  #10 = Utf8               LineNumberTable\n  #11 = Utf8               main\n  #12 = Utf8               ([Ljava/lang/String;)V\n  #13 = Utf8               SourceFile\n  #14 = Utf8               Demo1.java\n  #15 = NameAndType        #7:#8          // "<init>":()V\n  #16 = Class              #23            // java/lang/System\n  #17 = NameAndType        #24:#25        // out:Ljava/io/PrintStream;\n  #18 = Utf8               hello world\n  #19 = Class              #26            // java/io/PrintStream\n  #20 = NameAndType        #27:#28        // println:(Ljava/lang/String;)V\n  #21 = Utf8               com/nyima/JVM/day5/Demo1\n  #22 = Utf8               java/lang/Object\n  #23 = Utf8               java/lang/System\n  #24 = Utf8               out\n  #25 = Utf8               Ljava/io/PrintStream;\n  #26 = Utf8               java/io/PrintStream\n  #27 = Utf8               println\n  #28 = Utf8               (Ljava/lang/String;)V\n{\n  public com.nyima.JVM.day5.Demo1();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object."<init>":()V\n         4: return\n      LineNumberTable:\n        line 7: 0\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=1, args_size=1\n         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         3: ldc           #3                  // String hello world\n         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n\n         8: return\n      LineNumberTable:\n        line 9: 0\n        line 10: 8\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br")])]),a("h4",{attrs:{id:"图解方法执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图解方法执行流程"}},[s._v("#")]),s._v(" 图解方法执行流程")]),s._v(" "),a("p",[s._v("代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo3_1 {    \n\tpublic static void main(String[] args) {        \n\t\tint a = 10;        \n\t\tint b = Short.MAX_VALUE + 1;        \n\t\tint c = a + b;        \n\t\tSystem.out.println(c);   \n    } \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("常量池载入运行时常量池")])]),s._v(" "),a("p",[s._v("常量池也属于方法区，只不过这里单独提出来了")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151317.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151317.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("方法字节码载入方法区")])]),s._v(" "),a("p",[s._v("（stack=2，locals=4） 对应操作数栈有2个空间（每个空间4个字节），局部变量表中有4个槽位")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151325.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151325.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("执行引擎开始执行字节码")])]),s._v(" "),a("p",[a("strong",[s._v("bipush 10")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("将一个 byte 压入操作数栈")]),s._v(" "),a("p",[s._v("（其长度会补齐 4 个字节），类似的指令还有")]),s._v(" "),a("ul",[a("li",[s._v("sipush 将一个 short 压入操作数栈（其长度会补齐 4 个字节）")]),s._v(" "),a("li",[s._v("ldc 将一个 int 压入操作数栈")]),s._v(" "),a("li",[s._v("ldc2_w 将一个 long 压入操作数栈（"),a("strong",[s._v("分两次压入")]),s._v("，因为 long 是 8 个字节）")]),s._v(" "),a("li",[s._v("这里小的数字都是和字节码指令存在一起，"),a("strong",[s._v("超过 short 范围的数字存入了常量池")])])])])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151336.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151336.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("istore 1")])]),s._v(" "),a("p",[s._v("将操作数栈栈顶元素弹出，放入局部变量表的slot 1中")]),s._v(" "),a("p",[s._v("对应代码中的")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("a = 10Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151346.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151346.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151412.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151412.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("ldc #3")])]),s._v(" "),a("p",[s._v("读取运行时常量池中#3，即32768(超过short最大值范围的数会被放到运行时常量池中)，将其加载到操作数栈中")]),s._v(" "),a("p",[s._v("注意 Short.MAX_VALUE 是 32767，所以 32768 = Short.MAX_VALUE + 1 实际是在编译期间计算好的")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151421.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151421.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("istore 2")])]),s._v(" "),a("p",[s._v("将操作数栈中的元素弹出，放到局部变量表的2号位置")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151432.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151432.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151441.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151441.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("iload1 iload2")])]),s._v(" "),a("p",[s._v("将局部变量表中1号位置和2号位置的元素放入操作数栈中")]),s._v(" "),a("ul",[a("li",[s._v("因为只能在操作数栈中执行运算操作")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151450.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151450.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151459.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151459.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("iadd")])]),s._v(" "),a("p",[s._v("将操作数栈中的两个元素"),a("strong",[s._v("弹出栈")]),s._v("并相加，结果在压入操作数栈中")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151508.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151508.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151523.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151523.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("istore 3")])]),s._v(" "),a("p",[s._v("将操作数栈中的元素弹出，放入局部变量表的3号位置")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151547.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151547.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151555.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151555.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("getstatic #4")])]),s._v(" "),a("p",[s._v("在运行时常量池中找到#4，发现是一个对象")]),s._v(" "),a("p",[s._v("在堆内存中找到该对象，并将其"),a("strong",[s._v("引用")]),s._v("放入操作数栈中")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151605.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151605.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151613.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151613.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("iload 3")])]),s._v(" "),a("p",[s._v("将局部变量表中3号位置的元素压入操作数栈中")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151624.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151624.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("invokevirtual 5")])]),s._v(" "),a("p",[s._v("找到常量池 #5 项，定位到方法区 java/io/PrintStream.println:(I)V 方法")]),s._v(" "),a("p",[s._v("生成新的栈帧（分配 locals、stack等）")]),s._v(" "),a("p",[s._v("传递参数，执行新栈帧中的字节码")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151632.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151632.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("执行完毕，弹出栈帧")]),s._v(" "),a("p",[s._v("清除 main 操作数栈内容")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151640.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151640.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("return")]),s._v("\n完成 main 方法调用，弹出 main 栈帧，程序结束")]),s._v(" "),a("h4",{attrs:{id:"通过字节码指令来分析问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过字节码指令来分析问题"}},[s._v("#")]),s._v(" 通过字节码指令来分析问题")]),s._v(" "),a("p",[s._v("代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tint i=0;\n\t\tint x=0;\n\t\twhile(i<10) {\n\t\t\tx = x++;\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(x); //接过为0\n\t}\n}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("为什么最终的x结果为0呢？ 通过分析字节码指令即可知晓")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Code:\n     stack=2, locals=3, args_size=1\t//操作数栈分配2个空间，局部变量表分配3个空间\n        0: iconst_0\t//准备一个常数0\n        1: istore_1\t//将常数0放入局部变量表的1号槽位 i=0\n        2: iconst_0\t//准备一个常数0\n        3: istore_2\t//将常数0放入局部变量的2号槽位 x=0\t\n        4: iload_1\t\t//将局部变量表1号槽位的数放入操作数栈中\n        5: bipush        10\t//将数字10放入操作数栈中，此时操作数栈中有2个数\n        7: if_icmpge     21\t//比较操作数栈中的两个数，如果下面的数大于上面的数，就跳转到21。这里的比较是将两个数做减法。因为涉及运算操作，所以会将两个数弹出操作数栈来进行运算。运算结束后操作数栈为空\n       10: iload_2\t\t//将局部变量2号槽位的数放入操作数栈中，放入的值是0\n       11: iinc          2, 1\t//将局部变量2号槽位的数加1，自增后，槽位中的值为1\n       14: istore_2\t//将操作数栈中的数放入到局部变量表的2号槽位，2号槽位的值又变为了0\n       15: iinc          1, 1 //1号槽位的值自增1\n       18: goto          4 //跳转到第4条指令\n       21: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n       24: iload_2\n       25: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V\n       28: returnCopy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h4",{attrs:{id:"构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[s._v("#")]),s._v(" 构造方法")]),s._v(" "),a("h5",{attrs:{id:"cinit-v"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cinit-v"}},[s._v("#")]),s._v(" cinit()V")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo3 {\n\tstatic int i = 10;\n\n\tstatic {\n\t\ti = 20;\n\t}\n\n\tstatic {\n\t\ti = 30;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(i); //结果为30\n\t}\n}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("编译器会按"),a("strong",[s._v("从上至下")]),s._v("的顺序，收集所有 static 静态代码块和静态成员赋值的代码，"),a("strong",[s._v("合并")]),s._v("为一个特殊的方法 cinit()V ：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("stack=1, locals=0, args_size=0\n         0: bipush        10\n         2: putstatic     #3                  // Field i:I\n         5: bipush        20\n         7: putstatic     #3                  // Field i:I\n        10: bipush        30\n        12: putstatic     #3                  // Field i:I\n        15: returnCopy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h5",{attrs:{id:"init-v"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-v"}},[s._v("#")]),s._v(" init()V")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Demo4 {\n\tprivate String a = "s1";\n\n\t{\n\t\tb = 20;\n\t}\n\n\tprivate int b = 10;\n\n\t{\n\t\ta = "s2";\n\t}\n\n\tpublic Demo4(String a, int b) {\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tDemo4 d = new Demo4("s3", 30);\n\t\tSystem.out.println(d.a);\n\t\tSystem.out.println(d.b);\n\t}\n}Copy\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("编译器会按"),a("strong",[s._v("从上至下")]),s._v("的顺序，收集所有 {} 代码块和成员变量赋值的代码，"),a("strong",[s._v("形成新的构造方法")]),s._v("，但"),a("strong",[s._v("原始构造方法")]),s._v("内的代码"),a("strong",[s._v("总是在后")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Code:\n     stack=2, locals=3, args_size=3\n        0: aload_0\n        1: invokespecial #1                  // Method java/lang/Object."<init>":()V\n        4: aload_0\n        5: ldc           #2                  // String s1\n        7: putfield      #3                  // Field a:Ljava/lang/String;\n       10: aload_0\n       11: bipush        20\n       13: putfield      #4                  // Field b:I\n       16: aload_0\n       17: bipush        10\n       19: putfield      #4                  // Field b:I\n       22: aload_0\n       23: ldc           #5                  // String s2\n       25: putfield      #3                  // Field a:Ljava/lang/String;\n       //原始构造方法在最后执行\n       28: aload_0\n       29: aload_1\n       30: putfield      #3                  // Field a:Ljava/lang/String;\n       33: aload_0\n       34: iload_2\n       35: putfield      #4                  // Field b:I\n       38: returnCopy\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h4",{attrs:{id:"方法调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法调用"}},[s._v("#")]),s._v(" 方法调用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo5 {\n\tpublic Demo5() {\n\n\t}\n\n\tprivate void test1() {\n\n\t}\n\n\tprivate final void test2() {\n\n\t}\n\n\tpublic void test3() {\n\n\t}\n\n\tpublic static void test4() {\n\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tDemo5 demo5 = new Demo5();\n\t\tdemo5.test1();\n\t\tdemo5.test2();\n\t\tdemo5.test3();\n\t\tDemo5.test4();\n\t}\n}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[s._v("不同方法在调用时，对应的虚拟机指令有所区别")]),s._v(" "),a("ul",[a("li",[s._v("私有、构造、被final修饰的方法，在调用时都使用"),a("strong",[s._v("invokespecial")]),s._v("指令")]),s._v(" "),a("li",[s._v("普通成员方法在调用时，使用invokespecial指令。因为编译期间无法确定该方法的内容，只有在运行期间才能确定")]),s._v(" "),a("li",[s._v("静态方法在调用时使用invokestatic指令")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Code:\n      stack=2, locals=2, args_size=1\n         0: new           #2                  // class com/nyima/JVM/day5/Demo5 \n         3: dup\n         4: invokespecial #3                  // Method "<init>":()V\n         7: astore_1\n         8: aload_1\n         9: invokespecial #4                  // Method test1:()V\n        12: aload_1\n        13: invokespecial #5                  // Method test2:()V\n        16: aload_1\n        17: invokevirtual #6                  // Method test3:()V\n        20: invokestatic  #7                  // Method test4:()V\n        23: returnCopy\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("ul",[a("li",[s._v("new 是创建【对象】，给对象分配堆内存，执行成功会将【"),a("strong",[s._v("对象引用")]),s._v("】压入操作数栈")]),s._v(" "),a("li",[s._v("dup 是赋值操作数栈栈顶的内容，本例即为【"),a("strong",[s._v("对象引用")]),s._v("】，为什么需要两份引用呢，一个是要配合 invokespecial 调用该对象的构造方法 “init”😦)V （会消耗掉栈顶一个引用），另一个要 配合 astore_1 赋值给局部变量")]),s._v(" "),a("li",[s._v("终方法（ﬁnal），私有方法（private），构造方法都是由 invokespecial 指令来调用，属于静态绑定")]),s._v(" "),a("li",[s._v("普通成员方法是由 invokevirtual 调用，属于"),a("strong",[s._v("动态绑定")]),s._v("，即支持多态 成员方法与静态方法调用的另一个区别是，执行方法前是否需要【对象引用】")])]),s._v(" "),a("h4",{attrs:{id:"多态原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态原理"}},[s._v("#")]),s._v(" 多态原理")]),s._v(" "),a("p",[s._v("因为普通成员方法需要在运行时才能确定具体的内容，所以虚拟机需要调用"),a("strong",[s._v("invokevirtual")]),s._v("指令")]),s._v(" "),a("p",[s._v("在执行invokevirtual指令时，经历了以下几个步骤")]),s._v(" "),a("ul",[a("li",[s._v("先通过栈帧中对象的引用找到对象")]),s._v(" "),a("li",[s._v("分析对象头，找到对象实际的Class")]),s._v(" "),a("li",[s._v("Class结构中有"),a("strong",[s._v("vtable")])]),s._v(" "),a("li",[s._v("查询vtable找到方法的具体地址")]),s._v(" "),a("li",[s._v("执行方法的字节码")])]),s._v(" "),a("h4",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[s._v("#")]),s._v(" 异常处理")]),s._v(" "),a("h5",{attrs:{id:"try-catch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#try-catch"}},[s._v("#")]),s._v(" try-catch")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tint i = 0;\n\t\ttry {\n\t\t\ti = 10;\n\t\t}catch (Exception e) {\n\t\t\ti = 20;\n\t\t}\n\t}\n}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("对应字节码指令")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Code:\n     stack=1, locals=3, args_size=1\n        0: iconst_0\n        1: istore_1\n        2: bipush        10\n        4: istore_1\n        5: goto          12\n        8: astore_2\n        9: bipush        20\n       11: istore_1\n       12: return\n     //多出来一个异常表\n     Exception table:\n        from    to  target type\n            2     5     8   Class java/lang/ExceptionCopy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("ul",[a("li",[s._v("可以看到多出来一个 Exception table 的结构，[from, to) 是"),a("strong",[s._v("前闭后开")]),s._v("（也就是检测2~4行）的检测范围，一旦这个范围内的字节码执行出现异常，则通过 type 匹配异常类型，如果一致，进入 target 所指示行号")]),s._v(" "),a("li",[s._v("8行的字节码指令 astore_2 是将异常对象引用存入局部变量表的2号位置（为e）")])]),s._v(" "),a("h5",{attrs:{id:"多个single-catch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多个single-catch"}},[s._v("#")]),s._v(" 多个single-catch")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tint i = 0;\n\t\ttry {\n\t\t\ti = 10;\n\t\t}catch (ArithmeticException e) {\n\t\t\ti = 20;\n\t\t}catch (Exception e) {\n\t\t\ti = 30;\n\t\t}\n\t}\n}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("对应的字节码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Code:\n     stack=1, locals=3, args_size=1\n        0: iconst_0\n        1: istore_1\n        2: bipush        10\n        4: istore_1\n        5: goto          19\n        8: astore_2\n        9: bipush        20\n       11: istore_1\n       12: goto          19\n       15: astore_2\n       16: bipush        30\n       18: istore_1\n       19: return\n     Exception table:\n        from    to  target type\n            2     5     8   Class java/lang/ArithmeticException\n            2     5    15   Class java/lang/ExceptionCopy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("ul",[a("li",[s._v("因为异常出现时，"),a("strong",[s._v("只能进入")]),s._v(" Exception table 中"),a("strong",[s._v("一个分支")]),s._v("，所以局部变量表 slot 2 位置"),a("strong",[s._v("被共用")])])]),s._v(" "),a("h5",{attrs:{id:"finally"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finally"}},[s._v("#")]),s._v(" finally")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tint i = 0;\n\t\ttry {\n\t\t\ti = 10;\n\t\t} catch (Exception e) {\n\t\t\ti = 20;\n\t\t} finally {\n\t\t\ti = 30;\n\t\t}\n\t}\n}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("对应字节码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Code:\n     stack=1, locals=4, args_size=1\n        0: iconst_0\n        1: istore_1\n        //try块\n        2: bipush        10\n        4: istore_1\n        //try块执行完后，会执行finally    \n        5: bipush        30\n        7: istore_1\n        8: goto          27\n       //catch块     \n       11: astore_2 //异常信息放入局部变量表的2号槽位\n       12: bipush        20\n       14: istore_1\n       //catch块执行完后，会执行finally        \n       15: bipush        30\n       17: istore_1\n       18: goto          27\n       //出现异常，但未被Exception捕获，会抛出其他异常，这时也需要执行finally块中的代码   \n       21: astore_3\n       22: bipush        30\n       24: istore_1\n       25: aload_3\n       26: athrow  //抛出异常\n       27: return\n     Exception table:\n        from    to  target type\n            2     5    11   Class java/lang/Exception\n            2     5    21   any\n           11    15    21   anyCopy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("p",[s._v("可以看到 ﬁnally 中的代码被"),a("strong",[s._v("复制了 3 份")]),s._v("，分别放入 try 流程，catch 流程以及 catch剩余的异常类型流程")]),s._v(" "),a("p",[a("strong",[s._v("注意")]),s._v("：虽然从字节码指令看来，每个块中都有finally块，但是finally块中的代码"),a("strong",[s._v("只会被执行一次")])]),s._v(" "),a("h5",{attrs:{id:"finally中的return"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finally中的return"}},[s._v("#")]),s._v(" finally中的return")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tint i = Demo3.test();\n        //结果为20\n\t\tSystem.out.println(i);\n\t}\n\n\tpublic static int test() {\n\t\tint i;\n\t\ttry {\n\t\t\ti = 10;\n\t\t\treturn i;\n\t\t} finally {\n\t\t\ti = 20;\n\t\t\treturn i;\n\t\t}\n\t}\n}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("对应字节码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Code:\n     stack=1, locals=3, args_size=0\n        0: bipush        10\n        2: istore_0\n        3: iload_0\n        4: istore_1  //暂存返回值\n        5: bipush        20\n        7: istore_0\n        8: iload_0\n        9: ireturn\t//ireturn会返回操作数栈顶的整型值20\n       //如果出现异常，还是会执行finally块中的内容，没有抛出异常\n       10: astore_2\n       11: bipush        20\n       13: istore_0\n       14: iload_0\n       15: ireturn\t//这里没有athrow了，也就是如果在finally块中如果有返回操作的话，且try块中出现异常，会吞掉异常！\n     Exception table:\n        from    to  target type\n            0     5    10   anyCopy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("ul",[a("li",[s._v("由于 ﬁnally 中的 "),a("strong",[s._v("ireturn")]),s._v(" 被插入了所有可能的流程，因此返回结果肯定以ﬁnally的为准")]),s._v(" "),a("li",[s._v("至于字节码中第 2 行，似乎没啥用，且留个伏笔，看下个例子")]),s._v(" "),a("li",[s._v("跟上例中的 ﬁnally 相比，发现"),a("strong",[s._v("没有 athrow 了")]),s._v("，这告诉我们：如果在 ﬁnally 中出现了 return，会"),a("strong",[s._v("吞掉异常")])]),s._v(" "),a("li",[s._v("所以"),a("strong",[s._v("不要在finally中进行返回操作")])])]),s._v(" "),a("h5",{attrs:{id:"被吞掉的异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#被吞掉的异常"}},[s._v("#")]),s._v(" 被吞掉的异常")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo3 {\n   public static void main(String[] args) {\n      int i = Demo3.test();\n      //最终结果为20\n      System.out.println(i);\n   }\n\n   public static int test() {\n      int i;\n      try {\n         i = 10;\n         //这里应该会抛出异常\n         i = i/0;\n         return i;\n      } finally {\n         i = 20;\n         return i;\n      }\n   }\n}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("会发现打印结果为20，并未抛出异常")]),s._v(" "),a("h5",{attrs:{id:"finally不带return"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finally不带return"}},[s._v("#")]),s._v(" finally不带return")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tint i = Demo4.test();\n\t\tSystem.out.println(i);\n\t}\n\n\tpublic static int test() {\n\t\tint i = 10;\n\t\ttry {\n\t\t\treturn i;\n\t\t} finally {\n\t\t\ti = 20;\n\t\t}\n\t}\n}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("对应字节码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Code:\n     stack=1, locals=3, args_size=0\n        0: bipush        10\n        2: istore_0 //赋值给i 10\n        3: iload_0\t//加载到操作数栈顶\n        4: istore_1 //加载到局部变量表的1号位置\n        5: bipush        20\n        7: istore_0 //赋值给i 20\n        8: iload_1 //加载局部变量表1号位置的数10到操作数栈\n        9: ireturn //返回操作数栈顶元素 10\n       10: astore_2\n       11: bipush        20\n       13: istore_0\n       14: aload_2 //加载异常\n       15: athrow //抛出异常\n     Exception table:\n        from    to  target type\n            3     5    10   anyCopy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h4",{attrs:{id:"synchronized"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[s._v("#")]),s._v(" Synchronized")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo5 {\n\tpublic static void main(String[] args) {\n\t\tint i = 10;\n\t\tLock lock = new Lock();\n\t\tsynchronized (lock) {\n\t\t\tSystem.out.println(i);\n\t\t}\n\t}\n}\n\nclass Lock{}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("对应字节码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Code:\n     stack=2, locals=5, args_size=1\n        0: bipush        10\n        2: istore_1\n        3: new           #2                  // class com/nyima/JVM/day06/Lock\n        6: dup //复制一份，放到操作数栈顶，用于构造函数消耗\n        7: invokespecial #3                  // Method com/nyima/JVM/day06/Lock."<init>":()V\n       10: astore_2 //剩下的一份放到局部变量表的2号位置\n       11: aload_2 //加载到操作数栈\n       12: dup //复制一份，放到操作数栈，用于加锁时消耗\n       13: astore_3 //将操作数栈顶元素弹出，暂存到局部变量表的三号槽位。这时操作数栈中有一份对象的引用\n       14: monitorenter //加锁\n       //锁住后代码块中的操作    \n       15: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;\n       18: iload_1\n       19: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V\n       //加载局部变量表中三号槽位对象的引用，用于解锁    \n       22: aload_3    \n       23: monitorexit //解锁\n       24: goto          34\n       //异常操作    \n       27: astore        4\n       29: aload_3\n       30: monitorexit //解锁\n       31: aload         4\n       33: athrow\n       34: return\n     //可以看出，无论何时出现异常，都会跳转到27行，将异常放入局部变量中，并进行解锁操作，然后加载异常并抛出异常。      \n     Exception table:\n        from    to  target type\n           15    24    27   any\n           27    31    27   anyCopy\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("h3",{attrs:{id:"_3、编译期处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、编译期处理"}},[s._v("#")]),s._v(" 3、编译期处理")]),s._v(" "),a("p",[s._v("所谓的 "),a("strong",[s._v("语法糖")]),s._v(" ，其实就是指 java 编译器把 *.java 源码编译为 *.class 字节码的过程中，"),a("strong",[s._v("自动生成")]),s._v("和"),a("strong",[s._v("转换")]),s._v("的一些代码，主要是为了减轻程序员的负担，算是 java 编译器给我们的一个额外福利")]),s._v(" "),a("p",[a("strong",[s._v("注意")]),s._v("，以下代码的分析，借助了 javap 工具，idea 的反编译功能，idea 插件 jclasslib 等工具。另外， 编译器转换的"),a("strong",[s._v("结果直接就是 class 字节码")]),s._v("，只是为了便于阅读，给出了 几乎等价 的 java 源码方式，并不是编译器还会转换出中间的 java 源码，切记。")]),s._v(" "),a("h4",{attrs:{id:"默认构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认构造函数"}},[s._v("#")]),s._v(" 默认构造函数")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Candy1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("经过编译期优化后")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Candy1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这个无参构造器是java编译器帮我们加上的")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Candy1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//即调用父类 Object 的无参构造方法，即调用 java/lang/Object." <init>":()V')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h4",{attrs:{id:"自动拆装箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动拆装箱"}},[s._v("#")]),s._v(" 自动拆装箱")]),s._v(" "),a("p",[s._v("基本类型和其包装类型的相互转换过程，称为拆装箱")]),s._v(" "),a("p",[s._v("在JDK 5以后，它们的转换可以在编译期自动完成")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("转换过程如下")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo2 {\n   public static void main(String[] args) {\n      //基本类型赋值给包装类型，称为装箱\n      Integer x = Integer.valueOf(1);\n      //包装类型赋值给基本类型，称谓拆箱\n      int y = x.intValue();\n   }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h4",{attrs:{id:"泛型集合取值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型集合取值"}},[s._v("#")]),s._v(" 泛型集合取值")]),s._v(" "),a("p",[s._v("泛型也是在 JDK 5 开始加入的特性，但 java 在"),a("strong",[s._v("编译泛型代码后")]),s._v("会执行 "),a("strong",[s._v("泛型擦除")]),s._v(" 的动作，即泛型信息在编译为字节码之后就"),a("strong",[s._v("丢失")]),s._v("了，实际的类型都当做了 "),a("strong",[s._v("Object")]),s._v(" 类型来处理：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo3 {\n   public static void main(String[] args) {\n      List<Integer> list = new ArrayList<>();\n      list.add(10);\n      Integer x = list.get(0);\n   }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("对应字节码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Code:\n    stack=2, locals=3, args_size=1\n       0: new           #2                  // class java/util/ArrayList\n       3: dup\n       4: invokespecial #3                  // Method java/util/ArrayList."<init>":()V\n       7: astore_1\n       8: aload_1\n       9: bipush        10\n      11: invokestatic  #4                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n      //这里进行了泛型擦除，实际调用的是add(Objcet o)\n      14: invokeinterface #5,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n\n      19: pop\n      20: aload_1\n      21: iconst_0\n      //这里也进行了泛型擦除，实际调用的是get(Object o)   \n      22: invokeinterface #6,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n//这里进行了类型转换，将Object转换成了Integer\n      27: checkcast     #7                  // class java/lang/Integer\n      30: astore_2\n      31: return\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("所以调用get函数取值时，有一个类型转换的操作")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Integer x = (Integer) list.get(0);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果要将返回结果赋值给一个int类型的变量，则还有"),a("strong",[s._v("自动拆箱")]),s._v("的操作")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int x = (Integer) list.get(0).intValue();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"可变参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可变参数"}},[s._v("#")]),s._v(" 可变参数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Demo4 {\n   public static void foo(String... args) {\n      //将args赋值给arr，可以看出String...实际就是String[] \n      String[] arr = args;\n      System.out.println(arr.length);\n   }\n\n   public static void main(String[] args) {\n      foo("hello", "world");\n   }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("可变参数 "),a("strong",[s._v("String…")]),s._v(" args 其实是一个 "),a("strong",[s._v("String[]")]),s._v(" args ，从代码中的赋值语句中就可以看出来。 同 样 java 编译器会在编译期间将上述代码变换为：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Demo4 {\n   public Demo4 {}\n\n    \n   public static void foo(String[] args) {\n      String[] arr = args;\n      System.out.println(arr.length);\n   }\n\n   public static void main(String[] args) {\n      foo(new String[]{"hello", "world"});\n   }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("注意，如果调用的是foo()，即未传递参数时，等价代码为foo(new String[]{})，"),a("strong",[s._v("创建了一个空数组")]),s._v("，而不是直接传递的null")]),s._v(" "),a("h4",{attrs:{id:"foreach"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[s._v("#")]),s._v(" foreach")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo5 {\n\tpublic static void main(String[] args) {\n        //数组赋初值的简化写法也是一种语法糖。\n\t\tint[] arr = {1, 2, 3, 4, 5};\n\t\tfor(int x : arr) {\n\t\t\tSystem.out.println(x);\n\t\t}\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("编译器会帮我们转换为")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo5 {\n    public Demo5 {}\n\n\tpublic static void main(String[] args) {\n\t\tint[] arr = new int[]{1, 2, 3, 4, 5};\n\t\tfor(int i=0; i<arr.length; ++i) {\n\t\t\tint x = arr[i];\n\t\t\tSystem.out.println(x);\n\t\t}\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("如果是集合使用foreach")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo5 {\n   public static void main(String[] args) {\n      List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\n      for (Integer x : list) {\n         System.out.println(x);\n      }\n   }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("集合要使用foreach，需要该集合类实现了"),a("strong",[s._v("Iterable接口")]),s._v("，因为集合的遍历需要用到"),a("strong",[s._v("迭代器Iterator")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo5 {\n    public Demo5 {}\n    \n   public static void main(String[] args) {\n      List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\n      //获得该集合的迭代器\n      Iterator<Integer> iterator = list.iterator();\n      while(iterator.hasNext()) {\n         Integer x = iterator.next();\n         System.out.println(x);\n      }\n   }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h4",{attrs:{id:"switch字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch字符串"}},[s._v("#")]),s._v(" switch字符串")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Demo6 {\n   public static void main(String[] args) {\n      String str = "hello";\n      switch (str) {\n         case "hello" :\n            System.out.println("h");\n            break;\n         case "world" :\n            System.out.println("w");\n            break;\n         default:\n            break;\n      }\n   }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("在编译器中执行的操作")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Demo6 {\n   public Demo6() {\n      \n   }\n   public static void main(String[] args) {\n      String str = "hello";\n      int x = -1;\n      //通过字符串的hashCode+value来判断是否匹配\n      switch (str.hashCode()) {\n         //hello的hashCode\n         case 99162322 :\n            //再次比较，因为字符串的hashCode有可能相等\n            if(str.equals("hello")) {\n               x = 0;\n            }\n            break;\n         //world的hashCode\n         case 11331880 :\n            if(str.equals("world")) {\n               x = 1;\n            }\n            break;\n         default:\n            break;\n      }\n\n      //用第二个switch在进行输出判断\n      switch (x) {\n         case 0:\n            System.out.println("h");\n            break;\n         case 1:\n            System.out.println("w");\n            break;\n         default:\n            break;\n      }\n   }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br")])]),a("p",[s._v("过程说明：")]),s._v(" "),a("ul",[a("li",[s._v("在编译期间，单个的switch被分为了两个\n"),a("ul",[a("li",[s._v("第一个用来匹配字符串，并给x赋值\n"),a("ul",[a("li",[s._v("字符串的匹配用到了字符串的hashCode，还用到了equals方法")]),s._v(" "),a("li",[s._v("使用hashCode是为了提高比较效率，使用equals是防止有hashCode冲突（如BM和C.）")])])]),s._v(" "),a("li",[s._v("第二个用来根据x的值来决定输出语句")])])])]),s._v(" "),a("h4",{attrs:{id:"switch枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch枚举"}},[s._v("#")]),s._v(" switch枚举")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Demo7 {\n   public static void main(String[] args) {\n      SEX sex = SEX.MALE;\n      switch (sex) {\n         case MALE:\n            System.out.println("man");\n            break;\n         case FEMALE:\n            System.out.println("woman");\n            break;\n         default:\n            break;\n      }\n   }\n}\n\nenum SEX {\n   MALE, FEMALE;\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("编译器中执行的代码如下")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Demo7 {\n   /**     \n    * 定义一个合成类（仅 jvm 使用，对我们不可见）     \n    * 用来映射枚举的 ordinal 与数组元素的关系     \n    * 枚举的 ordinal 表示枚举对象的序号，从 0 开始     \n    * 即 MALE 的 ordinal()=0，FEMALE 的 ordinal()=1     \n    */ \n   static class $MAP {\n      //数组大小即为枚举元素个数，里面存放了case用于比较的数字\n      static int[] map = new int[2];\n      static {\n         //ordinal即枚举元素对应所在的位置，MALE为0，FEMALE为1\n         map[SEX.MALE.ordinal()] = 1;\n         map[SEX.FEMALE.ordinal()] = 2;\n      }\n   }\n\n   public static void main(String[] args) {\n      SEX sex = SEX.MALE;\n      //将对应位置枚举元素的值赋给x，用于case操作\n      int x = $MAP.map[sex.ordinal()];\n      switch (x) {\n         case 1:\n            System.out.println("man");\n            break;\n         case 2:\n            System.out.println("woman");\n            break;\n         default:\n            break;\n      }\n   }\n}\n\nenum SEX {\n   MALE, FEMALE;\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])]),a("h4",{attrs:{id:"枚举类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举类"}},[s._v("#")]),s._v(" 枚举类")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Enum SEX {\n   MALE, FEMALE;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("转换后的代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public final class Sex extends Enum<Sex> {   \n   //对应枚举类中的元素\n   public static final Sex MALE;    \n   public static final Sex FEMALE;    \n   private static final Sex[] $VALUES;\n   \n    static {       \n    \t//调用构造函数，传入枚举元素的值及ordinal\n    \tMALE = new Sex("MALE", 0);    \n        FEMALE = new Sex("FEMALE", 1);   \n        $VALUES = new Sex[]{MALE, FEMALE}; \n   }\n \t\n   //调用父类中的方法\n    private Sex(String name, int ordinal) {     \n        super(name, ordinal);    \n    }\n   \n    public static Sex[] values() {  \n        return $VALUES.clone();  \n    }\n    public static Sex valueOf(String name) { \n        return Enum.valueOf(Sex.class, name);  \n    } \n   \n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("h4",{attrs:{id:"匿名内部类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名内部类"}},[s._v("#")]),s._v(" 匿名内部类")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Demo8 {\n   public static void main(String[] args) {\n      Runnable runnable = new Runnable() {\n         @Override\n         public void run() {\n            System.out.println("running...");\n         }\n      };\n   }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("转换后的代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Demo8 {\n   public static void main(String[] args) {\n      //用额外创建的类来创建匿名内部类对象\n      Runnable runnable = new Demo8$1();\n   }\n}\n\n//创建了一个额外的类，实现了Runnable接口\nfinal class Demo8$1 implements Runnable {\n   public Demo8$1() {}\n\n   @Override\n   public void run() {\n      System.out.println("running...");\n   }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("如果匿名内部类中引用了"),a("strong",[s._v("局部变量")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo8 {\n   public static void main(String[] args) {\n      int x = 1;\n      Runnable runnable = new Runnable() {\n         @Override\n         public void run() {\n            System.out.println(x);\n         }\n      };\n   }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("转化后代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Demo8 {\n   public static void main(String[] args) {\n      int x = 1;\n      Runnable runnable = new Runnable() {\n         @Override\n         public void run() {\n            System.out.println(x);\n         }\n      };\n   }\n}\n\nfinal class Demo8$1 implements Runnable {\n   //多创建了一个变量\n   int val$x;\n   //变为了有参构造器\n   public Demo8$1(int x) {\n      this.val$x = x;\n   }\n\n   @Override\n   public void run() {\n      System.out.println(val$x);\n   }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("h3",{attrs:{id:"_4、类加载阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、类加载阶段"}},[s._v("#")]),s._v(" 4、类加载阶段")]),s._v(" "),a("h4",{attrs:{id:"加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载"}},[s._v("#")]),s._v(" 加载")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("将类的字节码载入")]),s._v(" "),a("p",[s._v("方法区")]),s._v(" "),a("p",[s._v("（1.8后为元空间，在本地内存中）中，内部采用 C++ 的 instanceKlass 描述 java 类，它的重要 ﬁeld 有：")]),s._v(" "),a("ul",[a("li",[s._v("_java_mirror 即 java 的类镜像，例如对 String 来说，它的镜像类就是 String.class，作用是把 klass 暴露给 java 使用")]),s._v(" "),a("li",[s._v("_super 即父类")]),s._v(" "),a("li",[s._v("_ﬁelds 即成员变量")]),s._v(" "),a("li",[s._v("_methods 即方法")]),s._v(" "),a("li",[s._v("_constants 即常量池")]),s._v(" "),a("li",[s._v("_class_loader 即类加载器")]),s._v(" "),a("li",[s._v("_vtable 虚方法表")]),s._v(" "),a("li",[s._v("_itable 接口方法")])])]),s._v(" "),a("li",[a("p",[s._v("如果这个类还有父类没有加载，"),a("strong",[s._v("先加载父类")])])]),s._v(" "),a("li",[a("p",[s._v("加载和链接可能是"),a("strong",[s._v("交替运行")]),s._v("的")])])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611205050.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611205050.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[s._v("instanceKlass保存在"),a("strong",[s._v("方法区")]),s._v("。JDK 8以后，方法区位于元空间中，而元空间又位于本地内存中")]),s._v(" "),a("li",[s._v("_java_mirror则是保存在"),a("strong",[s._v("堆内存")]),s._v("中")]),s._v(" "),a("li",[s._v("InstanceKlass和*.class(JAVA镜像类)互相保存了对方的地址")]),s._v(" "),a("li",[s._v("类的对象在对象头中保存了*.class的地址。让对象可以通过其找到方法区中的instanceKlass，从而获取类的各种信息")])]),s._v(" "),a("h4",{attrs:{id:"链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[s._v("#")]),s._v(" 链接")]),s._v(" "),a("h5",{attrs:{id:"验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证"}},[s._v("#")]),s._v(" 验证")]),s._v(" "),a("p",[s._v("验证类是否符合 JVM规范，安全性检查")]),s._v(" "),a("h5",{attrs:{id:"准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备"}},[s._v("#")]),s._v(" 准备")]),s._v(" "),a("p",[s._v("为 static 变量分配空间，设置默认值")]),s._v(" "),a("ul",[a("li",[s._v("static变量在JDK 7以前是存储与instanceKlass末尾。但在JDK 7以后就存储在_java_mirror末尾了")]),s._v(" "),a("li",[s._v("static变量在分配空间和赋值是在两个阶段完成的。分配空间在准备阶段完成，赋值在初始化阶段完成")]),s._v(" "),a("li",[s._v("如果 static 变量是 ﬁnal 的"),a("strong",[s._v("基本类型")]),s._v("，以及"),a("strong",[s._v("字符串常量")]),s._v("，那么编译阶段值就确定了，"),a("strong",[s._v("赋值在准备阶段完成")])]),s._v(" "),a("li",[s._v("如果 static 变量是 ﬁnal 的，但属于"),a("strong",[s._v("引用类型")]),s._v("，那么赋值也会在"),a("strong",[s._v("初始化阶段完成")])])]),s._v(" "),a("h5",{attrs:{id:"解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析"}},[s._v("#")]),s._v(" 解析")]),s._v(" "),a("p",[a("strong",[s._v("HSDB的使用")])]),s._v(" "),a("ul",[a("li",[s._v("先获得要查看的进程ID")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("jpsCopy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("打开HSDB")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("java -cp F:\\JAVA\\JDK8.0\\lib\\sa-jdi.jar sun.jvm.hotspot.HSDBCopy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("运行时可能会报错，是因为"),a("strong",[s._v("缺少一个.dll的文件")]),s._v("，我们在JDK的安装目录中找到该文件，复制到缺失的文件下即可")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611221703.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611221703.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[s._v("定位需要的进程")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611221857.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611221857.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611222029.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611222029.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("解析的含义")])]),s._v(" "),a("p",[s._v("将常量池中的符号引用解析为直接引用")]),s._v(" "),a("ul",[a("li",[s._v("未解析时，常量池中的看到的对象仅是符号，未真正的存在于内存中")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Demo1 {\n   public static void main(String[] args) throws IOException, ClassNotFoundException {\n      ClassLoader loader = Demo1.class.getClassLoader();\n      //只加载不解析\n      Class<?> c = loader.loadClass("com.nyima.JVM.day8.C");\n      //用于阻塞主线程\n      System.in.read();\n   }\n}\n\nclass C {\n   D d = new D();\n}\n\nclass D {\n\n}Copy\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("ul",[a("li",[s._v("打开HSDB\n"),a("ul",[a("li",[s._v("可以看到此时只加载了类C")])])])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611223153.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611223153.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("查看类C的常量池，可以看到类D"),a("strong",[s._v("未被解析")]),s._v("，只是存在于常量池中的符号")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611230658.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611230658.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[a("p",[s._v("解析以后，会将常量池中的符号引用解析为直接引用")]),s._v(" "),a("ul",[a("li",[s._v("可以看到，此时已加载并解析了类C和类D")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611223441.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611223441.png",alt:"img"}}),a("OutboundLink")],1)])])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200613104723.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200613104723.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[s._v("#")]),s._v(" 初始化")]),s._v(" "),a("p",[s._v("初始化阶段就是"),a("strong",[s._v("执行类构造器clinit()方法的过程")]),s._v("，虚拟机会保证这个类的『构造方法』的线程安全")]),s._v(" "),a("ul",[a("li",[s._v("clinit()方法是由编译器自动收集类中的所有类变量的"),a("strong",[s._v("赋值动作和静态语句块")]),s._v("（static{}块）中的语句合并产生的")])]),s._v(" "),a("p",[a("strong",[s._v("注意")])]),s._v(" "),a("p",[s._v("编译器收集的顺序是由语句在源文件中"),a("strong",[s._v("出现的顺序决定")]),s._v("的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它"),a("strong",[s._v("之后")]),s._v("的变量，在前面的静态语句块"),a("strong",[s._v("可以赋值，但是不能访问")]),s._v("，如")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201118204542.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201118204542.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h5",{attrs:{id:"发生时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发生时机"}},[s._v("#")]),s._v(" 发生时机")]),s._v(" "),a("p",[a("strong",[s._v("类的初始化的懒惰的")]),s._v("，以下情况会初始化")]),s._v(" "),a("ul",[a("li",[s._v("main 方法所在的类，总会被首先初始化")]),s._v(" "),a("li",[s._v("首次访问这个类的静态变量或静态方法时")]),s._v(" "),a("li",[s._v("子类初始化，如果父类还没初始化，会引发")]),s._v(" "),a("li",[s._v("子类访问父类的静态变量，只会触发父类的初始化")]),s._v(" "),a("li",[s._v("Class.forName")]),s._v(" "),a("li",[s._v("new 会导致初始化")])]),s._v(" "),a("p",[s._v("以下情况不会初始化")]),s._v(" "),a("ul",[a("li",[s._v("访问类的 static ﬁnal 静态常量（基本类型和字符串）")]),s._v(" "),a("li",[s._v("类对象.class 不会触发初始化")]),s._v(" "),a("li",[s._v("创建该类对象的数组")]),s._v(" "),a("li",[s._v("类加载器的.loadClass方法")]),s._v(" "),a("li",[s._v("Class.forNamed的参数2为false时")])]),s._v(" "),a("p",[a("strong",[s._v("验证类是否被初始化，可以看改类的静态代码块是否被执行")])]),s._v(" "),a("h3",{attrs:{id:"_5、类加载器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、类加载器"}},[s._v("#")]),s._v(" 5、类加载器")]),s._v(" "),a("p",[s._v("Java虚拟机设计团队有意把类加载阶段中的**“通过一个类的全限定名来获取描述该类的二进制字节流”"),a("strong",[s._v("这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需的类。实现这个动作的代码被称为")]),s._v("“类加载器”**（ClassLoader）")]),s._v(" "),a("h4",{attrs:{id:"类与类加载器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类与类加载器"}},[s._v("#")]),s._v(" 类与类加载器")]),s._v(" "),a("p",[s._v("类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远超类加载阶段")]),s._v(" "),a("p",[s._v("对于任意一个类，都必须由加载它的"),a("strong",[s._v("类加载器")]),s._v("和这个"),a("strong",[s._v("类本身")]),s._v("一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。这句话可以表达得更通俗一些："),a("strong",[s._v("比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义")]),s._v("，否则，即使这两个类来源于同一个Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等")]),s._v(" "),a("p",[s._v("以JDK 8为例")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("名称")]),s._v(" "),a("th",[s._v("加载的类")]),s._v(" "),a("th",[s._v("说明")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("Bootstrap ClassLoader（启动类加载器）")]),s._v(" "),a("td",[s._v("JAVA_HOME/jre/lib")]),s._v(" "),a("td",[s._v("无法直接访问")])]),s._v(" "),a("tr",[a("td",[s._v("Extension ClassLoader(拓展类加载器)")]),s._v(" "),a("td",[s._v("JAVA_HOME/jre/lib/ext")]),s._v(" "),a("td",[s._v("上级为Bootstrap，"),a("strong",[s._v("显示为null")])])]),s._v(" "),a("tr",[a("td",[s._v("Application ClassLoader(应用程序类加载器)")]),s._v(" "),a("td",[s._v("classpath")]),s._v(" "),a("td",[s._v("上级为Extension")])]),s._v(" "),a("tr",[a("td",[s._v("自定义类加载器")]),s._v(" "),a("td",[s._v("自定义")]),s._v(" "),a("td",[s._v("上级为Application")])])])]),s._v(" "),a("h4",{attrs:{id:"启动类加载器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动类加载器"}},[s._v("#")]),s._v(" 启动类加载器")]),s._v(" "),a("p",[s._v("可通过在控制台输入指令，使得类被启动类加器加载")]),s._v(" "),a("h4",{attrs:{id:"拓展类加载器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拓展类加载器"}},[s._v("#")]),s._v(" 拓展类加载器")]),s._v(" "),a("p",[s._v("如果classpath和JAVA_HOME/jre/lib/ext 下有同名类，加载时会使用"),a("strong",[s._v("拓展类加载器")]),s._v("加载。当应用程序类加载器发现拓展类加载器已将该同名类加载过了，则不会再次加载")]),s._v(" "),a("h4",{attrs:{id:"双亲委派模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派模式"}},[s._v("#")]),s._v(" 双亲委派模式")]),s._v(" "),a("p",[s._v("双亲委派模式，即调用类加载器ClassLoader 的 loadClass 方法时，查找类的规则")]),s._v(" "),a("p",[s._v("loadClass源码")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoadingLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 首先查找该类是否已经被该类加载器加载过了")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("findLoadedClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果没有被加载过")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" t0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("nanoTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//看是否被它的上级加载器加载过了 Extension的上级是Bootstarp，但它显示为null")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//看是否被启动类加载器加载过")]),s._v("\n                    c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("findBootstrapClassOrNull")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ClassNotFoundException thrown if class not found")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// from the non-null parent class loader")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//捕获异常，但不做任何处理")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果还是没有找到，先让拓展类加载器调用findClass方法去找到该类，如果还是没找到，就抛出异常")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//然后让应用类加载器去找classpath下找该类")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" t1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("nanoTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("findClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 记录时间")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("sun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("misc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("PerfCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getParentDelegationTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" t0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("sun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("misc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("PerfCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getFindClassTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addElapsedTimeFrom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("sun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("misc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("PerfCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getFindClasses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("increment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolveClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br")])]),a("h4",{attrs:{id:"自定义类加载器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义类加载器"}},[s._v("#")]),s._v(" 自定义类加载器")]),s._v(" "),a("h5",{attrs:{id:"使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[s._v("#")]),s._v(" 使用场景")]),s._v(" "),a("ul",[a("li",[s._v("想加载非 classpath 随意路径中的类文件")]),s._v(" "),a("li",[s._v("通过接口来使用实现，希望解耦时，常用在框架设计")]),s._v(" "),a("li",[s._v("这些类希望予以隔离，不同应用的同名类都可以加载，不冲突，常见于 tomcat 容器")])]),s._v(" "),a("h5",{attrs:{id:"步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[s._v("#")]),s._v(" 步骤")]),s._v(" "),a("ul",[a("li",[s._v("继承ClassLoader父类")]),s._v(" "),a("li",[s._v("要遵从双亲委派机制，重写 ﬁndClass 方法\n"),a("ul",[a("li",[s._v("不是重写loadClass方法，否则不会走双亲委派机制")])])]),s._v(" "),a("li",[s._v("读取类文件的字节码")]),s._v(" "),a("li",[s._v("调用父类的 deﬁneClass 方法来加载类")]),s._v(" "),a("li",[s._v("使用者调用该类加载器的 loadClass 方法")])]),s._v(" "),a("h4",{attrs:{id:"破坏双亲委派模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#破坏双亲委派模式"}},[s._v("#")]),s._v(" 破坏双亲委派模式")]),s._v(" "),a("ul",[a("li",[s._v("双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即JDK1.2面世以前的“远古”时代\n"),a("ul",[a("li",[s._v("建议用户重写findClass()方法，在类加载器中的loadClass()方法中也会调用该方法")])])]),s._v(" "),a("li",[s._v("双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷导致的\n"),a("ul",[a("li",[s._v("如果有基础类型又要调用回用户的代码，此时也会破坏双亲委派模式")])])]),s._v(" "),a("li",[s._v("双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的\n"),a("ul",[a("li",[s._v("这里所说的“动态性”指的是一些非常“热”门的名词：代码热替换（Hot Swap）、模块热部署（Hot Deployment）等")])])])]),s._v(" "),a("h3",{attrs:{id:"_6、运行期优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、运行期优化"}},[s._v("#")]),s._v(" 6、运行期优化")]),s._v(" "),a("h4",{attrs:{id:"分层编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分层编译"}},[s._v("#")]),s._v(" 分层编译")]),s._v(" "),a("p",[s._v("JVM 将执行状态分成了 5 个层次：")]),s._v(" "),a("ul",[a("li",[s._v("0层：解释执行，用解释器将字节码翻译为机器码")]),s._v(" "),a("li",[s._v("1层：使用 C1 "),a("strong",[s._v("即时编译器")]),s._v("编译执行（不带 proﬁling）")]),s._v(" "),a("li",[s._v("2层：使用 C1 即时编译器编译执行（带基本的profiling）")]),s._v(" "),a("li",[s._v("3层：使用 C1 即时编译器编译执行（带完全的profiling）")]),s._v(" "),a("li",[s._v("4层：使用 C2 即时编译器编译执行")])]),s._v(" "),a("p",[s._v("proﬁling 是指在运行过程中收集一些程序执行状态的数据，例如【方法的调用次数】，【循环的 回边次数】等")]),s._v(" "),a("h5",{attrs:{id:"即时编译器-jit-与解释器的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#即时编译器-jit-与解释器的区别"}},[s._v("#")]),s._v(" 即时编译器（JIT）与解释器的区别")]),s._v(" "),a("ul",[a("li",[s._v("解释器\n"),a("ul",[a("li",[s._v("将字节码"),a("strong",[s._v("解释")]),s._v("为机器码，下次即使遇到相同的字节码，仍会执行重复的解释")]),s._v(" "),a("li",[s._v("是将字节码解释为针对所有平台都通用的机器码")])])]),s._v(" "),a("li",[s._v("即时编译器\n"),a("ul",[a("li",[s._v("将一些字节码"),a("strong",[s._v("编译")]),s._v("为机器码，"),a("strong",[s._v("并存入 Code Cache")]),s._v("，下次遇到相同的代码，直接执行，无需再编译")]),s._v(" "),a("li",[s._v("根据平台类型，生成平台特定的机器码")])])])]),s._v(" "),a("p",[s._v("对于大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。 执行效率上简单比较一下 Interpreter < C1 < C2，总的目标是发现热点代码（hotspot名称的由 来），并优化这些热点代码")]),s._v(" "),a("h5",{attrs:{id:"逃逸分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逃逸分析"}},[s._v("#")]),s._v(" 逃逸分析")]),s._v(" "),a("p",[s._v("逃逸分析（Escape Analysis）简单来讲就是，Java Hotspot 虚拟机可以分析新创建对象的使用范围，并决定是否在 Java 堆上分配内存的一项技术")]),s._v(" "),a("p",[s._v("逃逸分析的 JVM 参数如下：")]),s._v(" "),a("ul",[a("li",[s._v("开启逃逸分析：-XX:+DoEscapeAnalysis")]),s._v(" "),a("li",[s._v("关闭逃逸分析：-XX:-DoEscapeAnalysis")]),s._v(" "),a("li",[s._v("显示分析结果：-XX:+PrintEscapeAnalysis")])]),s._v(" "),a("p",[s._v("逃逸分析技术在 Java SE 6u23+ 开始支持，并默认设置为启用状态，可以不用额外加这个参数")]),s._v(" "),a("p",[a("strong",[s._v("对象逃逸状态")])]),s._v(" "),a("p",[a("strong",[s._v("全局逃逸（GlobalEscape）")])]),s._v(" "),a("ul",[a("li",[s._v("即一个对象的作用范围逃出了当前方法或者当前线程，有以下几种场景：\n"),a("ul",[a("li",[s._v("对象是一个静态变量")]),s._v(" "),a("li",[s._v("对象是一个已经发生逃逸的对象")]),s._v(" "),a("li",[s._v("对象作为当前方法的返回值")])])])]),s._v(" "),a("p",[a("strong",[s._v("参数逃逸（ArgEscape）")])]),s._v(" "),a("ul",[a("li",[s._v("即一个对象被作为方法参数传递或者被参数引用，但在调用过程中不会发生全局逃逸，这个状态是通过被调方法的字节码确定的")])]),s._v(" "),a("p",[a("strong",[s._v("没有逃逸")])]),s._v(" "),a("ul",[a("li",[s._v("即方法中的对象没有发生逃逸")])]),s._v(" "),a("p",[a("strong",[s._v("逃逸分析优化")])]),s._v(" "),a("p",[s._v("针对上面第三点，当一个对象"),a("strong",[s._v("没有逃逸")]),s._v("时，可以得到以下几个虚拟机的优化")]),s._v(" "),a("p",[a("strong",[s._v("锁消除")])]),s._v(" "),a("p",[s._v("我们知道线程同步锁是非常牺牲性能的，当编译器确定当前对象只有当前线程使用，那么就会移除该对象的同步锁")]),s._v(" "),a("p",[s._v("例如，StringBuffer 和 Vector 都是用 synchronized 修饰线程安全的，但大部分情况下，它们都只是在当前线程中用到，这样编译器就会优化移除掉这些锁操作")]),s._v(" "),a("p",[s._v("锁消除的 JVM 参数如下：")]),s._v(" "),a("ul",[a("li",[s._v("开启锁消除：-XX:+EliminateLocks")]),s._v(" "),a("li",[s._v("关闭锁消除：-XX:-EliminateLocks")])]),s._v(" "),a("p",[s._v("锁消除在 JDK8 中都是默认开启的，并且锁消除都要建立在逃逸分析的基础上")]),s._v(" "),a("p",[a("strong",[s._v("标量替换")])]),s._v(" "),a("p",[s._v("首先要明白标量和聚合量，"),a("strong",[s._v("基础类型")]),s._v("和"),a("strong",[s._v("对象的引用")]),s._v("可以理解为"),a("strong",[s._v("标量")]),s._v("，它们不能被进一步分解。而能被进一步分解的量就是聚合量，比如：对象")]),s._v(" "),a("p",[s._v("对象是聚合量，它又可以被进一步分解成标量，将其成员变量分解为分散的变量，这就叫做"),a("strong",[s._v("标量替换")]),s._v("。")]),s._v(" "),a("p",[s._v("这样，如果一个对象没有发生逃逸，那压根就不用创建它，只会在栈或者寄存器上创建它用到的成员标量，节省了内存空间，也提升了应用程序性能")]),s._v(" "),a("p",[s._v("标量替换的 JVM 参数如下：")]),s._v(" "),a("ul",[a("li",[s._v("开启标量替换：-XX:+EliminateAllocations")]),s._v(" "),a("li",[s._v("关闭标量替换：-XX:-EliminateAllocations")]),s._v(" "),a("li",[s._v("显示标量替换详情：-XX:+PrintEliminateAllocations")])]),s._v(" "),a("p",[s._v("标量替换同样在 JDK8 中都是默认开启的，并且都要建立在逃逸分析的基础上")]),s._v(" "),a("p",[a("strong",[s._v("栈上分配")])]),s._v(" "),a("p",[s._v("当对象没有发生逃逸时，该"),a("strong",[s._v("对象")]),s._v("就可以通过标量替换分解成成员标量分配在"),a("strong",[s._v("栈内存")]),s._v("中，和方法的生命周期一致，随着栈帧出栈时销毁，减少了 GC 压力，提高了应用程序性能")]),s._v(" "),a("h4",{attrs:{id:"方法内联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法内联"}},[s._v("#")]),s._v(" 方法内联")]),s._v(" "),a("h5",{attrs:{id:"内联函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内联函数"}},[s._v("#")]),s._v(" "),a("strong",[s._v("内联函数")])]),s._v(" "),a("p",[s._v("内联函数就是在程序编译时，编译器将程序中出现的内联函数的调用表达式用内联函数的函数体来直接进行替换")]),s._v(" "),a("h5",{attrs:{id:"jvm内联函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm内联函数"}},[s._v("#")]),s._v(" "),a("strong",[s._v("JVM内联函数")])]),s._v(" "),a("p",[s._v("C++是否为内联函数由自己决定，Java由"),a("strong",[s._v("编译器决定")]),s._v("。Java不支持直接声明为内联函数的，如果想让他内联，你只能够向编译器提出请求: 关键字"),a("strong",[s._v("final修饰")]),s._v(" 用来指明那个函数是希望被JVM内联的，如")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public final void doSomething() {  \n        // to do something  \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("总的来说，一般的函数都不会被当做内联函数，只有声明了final后，编译器才会考虑是不是要把你的函数变成内联函数")]),s._v(" "),a("p",[s._v("JVM内建有许多运行时优化。首先"),a("strong",[s._v("短方法")]),s._v("更利于JVM推断。流程更明显，作用域更短，副作用也更明显。如果是长方法JVM可能直接就跪了。")]),s._v(" "),a("p",[s._v("第二个原因则更重要："),a("strong",[s._v("方法内联")])]),s._v(" "),a("p",[s._v("如果JVM监测到一些"),a("strong",[s._v("小方法被频繁的执行")]),s._v("，它会把方法的调用替换成方法体本身，如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("private int add4(int x1, int x2, int x3, int x4) { \n\t\t//这里调用了add2方法\n        return add2(x1, x2) + add2(x3, x4);  \n    }  \n\n    private int add2(int x1, int x2) {  \n        return x1 + x2;  \n    }Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("方法调用被替换后")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("private int add4(int x1, int x2, int x3, int x4) {  \n    \t//被替换为了方法本身\n        return x1 + x2 + x3 + x4;  \n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"反射优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射优化"}},[s._v("#")]),s._v(" 反射优化")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Reflect1 {\n   public static void foo() {\n      System.out.println("foo...");\n   }\n\n   public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n      Method foo = Demo3.class.getMethod("foo");\n      for(int i = 0; i<=16; i++) {\n         foo.invoke(null);\n      }\n   }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("foo.invoke 前面 0 ~ 15 次调用使用的是 MethodAccessor 的 NativeMethodAccessorImpl 实现")]),s._v(" "),a("p",[s._v("invoke方法源码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@CallerSensitive\npublic Object invoke(Object obj, Object... args)\n    throws IllegalAccessException, IllegalArgumentException,\n       InvocationTargetException\n{\n    if (!override) {\n        if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n            Class<?> caller = Reflection.getCallerClass();\n            checkAccess(caller, clazz, obj, modifiers);\n        }\n    }\n    //MethodAccessor是一个接口，有3个实现类，其中有一个是抽象类\n    MethodAccessor ma = methodAccessor;             // read volatile\n    if (ma == null) {\n        ma = acquireMethodAccessor();\n    }\n    return ma.invoke(obj, args);\n}Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200614133554.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200614133554.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("会由DelegatingMehodAccessorImpl去调用NativeMethodAccessorImpl")]),s._v(" "),a("p",[s._v("NativeMethodAccessorImpl源码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class NativeMethodAccessorImpl extends MethodAccessorImpl {\n    private final Method method;\n    private DelegatingMethodAccessorImpl parent;\n    private int numInvocations;\n\n    NativeMethodAccessorImpl(Method var1) {\n        this.method = var1;\n    }\n\t\n\t//每次进行反射调用，会让numInvocation与ReflectionFactory.inflationThreshold的值（15）进行比较，并使使得numInvocation的值加一\n\t//如果numInvocation>ReflectionFactory.inflationThreshold，则会调用本地方法invoke0方法\n    public Object invoke(Object var1, Object[] var2) throws IllegalArgumentException, InvocationTargetException {\n        if (++this.numInvocations > ReflectionFactory.inflationThreshold() && !ReflectUtil.isVMAnonymousClass(this.method.getDeclaringClass())) {\n            MethodAccessorImpl var3 = (MethodAccessorImpl)(new MethodAccessorGenerator()).generateMethod(this.method.getDeclaringClass(), this.method.getName(), this.method.getParameterTypes(), this.method.getReturnType(), this.method.getExceptionTypes(), this.method.getModifiers());\n            this.parent.setDelegate(var3);\n        }\n\n        return invoke0(this.method, var1, var2);\n    }\n\n    void setParent(DelegatingMethodAccessorImpl var1) {\n        this.parent = var1;\n    }\n\n    private static native Object invoke0(Method var0, Object var1, Object[] var2);\n}Copy\n//ReflectionFactory.inflationThreshold()方法的返回值\nprivate static int inflationThreshold = 15;Copy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("ul",[a("li",[s._v("一开始if条件不满足，就会调用本地方法invoke0")]),s._v(" "),a("li",[s._v("随着numInvocation的增大，当它大于ReflectionFactory.inflationThreshold的值16时，就会本地方法访问器替换为一个运行时动态生成的访问器，来提高效率\n"),a("ul",[a("li",[s._v("这时会从反射调用变为"),a("strong",[s._v("正常调用")]),s._v("，即直接调用 Reflect1.foo()")])])])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200614135011.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200614135011.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"五、内存模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、内存模型"}},[s._v("#")]),s._v(" 五、内存模型")]),s._v(" "),a("p",[s._v("内存模型内容详见 "),a("a",{attrs:{href:"https://nyimac.gitee.io/2020/06/08/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#%E5%9B%9B%E3%80%81%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%86%85%E5%AD%98",target:"_blank",rel:"noopener noreferrer"}},[s._v("JAVA并发 第四章"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"六、总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、总结"}},[s._v("#")]),s._v(" 六、总结")]),s._v(" "),a("p",[s._v("1.init与clinit的区别")]),s._v(" "),a("p",[s._v("2.java程序执行流程")]),s._v(" "),a("p",[s._v("3.new一个对象的过程")])])}),[],!1,null,null,null);a.default=e.exports}}]);