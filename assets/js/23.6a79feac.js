(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{385:function(t,a,e){"use strict";e.r(a);var s=e(7),_=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"一、sql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、sql"}},[t._v("#")]),t._v(" 一、SQL")]),t._v(" "),a("h2",{attrs:{id:"_1-1-sql分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-sql分类"}},[t._v("#")]),t._v(" 1.1 SQL分类")]),t._v(" "),a("p",[t._v("SQL语句，根据其功能，主要分为四类：DDL、DML、DQL、DCL。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("DDL")]),t._v(": 数据定义语言，用来定义"),a("strong",[t._v("数据库对象")]),t._v("（数据库、表、字段）")]),t._v(" "),a("li",[a("code",[t._v("DML")]),t._v(": 数据操作语言，用来对数据库表中的"),a("strong",[t._v("数据")]),t._v("进行增删改")]),t._v(" "),a("li",[a("code",[t._v("DQL")]),t._v(": 数据查询语言，用来查询数据库中表的"),a("strong",[t._v("记录")])]),t._v(" "),a("li",[a("code",[t._v("DCL")]),t._v(": 数据控制语言，用来创建数据库"),a("strong",[t._v("用户")]),t._v("、控制数据库的"),a("strong",[t._v("控制权限")])])]),t._v(" "),a("h2",{attrs:{id:"_1-2-ddl-数据定义语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-ddl-数据定义语言"}},[t._v("#")]),t._v(" 1. 2 DDL（数据定义语言）")]),t._v(" "),a("p",[t._v("Data Definition Language，数据定义语言，用来定义数据库对象(数据库，表，字段)")]),t._v(" "),a("h3",{attrs:{id:"_1-2-1-数据库操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-数据库操作"}},[t._v("#")]),t._v(" 1.2.1 数据库操作")]),t._v(" "),a("p",[t._v("(1)查询所有数据库：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("show databases;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"http://img.aismy.top/img/image-20220420160541116.png",alt:"image-20220420160541116"}}),t._v(" "),a("p",[t._v("(2)查询当前数据库：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("select database(); \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("(3)创建数据库：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("blockquote",[a("p",[t._v("可选项 IF NOT EXISTS 代表，只有想要创建的数据库不存在时才会才会执行创建操作，操作(如果不\n加该参数项，若创建的数据库已存在则会报错)。")])]),t._v(" "),a("p",[t._v("(4)删除数据库：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DROP DATABASE [ IF EXISTS ] 数据库名;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("(5)使用数据库：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("USE 数据库名;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("strong",[t._v("注意事项")])]),t._v(" "),a("ul",[a("li",[t._v("UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集")])]),t._v(" "),a("h3",{attrs:{id:"_1-2-2表操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2表操作"}},[t._v("#")]),t._v(" 1.2.2表操作")]),t._v(" "),a("h4",{attrs:{id:"查询创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询创建"}},[t._v("#")]),t._v(" 查询创建")]),t._v(" "),a("p",[t._v("(1)查询"),a("strong",[t._v("当前数据库")]),t._v("所有表：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SHOW TABLES;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("(2)查询表结构：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DESC 表名;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("通过这条指令，我们可以查看到指定表的字段，字段的类型、是否可以为NULL，是否存在默认值等信\n息。")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"http://img.aismy.top/img/image-20220420161255074.png",alt:"image-20220420161255074"}}),t._v("\n(3)查询指定表的建表语句：\n"),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SHOW CREATE TABLE 表名;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420161827935.png",alt:"image-20220420161827935"}})]),t._v(" "),a("p",[t._v("(4)创建表：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE TABLE 表名(\n\t字段1 字段1类型 [COMMENT 字段1注释],\n\t字段2 字段2类型 [COMMENT 字段2注释],\n\t字段3 字段3类型 [COMMENT 字段3注释],\n\t...\n\t字段n 字段n类型 [COMMENT 字段n注释]\n)[ COMMENT 表注释 ];\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("blockquote",[a("p",[t._v("注意: [...] 内为可选参数，最后一个字段\t逗号")])]),t._v(" "),a("p",[t._v("比如，我们创建一张表 tb_user ，对应的结构如下，那么建表语句为：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420161912220.png",alt:"image-20220420161912220"}})]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("create table tb_user(\n    id int comment '编号',\n    name varchar(50) comment '姓名',\n    age int comment '年龄',\n    gender varchar(1) comment '性别'\n) comment '用户表';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h4",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("blockquote",[a("p",[t._v("在上述的建表语句中，我们在指定字段的数据类型时，用到了int ，varchar，那么在MySQL中除了\n以上的数据类型，还有哪些常见的数据类型呢？ 接下来,我们就来详细介绍一下MySQL的数据类型。\nMySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。")])]),t._v(" "),a("h5",{attrs:{id:"整型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整型"}},[t._v("#")]),t._v(" 整型")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型名称")]),t._v(" "),a("th",[t._v("取值范围")]),t._v(" "),a("th",[t._v("大小")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("TINYINT")]),t._v(" "),a("td",[t._v("-128〜127")]),t._v(" "),a("td",[t._v("1个字节")])]),t._v(" "),a("tr",[a("td",[t._v("SMALLINT")]),t._v(" "),a("td",[t._v("-32768〜32767")]),t._v(" "),a("td",[t._v("2个宇节")])]),t._v(" "),a("tr",[a("td",[t._v("MEDIUMINT")]),t._v(" "),a("td",[t._v("-8388608〜8388607")]),t._v(" "),a("td",[t._v("3个字节")])]),t._v(" "),a("tr",[a("td",[t._v("INT (INTEGHR)")]),t._v(" "),a("td",[t._v("-2147483648〜2147483647")]),t._v(" "),a("td",[t._v("4个字节")])]),t._v(" "),a("tr",[a("td",[t._v("BIGINT")]),t._v(" "),a("td",[t._v("-9223372036854775808〜9223372036854775807")]),t._v(" "),a("td",[t._v("8个字节")])])])]),t._v(" "),a("p",[t._v("无符号在数据类型后加 unsigned 关键字。")]),t._v(" "),a("p",[t._v("选择适合的数据类型：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1). 年龄字段 -- 不会出现负数, 而且人的年龄不会太大\nage tinyint unsigned\n2). 分数 -- 总分100分, 最多出现一位小数\nscore double(4,1)\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("(2) 字符串类型")]),t._v(" "),a("h5",{attrs:{id:"浮点型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮点型"}},[t._v("#")]),t._v(" 浮点型")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型名称")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("存储需求")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("FLOAT")]),t._v(" "),a("td",[t._v("单精度浮点数")]),t._v(" "),a("td",[t._v("4 个字节")])]),t._v(" "),a("tr",[a("td",[t._v("DOUBLE")]),t._v(" "),a("td",[t._v("双精度浮点数")]),t._v(" "),a("td",[t._v("8 个字节")])]),t._v(" "),a("tr",[a("td",[t._v("DECIMAL (M, D)，DEC")]),t._v(" "),a("td",[t._v("压缩的“严格”定点数")]),t._v(" "),a("td",[t._v("M+2 个字节")])])])]),t._v(" "),a("h5",{attrs:{id:"日期和时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日期和时间"}},[t._v("#")]),t._v(" 日期和时间")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型名称")]),t._v(" "),a("th",[t._v("日期格式")]),t._v(" "),a("th",[t._v("日期范围")]),t._v(" "),a("th",[t._v("存储需求")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("YEAR")]),t._v(" "),a("td",[t._v("YYYY")]),t._v(" "),a("td",[t._v("1901 ~ 2155")]),t._v(" "),a("td",[t._v("1 个字节")])]),t._v(" "),a("tr",[a("td",[t._v("TIME")]),t._v(" "),a("td",[t._v("HH:MM:SS")]),t._v(" "),a("td",[t._v("-838:59:59 ~ 838:59:59")]),t._v(" "),a("td",[t._v("3 个字节")])]),t._v(" "),a("tr",[a("td",[t._v("DATE")]),t._v(" "),a("td",[t._v("YYYY-MM-DD")]),t._v(" "),a("td",[t._v("1000-01-01 ~ 9999-12-3")]),t._v(" "),a("td",[t._v("3 个字节")])]),t._v(" "),a("tr",[a("td",[t._v("DATETIME")]),t._v(" "),a("td",[t._v("YYYY-MM-DD HH:MM:SS")]),t._v(" "),a("td",[t._v("1000-01-01 00:00:00 ~ 9999-12-31 23:59:59")]),t._v(" "),a("td",[t._v("8 个字节")])]),t._v(" "),a("tr",[a("td",[t._v("TIMESTAMP")]),t._v(" "),a("td",[t._v("YYYY-MM-DD HH:MM:SS")]),t._v(" "),a("td",[t._v("1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC")]),t._v(" "),a("td",[t._v("4 个字节")])])])]),t._v(" "),a("h5",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型名称")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("存储需求")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("CHAR(M)")]),t._v(" "),a("td",[t._v("固定长度非二进制字符串")]),t._v(" "),a("td",[t._v("M 字节，1<=M<=255")])]),t._v(" "),a("tr",[a("td",[t._v("VARCHAR(M)")]),t._v(" "),a("td",[t._v("变长非二进制字符串")]),t._v(" "),a("td",[t._v("L+1字节，在此，L< = M和 1<=M<=255")])]),t._v(" "),a("tr",[a("td",[t._v("TINYTEXT")]),t._v(" "),a("td",[t._v("非常小的非二进制字符串")]),t._v(" "),a("td",[t._v("L+1字节，在此，L<2^8")])]),t._v(" "),a("tr",[a("td",[t._v("TEXT")]),t._v(" "),a("td",[t._v("小的非二进制字符串")]),t._v(" "),a("td",[t._v("L+2字节，在此，L<2^16")])]),t._v(" "),a("tr",[a("td",[t._v("MEDIUMTEXT")]),t._v(" "),a("td",[t._v("中等大小的非二进制字符串")]),t._v(" "),a("td",[t._v("L+3字节，在此，L<2^24")])]),t._v(" "),a("tr",[a("td",[t._v("LONGTEXT")]),t._v(" "),a("td",[t._v("大的非二进制字符串")]),t._v(" "),a("td",[t._v("L+4字节，在此，L<2^32")])]),t._v(" "),a("tr",[a("td",[t._v("ENUM")]),t._v(" "),a("td",[t._v("枚举类型，只能有一个枚举字符串值")]),t._v(" "),a("td",[t._v("1或2个字节，取决于枚举值的数目 (最大值为65535)")])]),t._v(" "),a("tr",[a("td",[t._v("SET")]),t._v(" "),a("td",[t._v("一个设置，字符串对象可以有零个或 多个SET成员")]),t._v(" "),a("td",[t._v("1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）")])])])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("char")]),t._v("与 "),a("code",[t._v("varchar")]),t._v("都可以描述字符串，"),a("code",[t._v("char")]),t._v("是定长字符串，指定长度多长，就占用多少个字符，和 字段值的长度无关 。而"),a("code",[t._v("varchar")]),t._v("是变长字符串，指定的长度为最大占用长度 。相对来说，char的性 能会更高些。")]),t._v(" "),a("p",[t._v("VARCHAR节省了存储空间但是，由于行是可变的，在UPDATE时可能使行变得比原来更长，这就导致需要做额外的工作。如果一个行占用的空间增长，并且在页内没有更多的空间可以存储，MyISAM会将行拆成不同的片段存储；InnoDB则需要分裂页来使行可以放进页内。")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("BLOB 和 TEXT")])]),t._v(" "),a("p",[t._v("BLOB和TEXT都是为存储很大的数据而设计的数据类型，分别采用二进制和字符方式存储。与其他类型不同，MySQL把每个BLOB和TEXT值当做一个独立的对象去处理。当BLOB和TEXT值太大时，InnoDB会使用专门的“外部”存储区域来进行存储，此时每个值在行内需要1~4个字节存储一个指针，然后在外部存储区域存储实际的值。MySQL对BLOB和TEXT列进行排序与其他类型是不同的：它只对每个列的最前max_sort_length个字节而不是整个字符串做排序。同样的，MySQL也不能将BLOB或TEXT列全部长度的字符串进行索引。")])]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("如：\n1). 用户名 username ------\x3e 长度不定, 最长不会超过50\nusername varchar(50)\n2). 性别 gender ---------\x3e 存储值, 不是男,就是女\ngender char(1)\n3). 手机号 phone --------\x3e 固定长度为11\nphone char(11)\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h5",{attrs:{id:"二进制类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二进制类型"}},[t._v("#")]),t._v(" 二进制类型")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型名称")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("存储需求")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("BIT(M)")]),t._v(" "),a("td",[t._v("位字段类型")]),t._v(" "),a("td",[t._v("大约 (M+7)/8 字节")])]),t._v(" "),a("tr",[a("td",[t._v("BINARY(M)")]),t._v(" "),a("td",[t._v("固定长度二进制字符串")]),t._v(" "),a("td",[t._v("M 字节")])]),t._v(" "),a("tr",[a("td",[t._v("VARBINARY (M)")]),t._v(" "),a("td",[t._v("可变长度二进制字符串")]),t._v(" "),a("td",[t._v("M+1 字节")])]),t._v(" "),a("tr",[a("td",[t._v("TINYBLOB (M)")]),t._v(" "),a("td",[t._v("非常小的BLOB")]),t._v(" "),a("td",[t._v("L+1 字节，在此，L<2^8")])]),t._v(" "),a("tr",[a("td",[t._v("BLOB (M)")]),t._v(" "),a("td",[t._v("小 BLOB")]),t._v(" "),a("td",[t._v("L+2 字节，在此，L<2^16")])]),t._v(" "),a("tr",[a("td",[t._v("MEDIUMBLOB (M)")]),t._v(" "),a("td",[t._v("中等大小的BLOB")]),t._v(" "),a("td",[t._v("L+3 字节，在此，L<2^24")])]),t._v(" "),a("tr",[a("td",[t._v("LONGBLOB (M)")]),t._v(" "),a("td",[t._v("非常大的BLOB")]),t._v(" "),a("td",[t._v("L+4 字节，在此，L<2^32")])])])]),t._v(" "),a("h4",{attrs:{id:"修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改"}},[t._v("#")]),t._v(" 修改")]),t._v(" "),a("p",[t._v("(1)添加字段：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ALTER TABLE 表名 ADD 字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("例：为emp表增加一个新的字段”昵称”为nickname，类型为varchar(20)")]),t._v(" "),a("p",[a("code",[t._v("ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称';")])]),t._v(" "),a("p",[t._v("(2)修改数据类型：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ALTER TABLE 表名 MODIFY 字段名 新数据类型 (长度); \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("(3)修改字段名和字段类型：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ]; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("例：将emp表的nickname字段修改为username，类型为varchar(30)\n"),a("code",[t._v("ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称';")])]),t._v(" "),a("p",[t._v("(4)删除字段：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" ALTER TABLE 表名 DROP 字段名; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("(5)修改表名：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ALTER TABLE 表名 RENAME TO 新表名; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h4",{attrs:{id:"删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[t._v("#")]),t._v(" 删除")]),t._v(" "),a("p",[t._v("(1)删除表：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DROP TABLE [ IF EXISTS ] 表名; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("(2)删除表，并重新创建该表：(相当于清空表中数据)")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("TRUNCATE TABLE 表名;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"_1-3-dml-数据操作语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-dml-数据操作语言"}},[t._v("#")]),t._v(" 1.3 DML（数据操作语言）")]),t._v(" "),a("p",[t._v("DML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进\n行增、删、改操作。")]),t._v(" "),a("ul",[a("li",[t._v("添加数据（INSERT）")]),t._v(" "),a("li",[t._v("修改数据（UPDATE）")]),t._v(" "),a("li",[t._v("删除数据（DELETE）")])]),t._v(" "),a("h4",{attrs:{id:"添加数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加数据"}},[t._v("#")]),t._v(" 添加数据")]),t._v(" "),a("p",[t._v("(1)给指定字段添加数据")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("INSERT INTO 表名 (字段名1, 字段名2, ...) \nVALUES (值1, 值2, ...);\n\n#若给全部字段添加数据，则可忽略字段名，但valuse的值顺序必须与数据库字段顺序一致：\nINSERT INTO 表名 VALUES (值1, 值2, ...);\n\n#批量添加数据\nINSERT INTO 表名 VALUES (值1, 值2, ...),\n(值1, 值2, ...), \n(值1, 值2, ...) ; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("注意事项")]),t._v(" "),a("ul",[a("li",[t._v("字符串和日期类型数据应该包含在引号中")]),t._v(" "),a("li",[t._v("插入的数据大小应该在字段的规定范围内")]),t._v(" "),a("li",[t._v("插入数据时，指定的字段顺序需要与值的顺序是一一对应的。")])]),t._v(" "),a("h4",{attrs:{id:"更新和删除数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新和删除数据"}},[t._v("#")]),t._v(" 更新和删除数据")]),t._v(" "),a("p",[t._v("(1)修改数据：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("UPDATE 表名 SET 字段名1 = 值1 , 字段名2 = 值2 , .... [ WHERE 条件 ] ; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("blockquote",[a("p",[t._v("注意事项:\n修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。")])]),t._v(" "),a("p",[t._v("(2)删除数据：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DELETE FROM 表名 [ WHERE 条件 ] ; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"_1-4-dql-数据查询语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-dql-数据查询语言"}},[t._v("#")]),t._v(" 1.4 DQL（数据查询语言）")]),t._v(" "),a("p",[t._v("DQL英文全称是Data Query Language(数据查询语言)，数据查询语言，用来查询数据库中表的记\n录")]),t._v(" "),a("p",[t._v("查询关键字: SELECT")]),t._v(" "),a("h3",{attrs:{id:"_1-4-1-基本语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-基本语法"}},[t._v("#")]),t._v(" 1.4.1 基本语法")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT\n\t字段列表\nFROM\n\t表名字段\nWHERE\n\t条件列表\nGROUP BY\n\t分组字段列表\nHAVING\n\t分组后的条件列表\nORDER BY\n\t排序字段列表\nLIMIT\n\t分页参数\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("ul",[a("li",[t._v("基本查询（不带任何条件）")]),t._v(" "),a("li",[t._v("条件查询（WHERE）")]),t._v(" "),a("li",[t._v("聚合函数（count、max、min、avg、sum）")]),t._v(" "),a("li",[t._v("分组查询（group by）")]),t._v(" "),a("li",[t._v("排序查询（order by）")]),t._v(" "),a("li",[t._v("分页查询（limit）")])]),t._v(" "),a("h3",{attrs:{id:"_1-4-2基础查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2基础查询"}},[t._v("#")]),t._v(" 1.4.2基础查询")]),t._v(" "),a("p",[t._v("(1)查询多个字段：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT 字段1, 字段2, 字段3 ... FROM 表名 ; \n\n#   *号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）。\nSELECT * FROM 表名 ; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("(2)设置别名：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT 字段1 [ AS 别名1 ] , 字段2 [ AS 别名2 ] ... FROM 表名; \n# as可以省略\nSELECT 字段1 [ 别名1 ] , 字段2 [ 别名2 ] ... FROM 表名; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("(3)去除重复记录")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT DISTINCT 字段列表 FROM 表名;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"_1-4-3条件查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3条件查询"}},[t._v("#")]),t._v(" 1.4.3条件查询")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT 字段列表 FROM 表名 WHERE 条件列表 ; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("条件：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("比较运算符")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v(">")]),t._v(" "),a("td",[t._v("大于")])]),t._v(" "),a("tr",[a("td",[t._v(">=")]),t._v(" "),a("td",[t._v("大于等于")])]),t._v(" "),a("tr",[a("td",[t._v("<")]),t._v(" "),a("td",[t._v("小于")])]),t._v(" "),a("tr",[a("td",[t._v("<=")]),t._v(" "),a("td",[t._v("小于等于")])]),t._v(" "),a("tr",[a("td",[t._v("=")]),t._v(" "),a("td",[t._v("等于")])]),t._v(" "),a("tr",[a("td",[t._v("<> 或 !=")]),t._v(" "),a("td",[t._v("不等于")])]),t._v(" "),a("tr",[a("td",[t._v("BETWEEN ... AND ...")]),t._v(" "),a("td",[t._v("在某个范围内（含最小、最大值）")])]),t._v(" "),a("tr",[a("td",[t._v("IN(...)")]),t._v(" "),a("td",[t._v("在in之后的列表中的值，多选一")])]),t._v(" "),a("tr",[a("td",[t._v("LIKE 占位符")]),t._v(" "),a("td",[t._v("模糊匹配（_匹配单个字符，%匹配任意个字符）")])]),t._v(" "),a("tr",[a("td",[t._v("IS NULL")]),t._v(" "),a("td",[t._v("是NULL")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("逻辑运算符")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("AND 或 &&")]),t._v(" "),a("td",[t._v("并且（多个条件同时成立）")])]),t._v(" "),a("tr",[a("td",[t._v("OR 或 ||")]),t._v(" "),a("td",[t._v("或者（多个条件任意一个成立）")])]),t._v(" "),a("tr",[a("td",[t._v("NOT 或 !")]),t._v(" "),a("td",[t._v("非，不是")])])])]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 年龄等于30\nselect * from employee where age = 30;\n-- 年龄小于30\nselect * from employee where age < 30;\n-- 小于等于\nselect * from employee where age <= 30;\n-- 没有身份证\nselect * from employee where idcard is null or idcard = '';\n-- 有身份证\nselect * from employee where idcard;\nselect * from employee where idcard is not null;\n-- 不等于\nselect * from employee where age != 30;\n-- 年龄在20到30之间\nselect * from employee where age between 20 and 30;\nselect * from employee where age >= 20 and age <= 30;\n-- 下面语句不报错，但查不到任何信息\nselect * from employee where age between 30 and 20;\n-- 性别为女且年龄小于30\nselect * from employee where age < 30 and gender = '女';\n-- 年龄等于25或30或35\nselect * from employee where age = 25 or age = 30 or age = 35;\nselect * from employee where age in (25, 30, 35);\n-- 姓名为两个字\nselect * from employee where name like '__';\n-- 身份证最后为X\nselect * from employee where idcard like '%X';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br")])]),a("h3",{attrs:{id:"_1-4-4聚合查询-聚合函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-4聚合查询-聚合函数"}},[t._v("#")]),t._v(" 1.4.4聚合查询（聚合函数）")]),t._v(" "),a("blockquote",[a("p",[t._v("将一列数据作为一个整体，进行纵向计算 。")])]),t._v(" "),a("p",[t._v("常见聚合函数：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("count")]),t._v(" "),a("td",[t._v("统计数量")])]),t._v(" "),a("tr",[a("td",[t._v("max")]),t._v(" "),a("td",[t._v("最大值")])]),t._v(" "),a("tr",[a("td",[t._v("min")]),t._v(" "),a("td",[t._v("最小值")])]),t._v(" "),a("tr",[a("td",[t._v("avg")]),t._v(" "),a("td",[t._v("平均值")])]),t._v(" "),a("tr",[a("td",[t._v("sum")]),t._v(" "),a("td",[t._v("求和")])])])]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT 聚合函数(字段列表) FROM 表名 ; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("blockquote",[a("p",[t._v("注意 : NULL值是不参与所有聚合函数运算的。")])]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#统计该企业员工数量\nselect count(*) from emp; -- 统计的是总记录数\nselect count(idcard) from emp; -- 统计的是idcard字段不为null的记录数\n#统计该企业员工的平均年龄\nselect avg(age) from emp; \n#统计该企业员工的最大年龄\nselect max(age) from emp; \n#统计该企业员工的最小年龄\nselect min(age) from emp; \n#统计西安地区员工的年龄之和\nselect sum(age) from emp where workaddress = '西安'; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("blockquote",[a("p",[t._v("对于count聚合函数，统计符合条件的总记录数，还可以通过 count(数字/字符串)的形式进行统计\n查询  count(*) 、count(字段)、 count(1)")])]),t._v(" "),a("h3",{attrs:{id:"_1-4-5-分组查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-5-分组查询"}},[t._v("#")]),t._v(" 1.4.5 分组查询")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT 字段列表 \nFROM 表名 \n[ WHERE 条件 ]\nGROUP BY 分组字段名 \n[ HAVING 分组后过滤条件 ];\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("code",[t._v("where")]),t._v("和"),a("code",[t._v("having")]),t._v(" 的区别：")]),t._v(" "),a("ul",[a("li",[t._v("执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。")]),t._v(" "),a("li",[t._v("判断条件不同：where不能对聚合函数进行判断，而having可以。")])]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）\nselect count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性数量\nselect gender, count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性的平均年龄\nselect gender, avg(age) from employee group by gender;\n-- 年龄小于45，并根据工作地址分组\nselect workaddress, count(*) from employee where age < 45 group by workaddress;\n-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址\nselect workaddress, count(*) address_count from employee where age < 45 group by workaddress having address_count >= 3;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("blockquote",[a("p",[t._v("注意事项:")]),t._v(" "),a("ul",[a("li",[t._v("执行顺序：where > 聚合函数 > having")]),t._v(" "),a("li",[t._v("分组之后，查询的字段一般为"),a("code",[t._v("聚合函数")]),t._v("和"),a("code",[t._v("分组字段")]),t._v("，查询其他字段无任何意义")]),t._v(" "),a("li",[t._v("支持多字段分组, 具体语法为 : group by columnA,columnB")])])]),t._v(" "),a("h3",{attrs:{id:"_1-4-6-排序查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-6-排序查询"}},[t._v("#")]),t._v(" 1.4.6 排序查询")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("排序方式：")]),t._v(" "),a("ul",[a("li",[t._v("ASC: 升序（默认）")]),t._v(" "),a("li",[t._v("DESC: 降序")])]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 根据年龄升序排序\nSELECT * FROM employee ORDER BY age ASC;\nSELECT * FROM employee ORDER BY age;\n-- 两字段排序，根据年龄升序排序，入职时间降序排序\nSELECT * FROM employee ORDER BY age ASC, entrydate DESC;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("blockquote",[a("p",[t._v("注意事项：")]),t._v(" "),a("ul",[a("li",[t._v("如果是升序, 可以不指定排序方式ASC ;")]),t._v(" "),a("li",[t._v("如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 ;")])])]),t._v(" "),a("h3",{attrs:{id:"_1-4-7-分页查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-7-分页查询"}},[t._v("#")]),t._v(" 1.4.7 分页查询")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 查询第一页数据，展示10条\nSELECT * FROM employee LIMIT 0, 10;\n-- 查询第二页\nSELECT * FROM employee LIMIT 10, 10;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("blockquote",[a("p",[t._v("注意事项")]),t._v(" "),a("ul",[a("li",[t._v("起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数")]),t._v(" "),a("li",[t._v("分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT")]),t._v(" "),a("li",[t._v("如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10")])])]),t._v(" "),a("h3",{attrs:{id:"_1-4-8-dql执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-8-dql执行顺序"}},[t._v("#")]),t._v(" 1.4.8 DQL执行顺序")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"http://img.aismy.top/img/image-20220420172740921.png",alt:"image-20220420172740921"}}),t._v(" "),a("p",[t._v("FROM -> WHERE -> GROUP BY -> SELECT -> ORDER BY -> LIMIT")]),t._v(" "),a("blockquote",[a("p",[t._v("因此在"),a("code",[t._v("select")]),t._v("后面为字段所起的别名，不能在"),a("code",[t._v("where")]),t._v("语句中使用，而"),a("code",[t._v("from")]),t._v("中为表所起的别名可以在"),a("code",[t._v("where")]),t._v("语句中使用")])]),t._v(" "),a("h2",{attrs:{id:"_1-5-dcl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-dcl"}},[t._v("#")]),t._v(" 1.5 DCL")]),t._v(" "),a("p",[t._v("DCL英文全称是Data Control Language(数据控制语言)，用来管理数据库用户、控制数据库的访\n问权限。")]),t._v(" "),a("h3",{attrs:{id:"_1-5-1-管理用户"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-管理用户"}},[t._v("#")]),t._v(" 1.5.1 管理用户")]),t._v(" "),a("p",[t._v("(1)查询用户：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("select * from mysql.user; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("查询的结果如下:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420173148852.png",alt:"image-20220420173148852"}})]),t._v(" "),a("blockquote",[a("p",[t._v("其中 Host代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不可以\n远程访问的。 User代表的是访问该数据库的用户名。在MySQL中需要通过Host和User来唯一标识一\n个用户。")])]),t._v(" "),a("p",[t._v("(2)创建用户:")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("(3)修改用户密码：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("(4)删除用户：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DROP USER '用户名'@'主机名';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 创建用户test，只能在当前主机localhost访问\ncreate user 'test'@'localhost' identified by '123456';\n-- 创建用户test，能在任意主机访问\ncreate user 'test'@'%' identified by '123456';\ncreate user 'test' identified by '123456';\n-- 修改密码\nalter user 'test'@'localhost' identified with mysql_native_password by '1234';\n-- 删除用户\ndrop user 'test'@'localhost';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("h5",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),a("ul",[a("li",[t._v("主机名可以使用 % 通配")])]),t._v(" "),a("h3",{attrs:{id:"_1-5-2-权限控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-权限控制"}},[t._v("#")]),t._v(" 1.5.2 权限控制")]),t._v(" "),a("p",[t._v("常用权限：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("权限")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ALL, ALL PRIVILEGES")]),t._v(" "),a("td",[t._v("所有权限")])]),t._v(" "),a("tr",[a("td",[t._v("SELECT")]),t._v(" "),a("td",[t._v("查询数据")])]),t._v(" "),a("tr",[a("td",[t._v("INSERT")]),t._v(" "),a("td",[t._v("插入数据")])]),t._v(" "),a("tr",[a("td",[t._v("UPDATE")]),t._v(" "),a("td",[t._v("修改数据")])]),t._v(" "),a("tr",[a("td",[t._v("DELETE")]),t._v(" "),a("td",[t._v("删除数据")])]),t._v(" "),a("tr",[a("td",[t._v("ALTER")]),t._v(" "),a("td",[t._v("修改表")])]),t._v(" "),a("tr",[a("td",[t._v("DROP")]),t._v(" "),a("td",[t._v("删除数据库/表/视图")])]),t._v(" "),a("tr",[a("td",[t._v("CREATE")]),t._v(" "),a("td",[t._v("创建数据库/表")])])])]),t._v(" "),a("p",[t._v("查询权限：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SHOW GRANTS FOR '用户名'@'主机名';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("授予权限：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("撤销权限：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("strong",[t._v("注意事项")])]),t._v(" "),a("ul",[a("li",[t._v("多个权限用逗号分隔")]),t._v(" "),a("li",[t._v("授权时，数据库名和表名可以用 * 进行通配，代表所有")])]),t._v(" "),a("h1",{attrs:{id:"二、函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、函数"}},[t._v("#")]),t._v(" 二、函数")]),t._v(" "),a("blockquote",[a("p",[t._v("函数 是指一段可以直接被另一段程序调用的程序或代码。 也就意味着，这一段程序或代码在MySQL中\n已经给我们提供了，我们要做的就是在合适的业务场景调用对应的函数完成对应的业务需求即可。")])]),t._v(" "),a("ul",[a("li",[t._v("字符串函数")]),t._v(" "),a("li",[t._v("数值函数")]),t._v(" "),a("li",[t._v("日期函数")]),t._v(" "),a("li",[t._v("流程函数")])]),t._v(" "),a("h2",{attrs:{id:"_2-1-字符串函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-字符串函数"}},[t._v("#")]),t._v(" 2.1 字符串函数")]),t._v(" "),a("p",[t._v("常用函数：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("CONCAT(s1, s2, ..., sn)")]),t._v(" "),a("td",[t._v("字符串拼接，将s1, s2, ..., sn拼接成一个字符串")])]),t._v(" "),a("tr",[a("td",[t._v("LOWER(str)")]),t._v(" "),a("td",[t._v("将字符串全部转为小写")])]),t._v(" "),a("tr",[a("td",[t._v("UPPER(str)")]),t._v(" "),a("td",[t._v("将字符串全部转为大写")])]),t._v(" "),a("tr",[a("td",[t._v("LPAD(str, n, pad)")]),t._v(" "),a("td",[t._v("左填充，用字符串pad对str的左边进行填充，达到n个字符串长度")])]),t._v(" "),a("tr",[a("td",[t._v("RPAD(str, n, pad)")]),t._v(" "),a("td",[t._v("右填充，用字符串pad对str的右边进行填充，达到n个字符串长度")])]),t._v(" "),a("tr",[a("td",[t._v("TRIM(str)")]),t._v(" "),a("td",[t._v("去掉字符串头部和尾部的空格")])]),t._v(" "),a("tr",[a("td",[t._v("SUBSTRING(str, start, len)")]),t._v(" "),a("td",[t._v("返回从字符串str从start位置起的len个长度的字符串")])])])]),t._v(" "),a("p",[t._v("使用示例：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 拼接\nSELECT CONCAT('Hello', 'World');\n-- 小写\nSELECT LOWER('Hello');\n-- 大写\nSELECT UPPER('Hello');\n-- 左填充\nSELECT LPAD('01', 5, '-');\n-- 右填充\nSELECT RPAD('01', 5, '-');\n-- 去除空格\nSELECT TRIM(' Hello World ');\n-- 切片（起始索引为1）\nSELECT SUBSTRING('Hello World', 1, 5);\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h2",{attrs:{id:"_2-2-数值函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-数值函数"}},[t._v("#")]),t._v(" 2.2 数值函数")]),t._v(" "),a("p",[t._v("常见函数：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("CEIL(x)")]),t._v(" "),a("td",[t._v("向上取整")])]),t._v(" "),a("tr",[a("td",[t._v("FLOOR(x)")]),t._v(" "),a("td",[t._v("向下取整")])]),t._v(" "),a("tr",[a("td",[t._v("MOD(x, y)")]),t._v(" "),a("td",[t._v("返回x/y的模")])]),t._v(" "),a("tr",[a("td",[t._v("RAND()")]),t._v(" "),a("td",[t._v("返回0~1内的随机数")])]),t._v(" "),a("tr",[a("td",[t._v("ROUND(x, y)")]),t._v(" "),a("td",[t._v("求参数x的四舍五入值，保留y位小数")])])])]),t._v(" "),a("h2",{attrs:{id:"_2-3-日期函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-日期函数"}},[t._v("#")]),t._v(" 2.3 日期函数")]),t._v(" "),a("p",[t._v("常用函数：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("CURDATE()")]),t._v(" "),a("td",[t._v("返回当前日期")])]),t._v(" "),a("tr",[a("td",[t._v("CURTIME()")]),t._v(" "),a("td",[t._v("返回当前时间")])]),t._v(" "),a("tr",[a("td",[t._v("NOW()")]),t._v(" "),a("td",[t._v("返回当前日期和时间")])]),t._v(" "),a("tr",[a("td",[t._v("YEAR(date)")]),t._v(" "),a("td",[t._v("获取指定date的年份")])]),t._v(" "),a("tr",[a("td",[t._v("MONTH(date)")]),t._v(" "),a("td",[t._v("获取指定date的月份")])]),t._v(" "),a("tr",[a("td",[t._v("DAY(date)")]),t._v(" "),a("td",[t._v("获取指定date的日期")])]),t._v(" "),a("tr",[a("td",[t._v("DATE_ADD(date, INTERVAL expr type)")]),t._v(" "),a("td",[t._v("返回一个日期/时间值加上一个时间间隔expr后的时间值")])]),t._v(" "),a("tr",[a("td",[t._v("DATEDIFF(date1, date2)")]),t._v(" "),a("td",[t._v("返回起始时间date1和结束时间date2之间的天数")])])])]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- DATE_ADD\nSELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h2",{attrs:{id:"_2-4-流程函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-流程函数"}},[t._v("#")]),t._v(" 2.4 流程函数")]),t._v(" "),a("p",[t._v("常用函数：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("IF(value, t, f)")]),t._v(" "),a("td",[t._v("如果value为true，则返回t，否则返回f")])]),t._v(" "),a("tr",[a("td",[t._v("IFNULL(value1, value2)")]),t._v(" "),a("td",[t._v("如果value1不为空，返回value1，否则返回value2")])]),t._v(" "),a("tr",[a("td",[t._v("CASE WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END")]),t._v(" "),a("td",[t._v("如果val1为true，返回res1，... 否则返回default默认值")])]),t._v(" "),a("tr",[a("td",[t._v("CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END")]),t._v(" "),a("td",[t._v("如果expr的值等于val1，返回res1，... 否则返回default默认值")])])])]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("select\n\tname,\n\t(case when age > 30 then '中年' else '青年' end)\nfrom employee;\nselect\n\tname,\n\t(case workaddress when '北京市' then '一线城市' when '上海市' then '一线城市' else '二线城市' end) as '工作地址'\nfrom employee;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h1",{attrs:{id:"三、约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、约束"}},[t._v("#")]),t._v(" 三、约束")]),t._v(" "),a("blockquote",[a("p",[t._v("**概念：**约束是作用于表中字段上的规则，用于限制存储在表中的数据。\n**目的：**保证数据库中数据的正确、有效性和完整性。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("约束")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("关键字")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("非空约束")]),t._v(" "),a("td",[t._v("限制该字段的数据不能为null")]),t._v(" "),a("td",[t._v("NOT NULL")])]),t._v(" "),a("tr",[a("td",[t._v("唯一约束")]),t._v(" "),a("td",[t._v("保证该字段的所有数据都是唯一、不重复的")]),t._v(" "),a("td",[t._v("UNIQUE")])]),t._v(" "),a("tr",[a("td",[t._v("主键约束")]),t._v(" "),a("td",[t._v("主键是一行数据的唯一标识，要求非空且唯一")]),t._v(" "),a("td",[t._v("PRIMARY KEY")])]),t._v(" "),a("tr",[a("td",[t._v("默认约束")]),t._v(" "),a("td",[t._v("保存数据时，如果未指定该字段的值，则采用默认值")]),t._v(" "),a("td",[t._v("DEFAULT")])]),t._v(" "),a("tr",[a("td",[t._v("检查约束（8.0.1版本后）")]),t._v(" "),a("td",[t._v("保证字段值满足某一个条件")]),t._v(" "),a("td",[t._v("CHECK")])]),t._v(" "),a("tr",[a("td",[t._v("外键约束")]),t._v(" "),a("td",[t._v("用来让两张图的数据之间建立连接，保证数据的一致性和完整性")]),t._v(" "),a("td",[t._v("FOREIGN KEY")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("约束是作用于表中"),a("strong",[t._v("字段")]),t._v("上的，可以再创建表/修改表的时候添加约束。")])]),t._v(" "),a("h2",{attrs:{id:"_3-1-常用约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-常用约束"}},[t._v("#")]),t._v(" 3.1 常用约束")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("约束条件")]),t._v(" "),a("th",[t._v("关键字")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("主键")]),t._v(" "),a("td",[t._v("PRIMARY KEY")])]),t._v(" "),a("tr",[a("td",[t._v("自动增长")]),t._v(" "),a("td",[t._v("AUTO_INCREMENT")])]),t._v(" "),a("tr",[a("td",[t._v("不为空")]),t._v(" "),a("td",[t._v("NOT NULL")])]),t._v(" "),a("tr",[a("td",[t._v("唯一")]),t._v(" "),a("td",[t._v("UNIQUE")])]),t._v(" "),a("tr",[a("td",[t._v("逻辑条件")]),t._v(" "),a("td",[t._v("CHECK")])]),t._v(" "),a("tr",[a("td",[t._v("默认值")]),t._v(" "),a("td",[t._v("DEFAULT")])])])]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("create table user(\n\tid int primary key auto_increment,\n\tname varchar(10) not null unique,\n\tage int check(age > 0 and age < 120),\n\tstatus char(1) default '1',\n\tgender char(1)\n);\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h2",{attrs:{id:"_3-2-外键约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-外键约束"}},[t._v("#")]),t._v(" 3.2 外键约束")]),t._v(" "),a("p",[t._v("添加外键：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE TABLE 表名(\n\t字段名 字段类型,\n\t...\n\t[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)\n);\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);\n\n-- 例子\nalter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("删除外键：\n"),a("code",[t._v("ALTER TABLE 表名 DROP FOREIGN KEY 外键名;")])]),t._v(" "),a("h4",{attrs:{id:"删除-更新行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除-更新行为"}},[t._v("#")]),t._v(" 删除/更新行为")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("行为")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("NO ACTION")]),t._v(" "),a("td",[t._v("当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）")])]),t._v(" "),a("tr",[a("td",[t._v("RESTRICT")]),t._v(" "),a("td",[t._v("当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）")])]),t._v(" "),a("tr",[a("td",[t._v("CASCADE")]),t._v(" "),a("td",[t._v("当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录")])]),t._v(" "),a("tr",[a("td",[t._v("SET NULL")]),t._v(" "),a("td",[t._v("当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）")])]),t._v(" "),a("tr",[a("td",[t._v("SET DEFAULT")]),t._v(" "),a("td",[t._v("父表有变更时，子表将外键设为一个默认值（Innodb不支持）")])])])]),t._v(" "),a("p",[t._v("更改删除/更新行为：\n"),a("code",[t._v("ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;")])]),t._v(" "),a("h1",{attrs:{id:"四、多表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、多表查询"}},[t._v("#")]),t._v(" 四、多表查询")]),t._v(" "),a("h2",{attrs:{id:"_4-1-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-概述"}},[t._v("#")]),t._v(" 4.1 概述")]),t._v(" "),a("blockquote",[a("p",[t._v("项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结\n构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种:")])]),t._v(" "),a("ul",[a("li",[t._v("一对多（多对一）")]),t._v(" "),a("li",[t._v("多对多")]),t._v(" "),a("li",[t._v("一对一")])]),t._v(" "),a("h3",{attrs:{id:"_1-一对多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-一对多"}},[t._v("#")]),t._v(" 1. 一对多")]),t._v(" "),a("p",[t._v("案例：部门与员工\n关系：一个部门对应多个员工，一个员工对应一个部门\n实现：在多的一方建立外键，指向一的一方的主键")]),t._v(" "),a("h3",{attrs:{id:"_2-多对多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-多对多"}},[t._v("#")]),t._v(" 2. 多对多")]),t._v(" "),a("p",[t._v("案例：学生与课程\n关系：一个学生可以选多门课程，一门课程也可以供多个学生选修\n实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键")]),t._v(" "),a("h3",{attrs:{id:"_3-一对一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-一对一"}},[t._v("#")]),t._v(" 3. 一对一")]),t._v(" "),a("p",[t._v("案例：用户与用户详情\n关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率\n实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）")]),t._v(" "),a("h2",{attrs:{id:"_4-2-连接查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-连接查询"}},[t._v("#")]),t._v(" 4.2 连接查询")]),t._v(" "),a("p",[t._v("连接查询分为：")]),t._v(" "),a("ul",[a("li",[t._v("内连接：相当于查询A、B交集部分数据")]),t._v(" "),a("li",[t._v("外连接：\n"),a("ul",[a("li",[t._v("左外连接：查询左表所有数据，以及两张表交集部分数据")]),t._v(" "),a("li",[t._v("右外连接：查询右表所有数据，以及两张表交集部分数据")])])]),t._v(" "),a("li",[t._v("自连接：当前表与自身的连接查询，自连接必须使用表别名")])]),t._v(" "),a("h3",{attrs:{id:"_4-2-1内连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1内连接"}},[t._v("#")]),t._v(" 4.2.1内连接")]),t._v(" "),a("p",[t._v("内连接查询的是两张表交集部分的数据。")]),t._v(" "),a("p",[t._v("内连接的语法分为两种: "),a("code",[t._v("隐式内连接")]),t._v("、"),a("code",[t._v("显式内连接")]),t._v("。")]),t._v(" "),a("p",[t._v("(1)隐式内连接:")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT 字段列表 FROM 表1 , 表2 WHERE 条件 ... ; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("(2)显式内连接:")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ... ; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("blockquote",[a("p",[t._v("显式性能比隐式高")])]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 查询员工姓名，及关联的部门的名称\n-- 隐式\nselect e.name, d.name from employee as e, dept as d where e.dept = d.id;\n-- 显式\nselect e.name, d.name from employee as e inner join dept as d on e.dept = d.id;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"_4-2-2-外连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-外连接"}},[t._v("#")]),t._v(" 4.2.2 外连接")]),t._v(" "),a("blockquote",[a("p",[t._v("外连接分为两种，分别是：左外连接 和 右外连接。具体的语法结构为：")])]),t._v(" "),a("p",[t._v("(1)左外连接：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("查询左表所有数据，以及两张表交集部分数据")]),t._v(" "),a("p",[t._v("(2)右外连接：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("查询右表所有数据，以及两张表交集部分数据")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 左\nselect e.*, d.name from employee as e left outer join dept as d on e.dept = d.id; \n-- 右\nselect d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("blockquote",[a("p",[t._v("左连接可以查询到没有dept的employee(即查出所有员工)，右连接可以查询到没有employee的dept（即查出所有部门）")])]),t._v(" "),a("h3",{attrs:{id:"_4-2-3-自连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-自连接"}},[t._v("#")]),t._v(" 4.2.3 自连接")]),t._v(" "),a("h4",{attrs:{id:"自连接查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自连接查询"}},[t._v("#")]),t._v(" 自连接查询")]),t._v(" "),a("blockquote",[a("p",[t._v("当前表与自身的连接查询，自连接必须使用表别名，要不然我们不清楚所指定的条件、返回的字段，到底\n是哪一张表的字段。")])]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("自连接查询，可以是内连接查询，也可以是外连接查询")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 查询员工及其所属领导的名字(员工和领导都在employee表中)\nselect a.name, b.name from employee a, employee b where a.manager = b.id;\n-- 没有领导的也查询出来\nselect a.name, b.name from employee a left join employee b on a.manager = b.id;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h4",{attrs:{id:"联合查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合查询"}},[t._v("#")]),t._v(" 联合查询")]),t._v(" "),a("p",[t._v("把多次查询的结果合并，形成一个新的查询集")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT 字段列表 FROM 表A ...\nUNION [ALL]\nSELECT 字段列表 FROM 表B ...\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("案例：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#将薪资低于 5000 的员工 , 和 年龄大于 50 岁的员工全部查询出来.\nselect * from emp where salary < 5000\nunion \nselect * from emp where age > 50;\n\n#也可以使用or\nselect * from emp where salary < 5000 or age > 50;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("blockquote",[a("p",[t._v("注意事项:")]),t._v(" "),a("ul",[a("li",[t._v("UNION ALL 会有重复结果，UNION 不会")]),t._v(" "),a("li",[a("code",[t._v("联合查询")]),t._v("比使用"),a("code",[t._v("or")]),t._v("效率高，不会使索引失效")]),t._v(" "),a("li",[t._v("如果多条查询语句查询出来的结果，字段数量不一致，在进行union/union all联合查询时，将会报\n错。")])])]),t._v(" "),a("h2",{attrs:{id:"_4-3子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3子查询"}},[t._v("#")]),t._v(" 4.3子查询")]),t._v(" "),a("p",[t._v("SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。")]),t._v(" "),a("p",[a("strong",[t._v("子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个")])]),t._v(" "),a("p",[t._v("根据子查询结果可以分为：")]),t._v(" "),a("ul",[a("li",[t._v("标量子查询（子查询结果为单个值）")]),t._v(" "),a("li",[t._v("列子查询（子查询结果为一列）")]),t._v(" "),a("li",[t._v("行子查询（子查询结果为一行）")]),t._v(" "),a("li",[t._v("表子查询（子查询结果为多行多列）")])]),t._v(" "),a("p",[t._v("根据子查询位置可分为：")]),t._v(" "),a("ul",[a("li",[t._v("WHERE 之后")]),t._v(" "),a("li",[t._v("FROM 之后")]),t._v(" "),a("li",[t._v("SELECT 之后")])]),t._v(" "),a("h3",{attrs:{id:"_4-3-1-标量子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-标量子查询"}},[t._v("#")]),t._v(" 4.3.1 标量子查询")]),t._v(" "),a("p",[t._v("子查询返回的结果是单个值（数字、字符串、日期等）。\n常用操作符：- < > > >= < <=")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 查询销售部所有员工\nselect id from dept where name = '销售部';\n-- 根据销售部部门ID，查询员工信息\nselect * from employee where dept = 4;\n-- 合并（子查询）\nselect * from employee where dept = (select id from dept where name = '销售部');\n\n-- 查询xxx入职之后的员工信息\nselect * from employee where entrydate > (select entrydate from employee where name = 'xxx');\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("h3",{attrs:{id:"_4-3-2-列子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-列子查询"}},[t._v("#")]),t._v(" 4.3.2 列子查询")]),t._v(" "),a("p",[t._v("返回的结果是一列（可以是多行）。")]),t._v(" "),a("p",[t._v("常用操作符：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("操作符")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("IN")]),t._v(" "),a("td",[t._v("在指定的集合范围内，多选一")])]),t._v(" "),a("tr",[a("td",[t._v("NOT IN")]),t._v(" "),a("td",[t._v("不在指定的集合范围内")])]),t._v(" "),a("tr",[a("td",[t._v("ANY")]),t._v(" "),a("td",[t._v("子查询返回列表中，有任意一个满足即可")])]),t._v(" "),a("tr",[a("td",[t._v("SOME")]),t._v(" "),a("td",[t._v("与ANY等同，使用SOME的地方都可以使用ANY")])]),t._v(" "),a("tr",[a("td",[t._v("ALL")]),t._v(" "),a("td",[t._v("子查询返回列表的所有值都必须满足")])])])]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 查询销售部和市场部的所有员工信息\nselect * from employee where dept in (select id from dept where name = '销售部' or name = '市场部');\n-- 查询比财务部所有人工资都高的员工信息\nselect * from employee where salary > all(select salary from employee where dept = (select id from dept where name = '财务部'));\n-- 查询比研发部任意一人工资高的员工信息\nselect * from employee where salary > any (select salary from employee where dept = (select id from dept where name = '研发部'));\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h3",{attrs:{id:"_4-3-3-行子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-行子查询"}},[t._v("#")]),t._v(" 4.3.3 行子查询")]),t._v(" "),a("p",[t._v("返回的结果是一行（可以是多列）。多列（多个属性值）\n常用操作符：=, <, >, IN, NOT IN")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 查询与xxx的薪资及直属领导相同的员工信息\nselect * from employee where (salary, manager) = (12500, 1);\nselect * from employee where (salary, manager) = (select salary, manager from employee where name = 'xxx');\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"_4-3-4-表子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-表子查询"}},[t._v("#")]),t._v(" 4.3.4 表子查询")]),t._v(" "),a("p",[t._v("返回的结果是多行多列\n常用操作符：IN")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 查询与xxx1，xxx2的职位和薪资相同的员工\nselect * from employee where (job, salary) in (select job, salary from employee where name = 'xxx1' or name = 'xxx2');\n-- 查询入职日期是2006-01-01之后的员工，及其部门信息\nselect e.*, d.* from (select * from employee where entrydate > '2006-01-01') as e left join dept as d on e.dept = d.id;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h1",{attrs:{id:"五、事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、事务"}},[t._v("#")]),t._v(" 五、事务")]),t._v(" "),a("p",[t._v("事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。")]),t._v(" "),a("blockquote",[a("p",[t._v("注意： 默认MySQL的事务是自动提交的，也就是说，当执行完一条DML语句时，MySQL会立即隐式的提交事务。")])]),t._v(" "),a("h2",{attrs:{id:"_5-1-相关操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-相关操作"}},[t._v("#")]),t._v(" 5.1 相关操作")]),t._v(" "),a("p",[t._v("（1）查看/设置事务提交方式")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#查看当前数据库事务提交方式（1为自动提交，0为手动提交）\nSELECT @@autocommit;\n#设置事务提交方式\nSET @@autocommit = 0;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("（2）开启事务")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("START TRANSACTION 或 BEGIN ; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("（3） 提交事务")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("COMMIT; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("（4）回滚事务")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ROLLBACK; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"_5-2-四大特性acid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-四大特性acid"}},[t._v("#")]),t._v(" 5.2 四大特性ACID")]),t._v(" "),a("ul",[a("li",[t._v("原子性(Atomicity)：事务是不可分割的最小操作单元，要么全部成功，要么全部失败")]),t._v(" "),a("li",[t._v("一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态")]),t._v(" "),a("li",[t._v("隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行")]),t._v(" "),a("li",[t._v("持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的")])]),t._v(" "),a("blockquote",[a("p",[t._v("InnoDB引擎通过什么技术来保证事务的这四个特性的呢？")])]),t._v(" "),a("ul",[a("li",[t._v("持久性是通过 redo log （重做日志）来保证的；")]),t._v(" "),a("li",[t._v("原子性是通过 undo log（回滚日志） 来保证的；")]),t._v(" "),a("li",[t._v("隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；")]),t._v(" "),a("li",[t._v("一致性则是通过持久性+原子性+隔离性来保证；")])]),t._v(" "),a("h2",{attrs:{id:"_5-2-并发事务可能引发的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-并发事务可能引发的问题"}},[t._v("#")]),t._v(" 5.2 并发事务可能引发的问题")]),t._v(" "),a("p",[t._v("MySQL 服务端是允许多个客户端连接的，这意味着 MySQL 会出现同时处理多个事务的情况。")]),t._v(" "),a("p",[t._v("那么"),a("strong",[t._v("在同时处理多个事务的时候，就可能出现脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）的问题")]),t._v("。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("问题")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("脏读")]),t._v(" "),a("td",[t._v("一个事务读到另一个事务还没提交的数据")])]),t._v(" "),a("tr",[a("td",[t._v("不可重复读")]),t._v(" "),a("td",[t._v("一个事务先后读取同一条记录，但两次读取的数据不同")])]),t._v(" "),a("tr",[a("td",[t._v("幻读")]),t._v(" "),a("td",[t._v("一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在（前后读取的记录数量不一致。）")])])])]),t._v(" "),a("h2",{attrs:{id:"_5-3事务的隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3事务的隔离级别"}},[t._v("#")]),t._v(" 5.3事务的隔离级别")]),t._v(" "),a("p",[t._v("多个事务并发执行时可能会遇到上述问题，因此SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("读未提交（read uncommitted）")]),t._v("，指一个事务还没提交时，它做的变更就能被其他事务看到；")]),t._v(" "),a("li",[a("strong",[t._v("读提交（read committed）")]),t._v("，指一个事务提交之后，它做的变更才能被其他事务看到；")]),t._v(" "),a("li",[a("strong",[t._v("可重复读（repeatable read）")]),t._v("，指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，"),a("strong",[t._v("MySQL InnoDB 引擎的默认隔离级别")]),t._v("；")]),t._v(" "),a("li",[a("strong",[t._v("串行化（serializable ）")]),t._v("；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("隔离级别")]),t._v(" "),a("th",[t._v("脏读")]),t._v(" "),a("th",[t._v("不可重复读")]),t._v(" "),a("th",[t._v("幻读")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Read uncommitted")]),t._v(" "),a("td",[t._v("√")]),t._v(" "),a("td",[t._v("√")]),t._v(" "),a("td",[t._v("√")])]),t._v(" "),a("tr",[a("td",[t._v("Read committed")]),t._v(" "),a("td",[t._v("×")]),t._v(" "),a("td",[t._v("√")]),t._v(" "),a("td",[t._v("√")])]),t._v(" "),a("tr",[a("td",[t._v("Repeatable Read(innodb默认隔离级别)")]),t._v(" "),a("td",[t._v("×")]),t._v(" "),a("td",[t._v("×")]),t._v(" "),a("td",[t._v("√")])]),t._v(" "),a("tr",[a("td",[t._v("Serializable")]),t._v(" "),a("td",[t._v("×")]),t._v(" "),a("td",[t._v("×")]),t._v(" "),a("td",[t._v("×")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它通过next-key lock 锁（行锁和间隙锁的组合）来锁住记录之间的“间隙”和记录本身，防止其他事务在这个记录之间插入新的记录，这样就避免了幻读现象。")])]),t._v(" "),a("ul",[a("li",[t._v("对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；")]),t._v(" "),a("li",[t._v("对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；")]),t._v(" "),a("li",[t._v("对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 "),a("strong",[t._v("Read View *"),a("em",[t._v("来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。*")]),t._v("「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View")]),t._v("。")])]),t._v(" "),a("p",[t._v("查看事务隔离级别：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT @@TRANSACTION_ISOLATION;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("设置事务隔离级别：\n"),a("code",[t._v("SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };")]),t._v("\nSESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效")]),t._v(" "),a("h1",{attrs:{id:"六、存储引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、存储引擎"}},[t._v("#")]),t._v(" 六、存储引擎")]),t._v(" "),a("h2",{attrs:{id:"_6-1-mysql体系结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-mysql体系结构"}},[t._v("#")]),t._v(" 6.1 MySQL体系结构")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://dhc.pythonanywhere.com/media/editor/MySQL体系结构_20220315034329549927.png",alt:"结构图",title:"结构图"}}),t._v("\n**(1)连接层**\n最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于\nTCP/IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程\n池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务\n器也会为安全接入的每个客户端验证它所具有的操作权限。\n**(2) 服务层**\n第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部\n分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解\n析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等，\n最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，\n这样在解决大量读操作的环境中能够很好的提升系统的性能。\n**(3) 引擎层**\n存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通\n信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。数据库\n中的索引是在存储引擎层实现的。\n**(4)存储层**\n数据存储层， 主要是将数据(如: redolog、undolog、数据、索引、二进制日志、错误日志、查询\n日志、慢查询日志等)存储在文件系统之上，并完成与存储引擎的交互。\n"),a("blockquote",[a("p",[t._v("和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要\n体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。\n这种架构可以根据业务的需求和实际需要选择合适的存储引擎。")])]),t._v(" "),a("h2",{attrs:{id:"_6-2-存储引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-存储引擎"}},[t._v("#")]),t._v(" 6.2 存储引擎")]),t._v(" "),a("blockquote",[a("p",[t._v("存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。mysql 默认存储引擎是InnoDB。")])]),t._v(" "),a("p",[t._v("相关操作：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 查询建表语句\nshow create table account;\n-- 建表时指定存储引擎\nCREATE TABLE 表名(\n\t...\n) ENGINE=INNODB;\n-- 查看当前数据库支持的存储引擎\nshow engines;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h2",{attrs:{id:"_6-3-存储引擎特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-存储引擎特点"}},[t._v("#")]),t._v(" 6.3 存储引擎特点")]),t._v(" "),a("h3",{attrs:{id:"innodb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb"}},[t._v("#")]),t._v(" InnoDB")]),t._v(" "),a("p",[t._v("InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。")]),t._v(" "),a("p",[a("strong",[t._v("(1)特点：")])]),t._v(" "),a("ul",[a("li",[t._v("DML 操作遵循 ACID 模型，支持"),a("strong",[t._v("事务")])]),t._v(" "),a("li",[a("strong",[t._v("行级锁")]),t._v("，提高并发访问性能")]),t._v(" "),a("li",[t._v("支持"),a("strong",[t._v("外键")]),t._v("约束，保证数据的完整性和正确性")])]),t._v(" "),a("p",[a("strong",[t._v("(2)文件：")])]),t._v(" "),a("ul",[a("li",[t._v("xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。")])]),t._v(" "),a("p",[t._v("参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("show variables like 'innodb_file_per_table';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420203945315.png",alt:"image-20220420203945315"}})]),t._v(" "),a("p",[t._v("如果该参数开启，代表对于InnoDB引擎的表，每一张表都对应一个ibd文件。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420204150038.png",alt:"image-20220420204150038"}})]),t._v(" "),a("blockquote",[a("p",[t._v("可以看到里面有很多的ibd文件，每一个ibd文件就对应一张表，比如：我们有一张表 account，就有这样的一个account.ibd文件，而在这个ibd文件中不仅存放表结构、数据，还会存放该表对应的索引信息。 而该文件是基于二进制存储的，不能直接基于记事本打开，我们可以使用mysql提供的一个指令 ibd2sdi ，通过该指令就可以从ibd文件中提取sdi信息，而sdi数据字典信息中就包含该表show variables like 'innodb_file_per_table'; 1的表结构。")])]),t._v(" "),a("p",[t._v("从idb文件提取表结构数据："),a("code",[t._v("ibd2sdi xxx.ibd")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420204348126.png",alt:"image-20220420204348126"}})]),t._v(" "),a("p",[a("strong",[t._v("(3)逻辑存储结构:")]),t._v(" "),a("img",{attrs:{src:"https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png",alt:"InnoDB逻辑存储结构",title:"InnoDB逻辑存储结构"}})]),t._v(" "),a("ul",[a("li",[t._v("表空间 : InnoDB存储引擎逻辑结构的最高层，ibd文件其实就是表空间文件，在表空间中可以\n包含多个Segment段。")]),t._v(" "),a("li",[t._v("段 : 表空间是由各个段组成的， 常见的段有数据段、索引段、回滚段等。InnoDB中对于段的管\n理，都是引擎自身完成，不需要人为对其控制，一个段中包含多个区。")]),t._v(" "),a("li",[t._v("区 : 区是表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为\n16K， 即一个区中一共有64个连续的页。")]),t._v(" "),a("li",[t._v("页 : 页是组成区的最小单元，页也是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默\n认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。")]),t._v(" "),a("li",[t._v("行 : InnoDB 存储引擎是面向行的，也就是说数据是按行进行存放的，在每一行中除了定义表时\n所指定的字段以外，还包含两个隐藏字段")])]),t._v(" "),a("h3",{attrs:{id:"myisam"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#myisam"}},[t._v("#")]),t._v(" MyISAM")]),t._v(" "),a("p",[t._v("MyISAM 是 MySQL 早期的默认存储引擎。")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("不支持事务，不支持外键")]),t._v(" "),a("li",[t._v("支持表锁，不支持行锁")]),t._v(" "),a("li",[t._v("访问速度快")])]),t._v(" "),a("p",[t._v("文件：")]),t._v(" "),a("ul",[a("li",[t._v("xxx.sdi: 存储表结构信息")]),t._v(" "),a("li",[t._v("xxx.MYD: 存储数据")]),t._v(" "),a("li",[t._v("xxx.MYI: 存储索引")])]),t._v(" "),a("h3",{attrs:{id:"memory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory"}},[t._v("#")]),t._v(" Memory")]),t._v(" "),a("p",[t._v("Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("存放在内存中，速度快")]),t._v(" "),a("li",[t._v("hash索引（默认）")])]),t._v(" "),a("p",[t._v("文件：")]),t._v(" "),a("ul",[a("li",[t._v("xxx.sdi: 存储表结构信息")])]),t._v(" "),a("h3",{attrs:{id:"存储引擎特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储引擎特点"}},[t._v("#")]),t._v(" 存储引擎特点")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("特点")]),t._v(" "),a("th",[t._v("InnoDB")]),t._v(" "),a("th",[t._v("MyISAM")]),t._v(" "),a("th",[t._v("Memory")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("存储限制")]),t._v(" "),a("td",[t._v("64TB")]),t._v(" "),a("td",[t._v("有")]),t._v(" "),a("td",[t._v("有")])]),t._v(" "),a("tr",[a("td",[t._v("事务安全")]),t._v(" "),a("td",[t._v("支持")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("锁机制")]),t._v(" "),a("td",[t._v("行锁")]),t._v(" "),a("td",[t._v("表锁")]),t._v(" "),a("td",[t._v("表锁")])]),t._v(" "),a("tr",[a("td",[t._v("B+tree索引")]),t._v(" "),a("td",[t._v("支持")]),t._v(" "),a("td",[t._v("支持")]),t._v(" "),a("td",[t._v("支持")])]),t._v(" "),a("tr",[a("td",[t._v("Hash索引")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("支持")])]),t._v(" "),a("tr",[a("td",[t._v("全文索引")]),t._v(" "),a("td",[t._v("支持（5.6版本之后）")]),t._v(" "),a("td",[t._v("支持")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("空间使用")]),t._v(" "),a("td",[t._v("高")]),t._v(" "),a("td",[t._v("低")]),t._v(" "),a("td",[t._v("N/A")])]),t._v(" "),a("tr",[a("td",[t._v("内存使用")]),t._v(" "),a("td",[t._v("高")]),t._v(" "),a("td",[t._v("低")]),t._v(" "),a("td",[t._v("中等")])]),t._v(" "),a("tr",[a("td",[t._v("批量插入速度")]),t._v(" "),a("td",[t._v("低")]),t._v(" "),a("td",[t._v("高")]),t._v(" "),a("td",[t._v("高")])]),t._v(" "),a("tr",[a("td",[t._v("支持外键")]),t._v(" "),a("td",[t._v("支持")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("-")])])])]),t._v(" "),a("h2",{attrs:{id:"_6-4-存储引擎的选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-存储引擎的选择"}},[t._v("#")]),t._v(" 6.4 存储引擎的选择")]),t._v(" "),a("p",[t._v("在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。")]),t._v(" "),a("ul",[a("li",[t._v("InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择")]),t._v(" "),a("li",[t._v("MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。")]),t._v(" "),a("li",[t._v("Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性")])]),t._v(" "),a("p",[t._v("电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。")]),t._v(" "),a("h1",{attrs:{id:"七、索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、索引"}},[t._v("#")]),t._v(" 七、索引")]),t._v(" "),a("blockquote",[a("p",[t._v("索引是帮助 MySQL "),a("strong",[t._v("高效获取数据")]),t._v("的"),a("strong",[t._v("数据结构（有序）")]),t._v("。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。")])]),t._v(" "),a("blockquote",[a("p",[t._v("InnoDB 的数据是按"),a("code",[t._v("「数据页」")]),t._v("为单位来读写的，默认数据页大小为 16 KB。"),a("strong",[t._v("每个数据页之间通过双向链表的形式组织起来")]),t._v("，物理上不连续，但是逻辑上连续。")]),t._v(" "),a("p",[t._v("数据页内包含用户记录，"),a("strong",[t._v("每个记录之间用单向链表的方式组织起来")]),t._v("，为了加快在数据页内高效查询记录，设计了一个页目录，页目录存储各个槽（分组），且主键值是有序的，于是可以通过二分查找法的方式进行检索从而提高效率。")]),t._v(" "),a("p",[t._v("为了高效查询记录所在的数据页，InnoDB 采用 b+ 树作为索引，每个节点都是一个数据页。")]),t._v(" "),a("p",[t._v("如果叶子节点存储的是实际数据的就是聚簇【，一个表只能有一个聚簇索引；如果叶子节点存储的不是实际数据，而是主键值则就是二级索引，一个表中可以有多个二级索引。")]),t._v(" "),a("p",[t._v("在使用二级索引进行查找数据时，如果查询的数据能在二级索引找到，那么就是「索引覆盖」操作，如果查询的数据不在二级索引里，就需要先在二级索引找到主键值，需要去聚簇索引中获得数据行，这个过程就叫作「回表」。")])]),t._v(" "),a("p",[a("strong",[t._v("优点：")])]),t._v(" "),a("ul",[a("li",[t._v("提高数据检索效率，降低数据库的IO成本")]),t._v(" "),a("li",[t._v("通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗")])]),t._v(" "),a("p",[a("strong",[t._v("缺点：")])]),t._v(" "),a("ul",[a("li",[t._v("索引列也是要占用空间的")]),t._v(" "),a("li",[t._v("索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE")])]),t._v(" "),a("h2",{attrs:{id:"_7-1索引结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1索引结构"}},[t._v("#")]),t._v(" 7.1索引结构")]),t._v(" "),a("p",[t._v("MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的索引结构，主要包含以下几种：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("索引结构")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("B+Tree")]),t._v(" "),a("td",[t._v("最常见的索引类型，大部分引擎都支持B+树索引")])]),t._v(" "),a("tr",[a("td",[t._v("Hash")]),t._v(" "),a("td",[t._v("底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询")])]),t._v(" "),a("tr",[a("td",[t._v("R-Tree(空间索引)")]),t._v(" "),a("td",[t._v("空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少")])]),t._v(" "),a("tr",[a("td",[t._v("Full-Text(全文索引)")]),t._v(" "),a("td",[t._v("是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("索引")]),t._v(" "),a("th",[t._v("InnoDB")]),t._v(" "),a("th",[t._v("MyISAM")]),t._v(" "),a("th",[t._v("Memory")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("B+Tree索引")]),t._v(" "),a("td",[t._v("支持")]),t._v(" "),a("td",[t._v("支持")]),t._v(" "),a("td",[t._v("支持")])]),t._v(" "),a("tr",[a("td",[t._v("Hash索引")]),t._v(" "),a("td",[t._v("不支持")]),t._v(" "),a("td",[t._v("不支持")]),t._v(" "),a("td",[t._v("支持")])]),t._v(" "),a("tr",[a("td",[t._v("R-Tree索引")]),t._v(" "),a("td",[t._v("不支持")]),t._v(" "),a("td",[t._v("支持")]),t._v(" "),a("td",[t._v("不支持")])]),t._v(" "),a("tr",[a("td",[t._v("Full-text")]),t._v(" "),a("td",[t._v("5.6版本后支持")]),t._v(" "),a("td",[t._v("支持")]),t._v(" "),a("td",[t._v("不支持")])])])]),t._v(" "),a("h3",{attrs:{id:"_7-1-1-二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-1-二叉树"}},[t._v("#")]),t._v(" 7.1.1 二叉树")]),t._v(" "),a("p",[t._v("假如说MySQL的索引结构采用二叉树的数据结构，比较理想的结构如下：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://img.aismy.top/img/image-20220420205516599.png",alt:"image-20220420205516599"}}),t._v(" "),a("p",[t._v("如果主键是顺序插入的，则会形成一个单向链表，结构如下：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://img.aismy.top/img/image-20220420205535779.png",alt:"image-20220420205535779"}}),t._v(" "),a("p",[t._v("所以，如果选择二叉树作为索引结构，会存在以下缺点：")]),t._v(" "),a("ul",[a("li",[t._v("顺序插入时，会形成一个链表，查询性能大大降低。")]),t._v(" "),a("li",[t._v("大数据量情况下，层级较深，检索速度慢。")])]),t._v(" "),a("p",[t._v("此时大家可能会想到，我们可以选择红黑树，红黑树是一颗自平衡二叉树，那这样即使是顺序插入数\n据，最终形成的数据结构也是一颗平衡的二叉树,结构如下:")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://img.aismy.top/img/image-20220420205636785.png",alt:"image-20220420205636785"}}),t._v(" "),a("p",[t._v("但是，即使如此，由于红黑树也是一颗二叉树，所以也会存在一个缺点：")]),t._v(" "),a("ul",[a("li",[t._v("大数据量情况下，层级较深，检索速度慢。")])]),t._v(" "),a("blockquote",[a("p",[t._v("所以，在MySQL的索引结构中，并没有选择二叉树或者红黑树，而选择的是B+Tree，那么什么是\nB+Tree呢？在详解B+Tree之前，先来介绍一个B-Tree。")])]),t._v(" "),a("h3",{attrs:{id:"_7-1-2-b-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-2-b-tree"}},[t._v("#")]),t._v(" 7.1.2 B-Tree")]),t._v(" "),a("blockquote",[a("p",[t._v("B-Tree，B树是一种多叉路衡查找树，相对于二叉树，B树每个节点可以有多个分支，即多叉。以一颗最大度数（max-degree）为5(5阶)的b-tree为例，那这个B树每个节点最多存储4个key，5个指针：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420205849150.png",alt:"image-20220420205849150"}})]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("5阶的B树，每一个节点最多存储4个key，对应5个指针。")]),t._v(" "),a("li",[t._v("一旦节点存储的key数量到达5，就会裂变，中间元素向上分裂。")]),t._v(" "),a("li",[t._v("在B树中，非叶子节点和叶子节点都会存放数据。")])]),t._v(" "),a("h3",{attrs:{id:"_7-1-3-b-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-3-b-tree"}},[t._v("#")]),t._v(" 7.1.3 B+Tree")]),t._v(" "),a("p",[t._v("B+Tree是B-Tree的变种，我们以一颗最大度数（max-degree）为4（4阶）的b+tree为例，来看一下其结构示意图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png",alt:"B+Tree结构图",title:"B+Tree结构图"}})]),t._v(" "),a("p",[t._v("我们可以看到，两部分：")]),t._v(" "),a("ul",[a("li",[t._v("绿色框框起来的部分，是索引部分，仅仅起到索引数据的作用，不存储数据。")]),t._v(" "),a("li",[t._v("红色框框起来的部分，是数据存储部分，在其叶子节点中要存储具体的数据")])]),t._v(" "),a("p",[t._v("与 B-Tree 的区别：")]),t._v(" "),a("ul",[a("li",[t._v("所有的数据都会出现在叶子节点")]),t._v(" "),a("li",[t._v("叶子节点形成一个单向链表")]),t._v(" "),a("li",[t._v("非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的。")])]),t._v(" "),a("p",[t._v("MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420210308555.png",alt:"image-20220420210308555"}})]),t._v(" "),a("h3",{attrs:{id:"_7-1-4-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-4-hash"}},[t._v("#")]),t._v(" 7.1.4 Hash")]),t._v(" "),a("p",[t._v("哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。\n如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420210404374.png",alt:"image-20220420210404374"}})]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、>、<、...）")]),t._v(" "),a("li",[t._v("无法利用索引完成排序操作")]),t._v(" "),a("li",[t._v("查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引")])]),t._v(" "),a("p",[t._v("存储引擎支持：")]),t._v(" "),a("ul",[a("li",[t._v("Memory")]),t._v(" "),a("li",[t._v("InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的")])]),t._v(" "),a("h4",{attrs:{id:"面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[t._v("#")]),t._v(" 面试题")]),t._v(" "),a("ol",[a("li",[t._v("为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？")])]),t._v(" "),a("ul",[a("li",[t._v("相对于二叉树，层级更少，搜索效率高")]),t._v(" "),a("li",[t._v("对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低")]),t._v(" "),a("li",[t._v("相对于 Hash 索引，B+Tree 支持范围匹配及排序操作")])]),t._v(" "),a("h2",{attrs:{id:"_7-2-索引分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-索引分类"}},[t._v("#")]),t._v(" 7.2 索引分类")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("分类")]),t._v(" "),a("th",[t._v("含义")]),t._v(" "),a("th",[t._v("特点")]),t._v(" "),a("th",[t._v("关键字")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("主键索引")]),t._v(" "),a("td",[t._v("针对于表中主键创建的索引")]),t._v(" "),a("td",[t._v("默认自动创建，只能有一个")]),t._v(" "),a("td",[t._v("PRIMARY")])]),t._v(" "),a("tr",[a("td",[t._v("唯一索引")]),t._v(" "),a("td",[t._v("避免同一个表中某数据列中的值重复")]),t._v(" "),a("td",[t._v("可以有多个。")]),t._v(" "),a("td",[t._v("UNIQUE")])]),t._v(" "),a("tr",[a("td",[t._v("常规索引")]),t._v(" "),a("td",[t._v("快速定位特定数据")]),t._v(" "),a("td",[t._v("可以有多个")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("全文索引")]),t._v(" "),a("td",[t._v("全文索引查找的是文本中的关键词，而不是比较索引中的值")]),t._v(" "),a("td",[t._v("可以有多个")]),t._v(" "),a("td",[t._v("FULLTEXT")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("创建唯一约束时，会自动的创建唯一索引，也可为没有设置唯一约束的字段设置唯一索引")])]),t._v(" "),a("p",[t._v("在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("分类")]),t._v(" "),a("th",[t._v("含义")]),t._v(" "),a("th",[t._v("特点")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("聚集索引(Clustered Index)")]),t._v(" "),a("td",[t._v("将数据存储与索引放一块，索引结构的叶子节点保存了行数据")]),t._v(" "),a("td",[t._v("必须有，而且只有一个")])]),t._v(" "),a("tr",[a("td",[t._v("二级索引(Secondary Index)")]),t._v(" "),a("td",[t._v("将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键")]),t._v(" "),a("td",[t._v("可以存在多个")])])])]),t._v(" "),a("p",[t._v("聚集索引选取规则:")]),t._v(" "),a("ul",[a("li",[t._v("如果存在主键，主键索引就是聚集索引。")]),t._v(" "),a("li",[t._v("如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。")]),t._v(" "),a("li",[t._v("如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。")])]),t._v(" "),a("p",[t._v("聚集索引和二级索引的具体结构如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420211226994.png",alt:"image-20220420211226994"}})]),t._v(" "),a("ul",[a("li",[t._v("聚集索引的叶子节点下挂的是这一行的数据 。")]),t._v(" "),a("li",[t._v("二级索引的叶子节点下挂的是该字段值对应的主键值")])]),t._v(" "),a("h4",{attrs:{id:"思考题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思考题"}},[t._v("#")]),t._v(" 思考题")]),t._v(" "),a("p",[t._v("1. 以下 SQL 语句，哪个执行效率高？为什么？")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("select * from user where id = 10;\nselect * from user where name = 'Arm';\n-- 备注：id为主键，name字段创建的有索引\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("答：第一条语句，因为第二条需要回表查询，相当于两个步骤。")]),t._v(" "),a("p",[t._v("2. InnoDB 主键索引的 B+Tree 高度为多少？")]),t._v(" "),a("p",[t._v("答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.\n可得公式："),a("code",[t._v("n * 8 + (n + 1) * 6 = 16 * 1024")]),t._v("，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。")]),t._v(" "),a("p",[t._v("如果树的高度为2，那么他能存储的数据量大概为："),a("code",[t._v("1171 * 16 = 18736")]),t._v("；\n如果树的高度为3，那么他能存储的数据量大概为："),a("code",[t._v("1171 * 1171 * 16 = 21939856")]),t._v("。")]),t._v(" "),a("p",[t._v("另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。")]),t._v(" "),a("h2",{attrs:{id:"_7-3-索引语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-索引语法"}},[t._v("#")]),t._v(" 7.3 索引语法")]),t._v(" "),a("p",[t._v("(1)创建索引：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (\nindex_col_name,... ) ;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引")]),t._v(" "),a("p",[t._v("验证：创建唯一约束时，会自动的创建唯一索引")]),t._v(" "),a("p",[a("img",{attrs:{src:"upload%5Cimage-20220420214946907.png",alt:"image-20220420214946907"}})]),t._v(" "),a("p",[t._v("(2)查看索引：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SHOW INDEX FROM table_name;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("(3)删除索引：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DROP INDEX index_name ON table_name;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("案例：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引\ncreate index idx_user_name on tb_user(name);\n-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引\ncreate unique index idx_user_phone on tb_user (phone);\n-- 为profession, age, status创建联合索引\ncreate index idx_user_pro_age_stat on tb_user(profession, age, status);\n-- 为email建立合适的索引来提升查询效率\ncreate index idx_user_email on tb_user(email);\n\n-- 删除索引\ndrop index idx_user_email on tb_user;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("h2",{attrs:{id:"_7-4-sql性能分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-sql性能分析"}},[t._v("#")]),t._v(" 7.4 SQL性能分析")]),t._v(" "),a("h3",{attrs:{id:"_7-4-1-sql执行频率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-1-sql执行频率"}},[t._v("#")]),t._v(" 7.4.1  SQL执行频率")]),t._v(" "),a("p",[t._v("MySQL 客户端连接成功后，通过 show [session|global] status 命令可以提供服务器状态信息。通过如下指令，可以查看当前数据库的INSERT、UPDATE、DELETE、SELECT的访问频次：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- session 是查看当前会话 ;\n-- global 是查询全局数据 ;\nSHOW GLOBAL STATUS LIKE 'Com_______';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"http://img.aismy.top/img/image-20220420215611526.png",alt:"image-20220420215611526"}}),t._v(" "),a("blockquote",[a("p",[t._v("通过上述指令，我们可以查看到当前数据库到底是以查询为主，还是以增删改为主，从而为数据\n库优化提供参考依据。 如果是以增删改为主，我们可以考虑不对其进行索引的优化。 如果是以\n查询为主，那么就要考虑对数据库的索引进行优化了。")])]),t._v(" "),a("p",[t._v("那假如说是以查询为主，我们又该如何定位针对于那些查询语句进行优化呢？我们可以借助于慢查询日志。")]),t._v(" "),a("h3",{attrs:{id:"_7-4-2-慢查询日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-2-慢查询日志"}},[t._v("#")]),t._v(" 7.4.2 慢查询日志")]),t._v(" "),a("p",[t._v("慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。\nMySQL的慢查询日志默认没有开启，我们可以查看一下系统变量 slow_query_log。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420220143736.png",alt:"image-20220420220143736"}})]),t._v(" "),a("p",[t._v("如果要开启慢查询日志，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 开启MySQL慢日志查询开关\nslow_query_log=1\n# 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志\nlong_query_time=2\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("配置完毕之后，通过以下指令重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息")]),t._v(" "),a("p",[t._v("/var/lib/mysql/localhost-slow.log")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("systemctl restart mysqld \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("然后，再次查看开关情况，慢查询日志就已经打开了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420220312698.png",alt:"image-20220420220312698"}})]),t._v(" "),a("p",[t._v("测试：")]),t._v(" "),a("p",[t._v("执行如下SQL语句 ：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("select * from tb_user; -- 这条SQL执行效率比较高, 执行耗时 0.00sec\nselect count(*) from tb_sku; -- 由于tb_sku表中, 预先存入了1000w的记录, count一次,耗时\n13.35sec\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420220559636.png",alt:"image-20220420220559636"}})]),t._v(" "),a("p",[t._v("检查慢查询日志 ：")]),t._v(" "),a("p",[t._v("最终我们发现，在慢查询日志中，只会记录执行时间超多我们预设时间（2s）的SQL，执行较快的SQL\n是不会记录的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420220616386.png",alt:"image-20220420220616386"}})]),t._v(" "),a("p",[t._v("那这样，通过慢查询日志，就可以定位出执行效率比较低的SQL，从而有针对性的进行优化。")]),t._v(" "),a("h3",{attrs:{id:"_7-4-3-profile详情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-3-profile详情"}},[t._v("#")]),t._v(" 7.4.3 profile详情")]),t._v(" "),a("p",[t._v("show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。通过have_profiling参数，能够看到当前MySQL是否支持profile操作：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT @@have_profiling ; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420220910979.png",alt:"image-20220420220910979"}})]),t._v(" "),a("p",[t._v("可以看到，当前MySQL是支持 profile操作的，但是开关是关闭的。可以通过set语句在session/global级别开启profiling：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SET profiling = 1; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("开关已经打开了，接下来，我们所执行的SQL语句，都会被MySQL记录，并记录执行时间消耗到哪儿去了。 我们直接执行如下的SQL语句：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("select * from tb_user;\nselect * from tb_user where id = 1;\nselect * from tb_user where name = '白起';\nselect count(*) from tb_sku;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("执行一系列的业务SQL的操作，然后通过如下指令查看指令的执行耗时：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 查看每一条SQL的耗时基本情况\nshow profiles;\n-- 查看指定query_id的SQL语句各个阶段的耗时情况\nshow profile for query query_id;\n-- 查看指定query_id的SQL语句CPU的使用情况\nshow profile cpu for query query_id;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("查看每一条SQL的耗时情况:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420221716561.png",alt:"image-20220420221716561"}})]),t._v(" "),a("p",[t._v("查看指定SQL各个阶段的耗时情况 :")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420221727616.png",alt:"image-20220420221727616"}})]),t._v(" "),a("h3",{attrs:{id:"_7-4-4-explain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-4-explain"}},[t._v("#")]),t._v(" 7.4.4  explain")]),t._v(" "),a("p",[t._v("EXPLAIN 或者 DESC命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 直接在select语句之前加上关键字 explain / desc\nEXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件 ;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220420221937223.png",alt:"image-20220420221937223"}})]),t._v(" "),a("p",[t._v("Explain 执行计划中各个字段的含义:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字段")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("id")]),t._v(" "),a("td",[t._v("select查询的序列号，表示查询中执行select子句或者是操作表的顺序(id相同，执行顺序从上到下；id不同，值越大，越先执行)。")])]),t._v(" "),a("tr",[a("td",[t._v("select_type")]),t._v(" "),a("td",[t._v("表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等")])]),t._v(" "),a("tr",[a("td",[t._v("type")]),t._v(" "),a("td",[t._v("表示连接类型，性能由好到差的连接类型为NULL、system、const、eq_ref、ref、range、 index、all 。")])]),t._v(" "),a("tr",[a("td",[t._v("possible_key")]),t._v(" "),a("td",[t._v("显示可能应用在这张表上的索引，一个或多个。")])]),t._v(" "),a("tr",[a("td",[t._v("key")]),t._v(" "),a("td",[t._v("实际使用的索引，如果为NULL，则没有使用索引。")])]),t._v(" "),a("tr",[a("td",[t._v("key_len")]),t._v(" "),a("td",[t._v("表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。")])]),t._v(" "),a("tr",[a("td",[t._v("rows")]),t._v(" "),a("td",[t._v("MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值，可能并不总是准确的。")])]),t._v(" "),a("tr",[a("td",[t._v("filtered")]),t._v(" "),a("td",[t._v("表示返回结果的行数占需读取行数的百分比， filtered 的值越大越好")])])])]),t._v(" "),a("h2",{attrs:{id:"_7-5-索引使用规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-索引使用规则"}},[t._v("#")]),t._v(" 7.5 索引使用规则")]),t._v(" "),a("h3",{attrs:{id:"_7-5-1最左前缀法则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-1最左前缀法则"}},[t._v("#")]),t._v(" 7.5.1最左前缀法则")]),t._v(" "),a("p",[t._v("如果索引关联了多列（联合索引），要遵守最左前缀法则")]),t._v(" "),a("p",[t._v("对于最左前缀法则指的是，查询时，最左变的列，"),a("code",[t._v("必须存在")]),t._v("，否则索引全部失效。\n而且中间不能跳过某一列，否则该列后面的字段索引将失效。")]),t._v(" "),a("blockquote",[a("p",[t._v("注意 ： 最左前缀法则中指的最左边的列，是指在查询时，联合索引的最左边的字段(即是第一个字段)必须存在，与我们编写SQL时，条件编写的先后顺序无关。")])]),t._v(" "),a("h3",{attrs:{id:"_7-5-2-范围查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-2-范围查询"}},[t._v("#")]),t._v(" 7.5.2 范围查询")]),t._v(" "),a("p",[t._v("联合索引中，出现范围查询（<, >），范围查询右侧的列索引失效。")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("explain select * from tb_user where profession = '软件工程' and age > 30 and status= '0';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("范围查询右边的status字段索引失效")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("explain select * from tb_user where profession = '软件工程' and age >= 30 and status = '0';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("当范围查询使用>= 或 <= 时，走联合索引了")]),t._v(" "),a("blockquote",[a("p",[t._v("所以，在业务允许的情况下，尽可能的使用类似于 >= 或 <= 这类的范围查询，而避免使用 > 或 <")])]),t._v(" "),a("h2",{attrs:{id:"_7-6-索引失效情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-索引失效情况"}},[t._v("#")]),t._v(" 7.6 索引失效情况")]),t._v(" "),a("h3",{attrs:{id:"_7-6-1-索引列运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-1-索引列运算"}},[t._v("#")]),t._v(" 7.6.1 索引列运算")]),t._v(" "),a("p",[t._v("在索引列上进行运算操作，索引将失效。")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("explain select * from tb_user where substring(phone, 10, 2) = '15';\n#phone列上有索引，但因为对其进行了运算操作，索引失效\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421091624779.png",alt:"image-20220421091624779"}})]),t._v(" "),a("h3",{attrs:{id:"_7-6-2-字符串不加引号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-2-字符串不加引号"}},[t._v("#")]),t._v(" 7.6.2 字符串不加引号")]),t._v(" "),a("p",[t._v("字符串类型字段使用时，不加引号，索引将失效。")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("explain select * from tb_user where phone = 17799990015;\n#此处phone的值没有加引号，索引失效\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421091812832.png",alt:"image-20220421091812832"}})]),t._v(" "),a("blockquote",[a("p",[t._v("字符串不加单引号，对于查询结果，没什么影响，但是数据库存在隐式类型转换，索引将失效。")])]),t._v(" "),a("h3",{attrs:{id:"_7-6-3-模糊查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-3-模糊查询"}},[t._v("#")]),t._v(" 7.6.3 模糊查询")]),t._v(" "),a("p",[t._v("如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。\n由于下面查询语句中，都是根据profession字段查询，符合最左前缀法则，联合索引是可以生效的，\n我们主要看一下，模糊查询时，%加在关键字之前，和加在关键字之后的影响。")]),t._v(" "),a("p",[t._v("模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("explain select * from tb_user where phone like '%14';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421092028724.png",alt:"image-20220421092028724"}})]),t._v(" "),a("p",[a("strong",[t._v("前后都有 % 也会失效")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421092111692.png",alt:"image-20220421092111692"}})]),t._v(" "),a("h3",{attrs:{id:"_7-6-3-or连接条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-3-or连接条件"}},[t._v("#")]),t._v(" 7.6.3 or连接条件")]),t._v(" "),a("p",[t._v("用 or 分割开的条件，如果or其中一个条件的列没有索引，那么涉及的索引都不会被用到。")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("explain select * from tb_user where phone like '14%' or age=22;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421093421756.png",alt:"image-20220421093421756"}})]),t._v(" "),a("p",[t._v("如上图所示，可能用到索引phone，但最终没有用到索引。phone有索引，但是age字段没有索引，因此phone索引也会失效。")]),t._v(" "),a("p",[t._v("给age字段添加索引：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("create index age on tb_user(age);\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421093524890.png",alt:"image-20220421093524890"}})]),t._v(" "),a("p",[t._v("然后再次执行刚才的查询语句：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421093559488.png",alt:"image-20220421093559488"}})]),t._v(" "),a("p",[t._v("可见，age字段添加索引后，改查询语句使用了两个索引。由此验证了:")]),t._v(" "),a("blockquote",[a("p",[t._v("用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。")])]),t._v(" "),a("h3",{attrs:{id:"_7-6-4-数据分布影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-4-数据分布影响"}},[t._v("#")]),t._v(" 7.6.4 数据分布影响")]),t._v(" "),a("p",[t._v("如果MySQL评估使用索引比全表更慢，则不使用索引。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421094100956.png",alt:"image-20220421094100956"}})]),t._v(" "),a("p",[t._v("测试的数据库中age字段最小为10")]),t._v(" "),a("p",[t._v("经过测试我们发现，相同的SQL语句，只是传入的字段值不同，最终的执行计划也完全不一样，这是为\n什么呢？\n就是因为MySQL在查询时，会评估使用索引的效率与走全表扫描的效率，如果走全表扫描更快，则放弃索引，走全表扫描。 因为索引是用来索引少量数据的，如果通过索引查询返回大批量的数据，则还不如走全表扫描来的快，此时索引就会失效。因此当age范围越来越大，返回的数据越来越多，当到达一定阙值时，索引失效。")]),t._v(" "),a("blockquote",[a("p",[t._v("结论：当索引查询返回大批量数据时，此时数据库评估使用索引的效率比全表扫描慢，索引失效。")])]),t._v(" "),a("blockquote",[a("p",[t._v("is null 、is not null是否走索引，得具体情况具体分析（数据库中数据分布），并不是固定的。")])]),t._v(" "),a("h2",{attrs:{id:"_7-7-sql-提示-指定要使用的索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-sql-提示-指定要使用的索引"}},[t._v("#")]),t._v(" 7.7 SQL 提示(指定要使用的索引)")]),t._v(" "),a("p",[t._v("先来看一下数据库索引情况：")]),t._v(" "),a("p",[t._v("name字段，有一个单列索引，还有一个name和phone的联合索引")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421095025358.png",alt:"image-20220421095025358"}})]),t._v(" "),a("p",[t._v("那么再进行关于name字段的查询语句时，会使用那个索引呢？")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" explain select * from tb_user where name='蔡强';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421095404077.png",alt:"image-20220421095404077"}})]),t._v(" "),a("p",[t._v("分析上图：可能使用的索引：name和name_phone,但最终使用了name单列索引这是MySQL自动选择的结果。\n那么，我们能不能在查询的时候，自己来指定使用哪个索引呢？ 答案是肯定的，此时就可以借助于\nMySQL的SQL提示来完成。")]),t._v(" "),a("blockquote",[a("p",[t._v("SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优\n化操作的目的。")])]),t._v(" "),a("p",[t._v("(1) "),a("code",[t._v("use index")]),t._v("： 建议MySQL使用哪一个索引完成此次查询（仅仅是建议，mysql内部还会再次进行评估）。")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("explain select * from tb_user use index(name_phone) where name='蔡强';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421095847963.png",alt:"image-20220421095847963"}})]),t._v(" "),a("p",[t._v("测试可见，此次使用的索引为我们所指定的索引")]),t._v(" "),a("p",[t._v("(2) "),a("code",[t._v("ignore index")]),t._v("： 忽略指定的索引。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("explain select * from tb_user  ignore index(name_phone) where name='蔡强';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421100321775.png",alt:"image-20220421100321775"}})]),t._v(" "),a("p",[t._v("测试可见，此次不在使用name_phone，而是使用另一个name索引")]),t._v(" "),a("p",[t._v("(3)\t"),a("code",[t._v("force index")]),t._v(" ： 强制使用索引。")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("explain select * from tb_user force  index(name_phone) where name='蔡强';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421100534842.png",alt:"image-20220421100534842"}})]),t._v(" "),a("blockquote",[a("p",[t._v("use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。")])]),t._v(" "),a("h2",{attrs:{id:"_7-8-覆盖索引-回表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-覆盖索引-回表查询"}},[t._v("#")]),t._v(" 7.8 覆盖索引&回表查询")]),t._v(" "),a("p",[t._v("尽量使用覆盖索引，减少select *。 那么什么是覆盖索引呢？")]),t._v(" "),a("blockquote",[a("p",[t._v("覆盖索引是指 查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到 。")])]),t._v(" "),a("p",[t._v("下面进行测试，执行几个查询语句")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("explain select id, profession from tb_user where profession = '软件工程' and age =\n31 and status = '0' ;\nexplain select id,profession,age, status from tb_user where profession = '软件工程'\nand age = 31 and status = '0' ;\nexplain select id,profession,age, status, name from tb_user where profession = '软\n件工程' and age = 31 and status = '0' ;\nexplain select * from tb_user where profession = '软件工程' and age = 31 and status\n= '0';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421110803133.png",alt:"image-20220421110803133"}})]),t._v(" "),a("p",[t._v("从上述的执行计划我们可以看到，这四条SQL语句的执行计划前面所有的指标都是一样的，看不出来差异。但是此时，我们主要关注的是后面的Extra，前面两天SQL的结果为 Using where; UsingIndex ; 而后面两条SQL的结果为: Using index condition 。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421110827663.png",alt:"image-20220421110827663"}})]),t._v(" "),a("p",[t._v("因为，在tb_user表中有一个联合索引 idx_user_pro_age_sta，该索引关联了三个字段profession、age、status，而这个索引也是一个二级索引，所以叶子节点下面挂的是这一行的主键id。 所以当我们查询返回的数据在 id、profession、age、status 之中，则直接走二级索引直接返回数据了。 如果超出这个范围，就需要拿到主键id，再去扫描聚集索引，再获取额外的数据了，这个过程就是"),a("code",[t._v("回表")]),t._v("。 而我们如果一直使用"),a("code",[t._v("select *")]),t._v("查询返回所有字段值，很容易就会造成回表")]),t._v(" "),a("p",[t._v("所以尽量不要用"),a("code",[t._v("select *")]),t._v("，容易出现回表查询，降低效率，除非有联合索引包含了所有字段")]),t._v(" "),a("blockquote",[a("p",[t._v("面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：\n"),a("code",[t._v("select id, username, password from tb_user where username='itcast';")])]),t._v(" "),a("p",[t._v("解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引")])]),t._v(" "),a("h2",{attrs:{id:"_7-9-前缀索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-9-前缀索引"}},[t._v("#")]),t._v(" 7.9 前缀索引")]),t._v(" "),a("blockquote",[a("p",[t._v("当字段类型为字符串（"),a("code",[t._v("varchar，text，longtext")]),t._v("等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO， 影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。")])]),t._v(" "),a("p",[a("strong",[t._v("语法：")])]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("create index idx_xxxx on table_name(columnn(n));\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("strong",[t._v("示例:")])]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#为tb_user表的email字段，建立长度为5的前缀索引。\ncreate index email on tb_user(email(5));\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421111405236.png",alt:"image-20220421111405236"}})]),t._v(" "),a("p",[t._v("**前缀长度：**可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。\n求选择性公式：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("select count(distinct email) / count(*) from tb_user;\nselect count(distinct substring(email, 1, 5)) / count(*) from tb_user;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421111606714.png",alt:"image-20220421111606714"}})]),t._v(" "),a("p",[t._v("show index 里面的sub_part可以看到接取的长度")]),t._v(" "),a("h2",{attrs:{id:"_7-10-单列索引-联合索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-单列索引-联合索引"}},[t._v("#")]),t._v(" 7.10 单列索引&联合索引")]),t._v(" "),a("ul",[a("li",[t._v("单列索引：即一个索引只包含单个列")]),t._v(" "),a("li",[t._v("联合索引：即一个索引包含了多个列")])]),t._v(" "),a("p",[t._v("在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。")]),t._v(" "),a("blockquote",[a("p",[t._v("注意事项")]),t._v(" "),a("ul",[a("li",[t._v("多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询")])])]),t._v(" "),a("h2",{attrs:{id:"_7-11-设计原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-11-设计原则"}},[t._v("#")]),t._v(" 7.11 设计原则")]),t._v(" "),a("ol",[a("li",[t._v("针对于数据量较大，且查询比较频繁的表建立索引")]),t._v(" "),a("li",[t._v("针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引")]),t._v(" "),a("li",[t._v("尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高")]),t._v(" "),a("li",[t._v("如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引")]),t._v(" "),a("li",[t._v("尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率")]),t._v(" "),a("li",[t._v("要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率")]),t._v(" "),a("li",[t._v("如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询")])]),t._v(" "),a("h1",{attrs:{id:"八、sql-优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、sql-优化"}},[t._v("#")]),t._v(" 八、SQL 优化")]),t._v(" "),a("h2",{attrs:{id:"_8-1-插入数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-插入数据"}},[t._v("#")]),t._v(" 8.1 插入数据")]),t._v(" "),a("ol",[a("li",[t._v("采用批量插入（一次插入的数据不建议超过1000条）")])]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Insert into tb_test values(1,'Tom'),(2,'Cat'),(3,'Jerry'); \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("手动提交事务")])]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("start transaction;\ninsert into tb_test values(1,'Tom'),(2,'Cat'),(3,'Jerry');\ninsert into tb_test values(4,'Tom'),(5,'Cat'),(6,'Jerry');\ninsert into tb_test values(7,'Tom'),(8,'Cat'),(9,'Jerry');\ncommit;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("主键顺序插入")])]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("主键乱序插入 : 8 1 9 21 88 2 4 15 89 5 7 3\n主键顺序插入 : 1 2 3 4 5 7 8 9 15 21 88 89\n#主键顺序插入，性能要高于乱序插入。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("大批量插入使用load指令：")])]),t._v(" "),a("p",[t._v("如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421113145727.png",alt:"image-20220421113145727"}})]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）\nmysql --local-infile -u root -p\n# 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关\nset global local_infile = 1;\nselect @@local_infile;\n# 执行load指令将准备好的数据，加载到表结构中\nload data local infile '/root/sql1.log' into table 'tb_user' fields terminated by ',' lines terminated by '\\n';\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h2",{attrs:{id:"_8-2-主键优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-主键优化"}},[t._v("#")]),t._v(" 8.2 主键优化")]),t._v(" "),a("p",[t._v("主键顺序插入的性能是要高于乱序插入的，那么主键又该如何设计？")]),t._v(" "),a("h3",{attrs:{id:"_8-2-1-数据组织方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-1-数据组织方式"}},[t._v("#")]),t._v(" 8.2.1 数据组织方式")]),t._v(" "),a("p",[t._v("在InnoDB存储引擎中，"),a("strong",[t._v("表数据都是根据主键顺序组织存放的")]),t._v("，这种存储方式的表称为索引组织表（Index organized table, IOT）")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421113718186.png",alt:"image-20220421113718186"}})]),t._v(" "),a("p",[t._v("行数据，都是存储在聚集索引的叶子节点上的。而我们之前也讲解过InnoDB的逻辑结构图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421113733663.png",alt:"image-20220421113733663"}})]),t._v(" "),a("p",[t._v("在InnoDB引擎中，数据行是记录在逻辑结构 page 页中的，而每一个页的大小是固定的，默认16K。\n那也就意味着， 一个页中所存储的行也是有限的，如果插入的数据行row在该页存储不下，将会存储\n到下一个页中，页与页之间会通过指针连接。")]),t._v(" "),a("h3",{attrs:{id:"_8-2-2-页分裂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-2-页分裂"}},[t._v("#")]),t._v(" 8.2.2 页分裂：")]),t._v(" "),a("p",[t._v("页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。")]),t._v(" "),a("p",[t._v("A. 主键顺序插入效果")]),t._v(" "),a("p",[t._v("①. 从磁盘中申请页， 主键顺序插入")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421113954533.png",alt:"image-20220421113954533"}})]),t._v(" "),a("p",[t._v("②. 第一个页没有满，继续往第一页插入")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114008034.png",alt:"image-20220421114008034"}})]),t._v(" "),a("p",[t._v("③. 当第一个也写满之后，再写入第二个页，页与页之间会通过指针连接")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114023099.png",alt:"image-20220421114023099"}})]),t._v(" "),a("p",[t._v("④. 当第二页写满了，再往第三页写入")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114046733.png",alt:"image-20220421114046733"}})]),t._v(" "),a("p",[t._v("B. 主键乱序插入效果")]),t._v(" "),a("p",[t._v("①. 加入1#,2#页都已经写满了，存放了如图所示的数据")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114116492.png",alt:"image-20220421114116492"}})]),t._v(" "),a("p",[t._v("②. 此时再插入id为50的记录，我们来看看会发生什么现象")]),t._v(" "),a("p",[t._v("会再次开启一个页，写入新的页中吗？")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114145014.png",alt:"image-20220421114145014"}})]),t._v(" "),a("p",[t._v("不会。因为，索引结构的叶子节点是有顺序的。按照顺序，应该存储在47之后。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114215912.png",alt:"image-20220421114215912"}})]),t._v(" "),a("p",[t._v("但是47所在的1#页，已经写满了，存储不了50对应的数据了。 那么此时会开辟一个新的页 3#。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114238413.png",alt:"image-20220421114238413"}})]),t._v(" "),a("p",[t._v("但是并不会直接将50存入3#页，而是会将1#页后一半的数据，移动到3#页，然后在3#页，插入50。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114250124.png",alt:"image-20220421114250124"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114315722.png",alt:"image-20220421114315722"}})]),t._v(" "),a("p",[t._v("移动数据，并插入id为50的数据之后，那么此时，这三个页之间的数据顺序是有问题的。 1#的下一个\n页，应该是3#， 3#的下一个页是2#。 所以，此时，需要重新设置链表指针。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114333399.png",alt:"image-20220421114333399"}})]),t._v(" "),a("p",[t._v('上述的这种现象，称之为 "页分裂"，是比较耗费性能的操作。')]),t._v(" "),a("h3",{attrs:{id:"_8-2-3-页合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-3-页合并"}},[t._v("#")]),t._v(" 8.2.3 页合并：")]),t._v(" "),a("p",[t._v("目前表中已有数据的索引结构(叶子节点)如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114459974.png",alt:"image-20220421114459974"}})]),t._v(" "),a("p",[t._v("当我们对已有数据进行删除时，具体的效果如下:\n当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间\n变得允许被其他记录声明使用。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114521699.png",alt:"image-20220421114521699"}})]),t._v(" "),a("p",[t._v("当我们继续删除2#的数据记录")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114747956.png",alt:"image-20220421114747956"}})]),t._v(" "),a("p",[t._v("当页中删除的记录达到 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前\n或后）看看是否可以将两个页合并以优化空间使用。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114807364.png",alt:"image-20220421114807364"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114814838.png",alt:"image-20220421114814838"}})]),t._v(" "),a("p",[t._v("删除数据，并将页合并之后，再次插入新的数据21，则直接插入3#页")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421114827438.png",alt:"image-20220421114827438"}})]),t._v(" "),a("p",[t._v('这个里面所发生的合并页的这个现象，就称之为 "页合并"。')]),t._v(" "),a("blockquote",[a("p",[t._v("MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定")])]),t._v(" "),a("h3",{attrs:{id:"_8-2-4-主键设计原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-4-主键设计原则"}},[t._v("#")]),t._v(" 8.2.4 主键设计原则：")]),t._v(" "),a("ul",[a("li",[t._v("满足业务需求的情况下，尽量降低主键的长度(长度越小一页中可存入的索引越多)")]),t._v(" "),a("li",[t._v("插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键")]),t._v(" "),a("li",[t._v("尽量不要使用 UUID 做主键或者是其他的自然主键(不连续，容易造成页分裂)，如身份证号")]),t._v(" "),a("li",[t._v("业务操作时，避免对主键的修改")])]),t._v(" "),a("h2",{attrs:{id:"_8-3-order-by优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-order-by优化"}},[t._v("#")]),t._v(" 8.3 order by优化")]),t._v(" "),a("blockquote",[a("p",[t._v("MySQL的排序，有两种方式：")])]),t._v(" "),a("ol",[a("li",[t._v("Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序")]),t._v(" "),a("li",[t._v("Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高")])]),t._v(" "),a("p",[t._v("对于以上的两种排序方式，Using index的性能高，而Using filesort的性能低，我们在优化排序操作时，尽量要优化为 Using index。")]),t._v(" "),a("p",[t._v("如果order by字段全部使用升序排序或者降序排序，则都会走索引")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("EXPLAIN SELECT name FROM `tb_user` ORDER BY `name` ASC ,id ASC\nEXPLAIN SELECT name FROM `tb_user` ORDER BY `name` DESC ,id DESC\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421120241410.png",alt:"image-20220421120241410"}})]),t._v(" "),a("p",[t._v("全部使用升序排序或者降序排序，则都会走索引，因为建立索引时mysql默认为asc，")]),t._v(" "),a("p",[t._v("但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是"),a("code",[t._v("Using index, Using filesort")]),t._v("，如果要优化掉Using filesort，则需要另外再创建一个索引，如："),a("code",[t._v("create index idx_user_age_phone_ad on tb_user(age asc, phone desc);")]),t._v("，此时使用"),a("code",[t._v("select id, age, phone from tb_user order by age asc, phone desc;")]),t._v("会全部走索引")]),t._v(" "),a("p",[t._v("总结：")]),t._v(" "),a("ul",[a("li",[t._v("根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则")]),t._v(" "),a("li",[t._v("尽量使用覆盖索引")]),t._v(" "),a("li",[t._v("多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）")]),t._v(" "),a("li",[t._v("如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）")])]),t._v(" "),a("h2",{attrs:{id:"_8-4-group-by优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-group-by优化"}},[t._v("#")]),t._v(" 8.4 group by优化")]),t._v(" "),a("ul",[a("li",[t._v("在分组操作时，可以通过索引来提高效率")]),t._v(" "),a("li",[t._v("分组操作时，索引的使用也是满足最左前缀法则的")])]),t._v(" "),a("p",[t._v("如索引为"),a("code",[t._v("idx_user_pro_age_stat")]),t._v("，则句式可以是"),a("code",[t._v("select ... where profession... order by age")]),t._v("，这样也符合最左前缀法则")]),t._v(" "),a("h2",{attrs:{id:"_8-5-limit优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-5-limit优化"}},[t._v("#")]),t._v(" 8. 5 limit优化")]),t._v(" "),a("p",[t._v("在数据量比较大时，如果进行limit分页查询，在查询时，越往后，分页查询效率越低。")]),t._v(" "),a("p",[t._v("因为，当在进行分页查询时，如果执行 limit 2000000,10 ，此时需要MySQL排序前2000010 记\n录，仅仅返回 2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大 。")]),t._v(" "),a("p",[t._v("优化思路: 一般分页查询时，通过创建"),a("code",[t._v("覆盖索引")]),t._v("能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化。")]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 此语句耗时很长\nselect * from tb_sku limit 9000000, 10;\n-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询\nselect id from tb_sku order by id limit 9000000, 10;\n-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit\n-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);\n-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度\nexplain select * \nfrom tb_sku t , (select id from tb_sku order by idlimit 2000000,10) a \nwhere t.id = a.id;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h2",{attrs:{id:"_8-6-count优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-6-count优化"}},[t._v("#")]),t._v(" 8.6 count优化")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("select count(*) from tb_user ; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("在之前的测试中，我们发现，如果数据量很大，在执行count操作时，是非常耗时的。")]),t._v(" "),a("ul",[a("li",[t._v("MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；")]),t._v(" "),a("li",[t._v("InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。")])]),t._v(" "),a("p",[t._v("如果说要大幅度提升InnoDB表的count效率，主要的优化思路：")]),t._v(" "),a("p",[a("strong",[t._v("第一种，近似值")])]),t._v(" "),a("p",[t._v("可以使用 show table status 或者 explain 命令来表进行估算。")]),t._v(" "),a("p",[t._v("执行 explain 命令效率是很高的，因为它并不会真正的去查询， rows 字段值就是 explain 命令对表记录的估算值。")]),t._v(" "),a("p",[a("em",[a("strong",[t._v("第二种，额外表保存计数值")])])]),t._v(" "),a("p",[t._v("如果是想精确的获取表的记录总数，我们可以将这个计数值保存到单独的一张计数表中。（或者用redis缓存）")]),t._v(" "),a("p",[t._v("当我们在数据表插入一条记录的同时，将计数表中的计数字段 + 1。也就是说，在新增和删除操作时，我们需要额外维护这个计数表。")]),t._v(" "),a("p",[a("strong",[t._v("count的几种用法：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421121838969.png",alt:"image-20220421121838969"}})]),t._v(" "),a("p",[a("strong",[t._v("count("),a("code",[t._v("\\*")]),t._v(") 其实等于 count("),a("code",[t._v("0")]),t._v(")")]),t._v("，也就是说，当你使用 count("),a("code",[t._v("*")]),t._v(") 时，MySQL 会将 "),a("code",[t._v("*")]),t._v(" 参数转化为参数 0 来处理。")]),t._v(" "),a("p",[t._v("所以，"),a("strong",[t._v("count(*) 执行过程跟 count(1) 执行过程基本一样的")]),t._v("，性能没有什么差异。")]),t._v(" "),a("p",[t._v("而且 MySQL 会对 count(*) 和 count(1) 有个优化，如果有多个二级索引的时候，优化器会使用key_len 最小的二级索引进行扫描。只有当没有二级索引的时候，才会采用主键索引来进行统计。")]),t._v(" "),a("p",[t._v("按效率排序："),a("img",{attrs:{src:"http://img.aismy.top/img/af711033aa3423330d3a4bc6baeb9532.png",alt:"图片"}})]),t._v(" "),a("blockquote",[a("p",[t._v("小结：")]),t._v(" "),a("p",[t._v("count(1)、 count(*)、 count(主键字段)在执行的时候，如果表里存在二级索引，优化器就会选择二级索引进行扫描。")]),t._v(" "),a("p",[t._v("所以，如果要执行 count(1)、 count(*)、 count(主键字段) 时，尽量在数据表上建立二级索引，这样优化器会自动采用 key_len 最小的二级索引进行扫描，相比于扫描主键索引效率会高一些。因为相同数量的二级索引记录可以比聚簇索引记录占用更少的存储空间，所以二级索引树比聚簇索引树小，这样遍历二级索引的 I/O 成本比遍历聚簇索引的 I/O 成本小，因此「优化器」优先选择的是二级索引。")]),t._v(" "),a("p",[t._v("再来，就是不要使用 count(字段) 来统计记录个数，因为它的效率是最差的，会采用全表扫描的方式来统计。如果你非要统计表中该字段不为 NULL 的记录个数，建议给这个字段建立一个二级索引。")])]),t._v(" "),a("h2",{attrs:{id:"_8-7-update优化-避免行锁升级为表锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-update优化-避免行锁升级为表锁"}},[t._v("#")]),t._v(" 8.7 update优化（避免行锁升级为表锁）")]),t._v(" "),a("p",[t._v("InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。")]),t._v(" "),a("p",[t._v("如以下两条语句：\n"),a("code",[t._v("update student set no = '123' where id = 1;")]),t._v("，这句由于id有主键索引，所以只会锁这一行；\n"),a("code",[t._v("update student set no = '123' where name = 'test';")]),t._v("，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引")]),t._v(" "),a("blockquote",[a("p",[t._v("InnoDB的行锁是针对索引加的锁，不是针对记录加的锁 ,并且该索引不能失效，否则会从行锁升级为表锁 。")])]),t._v(" "),a("h1",{attrs:{id:"九、锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、锁"}},[t._v("#")]),t._v(" 九、锁")]),t._v(" "),a("h2",{attrs:{id:"_9-1-、概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-、概述"}},[t._v("#")]),t._v(" 9.1 、概述")]),t._v(" "),a("blockquote",[a("p",[t._v("锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源（CPU、RAM、I/O）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。")])]),t._v(" "),a("p",[t._v("MySQL中的锁，按照锁的粒度分，分为以下三类：")]),t._v(" "),a("ul",[a("li",[t._v("全局锁：锁定数据库中的所有表。")]),t._v(" "),a("li",[t._v("表级锁：每次操作锁住整张表。")]),t._v(" "),a("li",[t._v("行级锁：每次操作锁住对应的行数据。")])]),t._v(" "),a("h2",{attrs:{id:"_9-2-全局锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-全局锁"}},[t._v("#")]),t._v(" 9.2 全局锁")]),t._v(" "),a("p",[t._v("全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语\n句，已经更新操作的事务提交语句都将被阻塞。")]),t._v(" "),a("h3",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),a("p",[t._v("(1)加全局锁")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("flush tables with read lock ; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("(2)释放锁")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("unlock tables ; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),a("p",[t._v("其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整\n性。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421133940071.png",alt:"image-20220421133940071"}})]),t._v(" "),a("p",[t._v("对数据库进行进行逻辑备份之前，先对整个数据库加上全局锁，一旦加了全局锁之后，其他的DDL、\nDML全部都处于阻塞状态，但是可以执行DQL语句，也就是处于只读状态，而数据备份就是查询操作。\n那么数据在进行逻辑备份的过程中，数据库中的数据就是不会发生变化的，这样就保证了数据的一致性\n和完整性。")]),t._v(" "),a("p",[t._v("数据备份:")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mysqldump -uroot –p123456 itcast > itcast.sql \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("p",[t._v("数据库中加全局锁，是一个比较重的操作，存在以下问题：")]),t._v(" "),a("ul",[a("li",[t._v("如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆。")]),t._v(" "),a("li",[t._v("如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导\n致主从延迟。")])]),t._v(" "),a("blockquote",[a("p",[t._v("既然备份数据库数据的时候，使用全局锁会影响业务，那有什么其他方式可以避免？")])]),t._v(" "),a("p",[t._v("有的，如果数据库的引擎支持的事务支持"),a("strong",[t._v("可重复读的隔离级别")]),t._v("，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。")]),t._v(" "),a("p",[t._v("因为在可重复读的隔离级别下，即使其他事务更新了表的数据，也不会影响备份数据库时的 Read View，这就是事务四大特性中的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。")]),t._v(" "),a("p",[t._v("备份数据库的工具是mysqldump，在使用 mysqldump 时加上 "),a("code",[t._v("–single-transaction")]),t._v(" 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。")]),t._v(" "),a("p",[t._v("InnoDB 存储引擎默认的事务隔离级别正是可重复读，因此可以采用这种方式来备份数据库。")]),t._v(" "),a("p",[t._v("但是，对于 MyISAM 这种不支持事务的引擎，在备份数据库时就要使用全局锁的方法。")]),t._v(" "),a("h2",{attrs:{id:"_9-3表级锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-3表级锁"}},[t._v("#")]),t._v(" 9.3表级锁")]),t._v(" "),a("blockquote",[a("p",[t._v("表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中。")])]),t._v(" "),a("p",[t._v("对于表级锁，主要分为以下三类：")]),t._v(" "),a("ul",[a("li",[t._v("表锁")]),t._v(" "),a("li",[t._v("元数据锁（meta data lock，MDL）")]),t._v(" "),a("li",[t._v("意向锁")])]),t._v(" "),a("h3",{attrs:{id:"_9-3-1-表锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-1-表锁"}},[t._v("#")]),t._v(" 9.3.1 表锁")]),t._v(" "),a("p",[t._v("对于表锁，分为两类：")]),t._v(" "),a("ul",[a("li",[t._v("表共享读锁（read lock）也就是读锁")]),t._v(" "),a("li",[t._v("表独占写锁（write lock）也就是写锁")])]),t._v(" "),a("h4",{attrs:{id:"语法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法-2"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),a("ul",[a("li",[t._v("加锁：lock tables 表名... read/write。")]),t._v(" "),a("li",[t._v("释放锁：unlock tables / 客户端断开连接 。")])]),t._v(" "),a("h4",{attrs:{id:"写锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写锁"}},[t._v("#")]),t._v(" "),a("strong",[t._v("写锁")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421142336680.png",alt:"image-20220421142336680"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421141912402.png",alt:"image-20220421141912402"}})]),t._v(" "),a("p",[t._v("在第一个客户端中加锁,此时改客户端与其他客户端均可进行DQL操作")]),t._v(" "),a("p",[t._v("但是都不能进行写操作,本客户端直接进行报错提示,而其他客户端会被阻塞,一直到锁被释放")]),t._v(" "),a("h4",{attrs:{id:"读锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读锁"}},[t._v("#")]),t._v(" 读锁")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421142443323.png",alt:"image-20220421142443323"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421145324043.png",alt:"image-20220421145324043"}})]),t._v(" "),a("h3",{attrs:{id:"_9-3-2-元数据锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-2-元数据锁"}},[t._v("#")]),t._v(" 9.3.2 元数据锁")]),t._v(" "),a("p",[t._v("meta data lock , 元数据锁，简写MDL。")]),t._v(" "),a("blockquote",[a("p",[t._v("MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。")]),t._v(" "),a("p",[t._v("MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。为了避免DML与DDL冲突，保证读写的正确性。")])]),t._v(" "),a("p",[t._v("这里的元数据，大家可以简单理解为就是一张表的表结构。 也就是说，某一张表涉及到未提交的事务\n时，是不能够修改这张表的表结构的。")]),t._v(" "),a("p",[t._v("我们不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：")]),t._v(" "),a("ul",[a("li",[t._v("对一张表进行 CRUD 操作时，加的是 "),a("strong",[t._v("MDL 读锁")]),t._v("；")]),t._v(" "),a("li",[t._v("对一张表做结构变更操作的时候，加的是 "),a("strong",[t._v("MDL 写锁")]),t._v("；")])]),t._v(" "),a("p",[t._v("当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。")]),t._v(" "),a("p",[t._v("反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）。")]),t._v(" "),a("p",[t._v("可以通过下面的SQL，来查看数据库中的元数据锁的情况：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("select object_type,object_schema,object_name,lock_type,lock_duration from\nperformance_schema.metadata_locks ;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"_9-3-3-意向锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-3-意向锁"}},[t._v("#")]),t._v(" 9.3.3 意向锁")]),t._v(" "),a("p",[t._v("为了避免DML在执行时，加的"),a("strong",[t._v("行锁与表锁")]),t._v("的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。")]),t._v(" "),a("ul",[a("li",[t._v("在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；")]),t._v(" "),a("li",[t._v("在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；")])]),t._v(" "),a("p",[a("strong",[t._v("分类:")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("意向共享锁(IS): 由语句select ... lock in share mode添加 。 与 表锁共享锁(read)兼容，与表锁排他锁(write)互斥。")])]),t._v(" "),a("li",[a("p",[t._v("意向排他锁(IX): 由insert、update、delete、select...for update添加 。与表锁共享锁(read)及排他锁(write)都互斥，意向锁之间不会互斥。")])])]),t._v(" "),a("p",[t._v("普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。")]),t._v(" "),a("p",[t._v("不过，select 也是可以对记录加共享锁和独占锁的，具体方式如下：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//先在表上加上意向共享锁，然后对读取的记录加共享锁\nselect ... lock in share mode;\n\n//先表上加上意向独占锁，然后对读取的记录加独占锁\nselect ... for update;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("blockquote",[a("p",[t._v("一旦事务提交了，意向共享锁、意向排他锁，都会自动释放。")])]),t._v(" "),a("p",[t._v("可以通过以下SQL，查看意向锁及行锁的加锁情况：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("select object_schema,object_name,index_name,lock_type,lock_mode,lock_data from performance_schema.data_locks;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("strong",[t._v("演示:")])]),t._v(" "),a("p",[t._v("意向共享锁与表读锁是兼容的")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421152324657.png",alt:"image-20220421152324657"}})]),t._v(" "),a("p",[t._v("意向排他锁与表读锁、写锁都是互斥的")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421152729191.png",alt:"image-20220421152729191"}})]),t._v(" "),a("p",[a("strong",[t._v("意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（*lock tables ... read*）和独占表锁（*lock tables ... write*）发生冲突。")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。")]),t._v(" "),a("p",[t._v("那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录。")]),t._v(" "),a("p",[t._v("所以，"),a("strong",[t._v("意向锁的目的是为了快速判断表里是否有记录被加锁")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"_9-4-行级锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-行级锁"}},[t._v("#")]),t._v(" 9.4 行级锁")]),t._v(" "),a("p",[t._v("行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。\nInnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的\n锁。对于行级锁，主要分为以下三类：")]),t._v(" "),a("ul",[a("li",[t._v("行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete。在\nRC、RR隔离级别下都支持。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421153119819.png",alt:"image-20220421153119819"}})]),t._v(" "),a("ul",[a("li",[t._v("间隙锁（Gap Lock）：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事\n务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421153125604.png",alt:"image-20220421153125604"}})]),t._v(" "),a("ul",[a("li",[t._v("临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。\n在RR隔离级别下支持。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421153130647.png",alt:"image-20220421153130647"}})]),t._v(" "),a("h3",{attrs:{id:"_9-4-1-记录锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-1-记录锁"}},[t._v("#")]),t._v(" 9.4.1 记录锁")]),t._v(" "),a("p",[t._v("InnoDB实现了以下两种类型的行锁：")]),t._v(" "),a("ul",[a("li",[t._v("共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。")]),t._v(" "),a("li",[t._v("排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他\n锁。")])]),t._v(" "),a("p",[t._v("两种行锁的兼容情况如下:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421153322203.png",alt:"image-20220421153322203"}})]),t._v(" "),a("p",[t._v("常见的SQL语句，在执行时，所加的行锁如下：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://img.aismy.top/img/image-20220421153343658.png",alt:"image-20220421153343658"}}),t._v(" "),a("p",[t._v("默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜\n索和索引扫描，以防止幻读。")]),t._v(" "),a("ul",[a("li",[t._v("针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。")]),t._v(" "),a("li",[t._v("InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记\n录加锁，此时 就会升级为表锁。")])]),t._v(" "),a("p",[t._v("可以通过以下SQL，查看意向锁及行锁的加锁情况：")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("select object_schema,object_name,index_name,lock_type,lock_mode,lock_data from\nperformance_schema.data_locks;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("A.普通的select语句，执行时，不会加锁。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421154631966.png",alt:"image-20220421154631966"}})]),t._v(" "),a("p",[t._v("B. select...lock in share mode，加共享锁，共享锁与共享锁之间兼容。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421154532742.png",alt:"image-20220421154532742"}})]),t._v(" "),a("p",[t._v("共享锁与排他锁之间互斥。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421154740206.png",alt:"image-20220421154740206"}})]),t._v(" "),a("p",[t._v("客户端一获取的是id为1这行的共享锁，客户端二是可以获取id为3这行的排它锁的，因为不是同一行\n数据。 而如果客户端二想获取id为1这行的排他锁，会处于阻塞状态，以为共享锁与排他锁之间互\n斥。")]),t._v(" "),a("p",[t._v("C. 排它锁与排他锁之间互斥")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421154812728.png",alt:"image-20220421154812728"}})]),t._v(" "),a("p",[t._v("当客户端一，执行update语句，会为id为1的记录加排他锁； 客户端二，如果也执行update语句更\n新id为1的数据，也要为id为1的数据加排他锁，但是客户端二会处于阻塞状态，因为排他锁之间是互\n斥的。 直到客户端一，把事务提交了，才会把这一行的行锁释放，此时客户端二，解除阻塞")]),t._v(" "),a("p",[t._v("D. 无索引行锁升级为表锁")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421155901982.png",alt:"image-20220421155901982"}})]),t._v(" "),a("p",[t._v("我们在两个客户端中执行如下操作:")]),t._v(" "),a("p",[a("img",{attrs:{src:"upload%5Cimage-20220421155921359.png",alt:"image-20220421155921359"}})]),t._v(" "),a("p",[t._v("在客户端一中，开启事务，并执行update语句，更新name为Lily的数据，也就是id为19的记录 。\n然后在客户端二中更新id为3的记录，却不能直接执行，会处于阻塞状态，为什么呢？\n原因就是因为此时，客户端一，根据name字段进行更新时，name字段是没有索引的，如果没有索引，\n此时行锁会升级为表锁(因为行锁是对索引项加的锁，而name没有索引)。")]),t._v(" "),a("p",[a("strong",[t._v("上述结论存在问题:")])]),t._v(" "),a("blockquote",[a("p",[t._v("重新分析:")]),t._v(" "),a("p",[t._v("InnoDB 存储引擎自己实现了行锁，通过 next-key 锁（记录锁和间隙锁的组合）来锁住记录本身和记录之间的“间隙”，防止其他事务在这个记录之间插入新的记录，从而避免了幻读现象。")]),t._v(" "),a("p",[t._v("当我们执行 update 语句时，实际上是会对记录加独占锁（X 锁）的，如果其他事务对持有独占锁的记录进行修改时是会被阻塞的。另外，这个锁并不是执行完 update 语句就会释放的，而是会等事务结束时才会释放。")]),t._v(" "),a("p",[t._v("在 InnoDB 事务中，对记录加锁带基本单位是 next-key 锁，但是会因为一些条件会退化成间隙锁，或者记录锁。加锁的位置准确的说，锁是加在索引上的而非行上。")]),t._v(" "),a("p",[t._v("在 update 语句的 where 条件使用了唯一索引，那么 next-key 锁会退化成记录锁，也就是只会给一行记录加锁。")]),t._v(" "),a("p",[a("strong",[t._v("在 update 语句的 where 条件没有使用索引，就会全表扫描，于是就会对所有记录加上 next-key 锁（记录锁 + 间隙锁），相当于把整个表锁住了")]),t._v("。")]),t._v(" "),a("p",[t._v("参考博客:https://xiaolincoding.com/mysql/lock/update_index.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%8F%91%E7%94%9F%E8%BF%99%E7%A7%8D%E7%9A%84%E4%BA%8B%E6%95%85")])]),t._v(" "),a("p",[t._v("如何避免上述问题:")]),t._v(" "),a("blockquote",[a("p",[t._v("将 MySQL 里的 "),a("code",[t._v("sql_safe_updates")]),t._v(" 参数设置为 1，开启安全更新模式。")]),t._v(" "),a("p",[t._v("当 sql_safe_updates 设置为 1 时。")]),t._v(" "),a("p",[t._v("update 语句必须满足如下条件之一才能执行成功：")]),t._v(" "),a("ul",[a("li",[t._v("使用 where，并且 where 条件中必须有索引列；")]),t._v(" "),a("li",[t._v("使用 limit；")]),t._v(" "),a("li",[t._v("同时使用 where 和 limit，此时 where 条件中可以没有索引列；")])]),t._v(" "),a("p",[t._v("delete 语句必须满足以下条件能执行成功：")]),t._v(" "),a("ul",[a("li",[t._v("同时使用 where 和 limit，此时 where 条件中可以没有索引列；")])]),t._v(" "),a("p",[t._v("如果 where 条件带上了索引列，但是优化器最终扫描选择的是全表，而不是索引的话，我们可以使用 "),a("code",[t._v("force index([index_name])")]),t._v(" 可以告诉优化器使用哪个索引，以此避免有几率锁全表带来的隐患。")])]),t._v(" "),a("h3",{attrs:{id:"_9-4-2间隙锁-临键锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-2间隙锁-临键锁"}},[t._v("#")]),t._v(" 9.4.2间隙锁&临键锁")]),t._v(" "),a("p",[t._v("默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻读。对记录加锁时，"),a("strong",[t._v("加锁的基本单位是 next-key lock")]),t._v("，但是，next-key lock 在一些场景下会退化成记录锁或间隙锁:")]),t._v(" "),a("ul",[a("li",[t._v("索引上的等值查询(唯一索引)，给不存在的记录加锁时, 优化为间隙锁 。")]),t._v(" "),a("li",[t._v("索引上的等值查询(非唯一普通索引)，向右遍历时最后一个值不满足查询需求时，next-keylock 退化为间隙锁。")]),t._v(" "),a("li",[t._v("索引上的范围查询(唯一索引)--会访问到不满足条件的第一个值为止。")])]),t._v(" "),a("blockquote",[a("p",[t._v("注意：间隙锁唯一目的是防止其他事务插入间隙。间隙锁可以共存，一个事务采用的间隙锁不会\n阻止另一个事务在同一间隙上采用间隙锁。")])]),t._v(" "),a("p",[a("strong",[t._v("演示:")])]),t._v(" "),a("p",[t._v("A. 索引上的等值查询(唯一索引)，给不存在的记录加锁时, 优化为间隙锁 。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421160421352.png",alt:"image-20220421160421352"}})]),t._v(" "),a("blockquote",[a("p",[t._v("所以,在一个线程等值查询一个不存在值时,会将其间隙锁定,以此防止其他线程在该间隙插入,防止幻读;")])]),t._v(" "),a("p",[t._v("B. 索引上的等值查询(非唯一普通索引)，向右遍历时最后一个值不满足查询需求时，next-key\nlock 退化为间隙锁。")]),t._v(" "),a("p",[t._v("我们知道InnoDB的B+树索引，叶子节点是有序的双向链表。 假如，我们要根据这个二级索引查询值\n为18的数据，并加上共享锁，我们是只锁定18这一行就可以了吗？ 并不是，因为是非唯一索引，这个\n结构中可能有多个18的存在，所以，在加锁时会继续往后找，找到一个不满足条件的值（当前案例中也\n就是29）。此时会对18加临键锁，并对29之前的间隙加锁。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421161051342.png",alt:"image-20220421161051342"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421161059346.png",alt:"image-20220421161059346"}})]),t._v(" "),a("p",[t._v("C. 索引上的范围查询(唯一索引)--会访问到不满足条件的第一个值为止。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421162306426.png",alt:"image-20220421162306426"}})]),t._v(" "),a("p",[t._v("查询的条件为id>=19，并添加共享锁。 此时我们可以根据数据库表中现有的数据，将数据分为三个部\n分：")]),t._v(" "),a("p",[t._v("[19]\n(19,25]\n(25,+∞]\n所以数据库数据在加锁是，就是将19加了行锁，25的临键锁（包含25及25之前的间隙），正无穷的临\n键锁(正无穷及之前的间隙)。")]),t._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结:")]),t._v(" "),a("p",[t._v("因为行级锁加锁规则比较复杂，不同的场景，加锁的形式还不同.")]),t._v(" "),a("p",[t._v("对记录加锁时，"),a("strong",[t._v("加锁的基本单位是 next-key lock")]),t._v("，它是由记录锁和间隙锁组合而成的，"),a("strong",[t._v("next-key lock 是前开后闭区间，而间隙锁是前开后开区间")]),t._v("。")]),t._v(" "),a("p",[t._v("但是，next-key lock 在一些场景下会退化成记录锁或间隙锁。")]),t._v(" "),a("h4",{attrs:{id:"唯一索引等值查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#唯一索引等值查询"}},[t._v("#")]),t._v(" 唯一索引等值查询")]),t._v(" "),a("p",[t._v("当我们用唯一索引进行等值查询的时候，查询的记录存不存在，加锁的规则也会不同：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("当查询的记录是存在的，在用「唯一索引进行等值查询」时，next-key lock 会退化成「记录锁」")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("当查询的记录是不存在的，在用「唯一索引进行等值查询」时，next-key lock 会退化成「间隙锁」")]),t._v("。")])]),t._v(" "),a("h4",{attrs:{id:"唯一索引范围查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#唯一索引范围查询"}},[t._v("#")]),t._v(" 唯一索引范围查询")]),t._v(" "),a("p",[t._v("范围查询和等值查询的加锁规则是不同的。")]),t._v(" "),a("p",[t._v("查询的条件为id>=19， 此时我们可以根据数据库表中现有的数据，将数据分为三个部\n分：")]),t._v(" "),a("p",[t._v("[19]\n(19,25]\n(25,+∞]\n所以数据库数据在加锁是，就是将19加了记录锁锁，25的临键锁（包含25及25之前的间隙），正无穷的临\n键锁(正无穷及之前的间隙)。")]),t._v(" "),a("h4",{attrs:{id:"非唯一索引等值查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非唯一索引等值查询"}},[t._v("#")]),t._v(" 非唯一索引等值查询")]),t._v(" "),a("p",[t._v("当我们用非唯一索引进行等值查询的时候，查询的记录存不存在，加锁的规则也会不同：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("当查询的记录存在时，除了会加 next-key lock 外，还额外加间隙锁，也就是会加两把锁")]),t._v("。")])]),t._v(" "),a("p",[t._v("该间隙锁的规则是向下遍历到第一个不符合条件的值才能停止,即相当于锁定记录本身,以及两侧间隙")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("当查询的记录不存在时，只会加 next-key lock，然后会退化为间隙锁，也就是只会加一把锁。")])])]),t._v(" "),a("h4",{attrs:{id:"非唯一索引范围查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非唯一索引范围查询"}},[t._v("#")]),t._v(" 非唯一索引范围查询")]),t._v(" "),a("p",[t._v("非唯一索引和主键索引的范围查询的加锁也有所不同")]),t._v(" "),a("ul",[a("li",[t._v("唯一索引在满足一些条件的时候，next-key lock 退化为间隙锁和记录锁。")]),t._v(" "),a("li",[t._v("非唯一索引范围查询，next-key lock 不会退化为间隙锁和记录锁。")])]),t._v(" "),a("h1",{attrs:{id:"十、-innodb引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十、-innodb引擎"}},[t._v("#")]),t._v(" 十、 InnoDB引擎")]),t._v(" "),a("h2",{attrs:{id:"_10-1-逻辑存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-逻辑存储结构"}},[t._v("#")]),t._v(" 10.1 逻辑存储结构")]),t._v(" "),a("p",[t._v("InnoDB的逻辑存储结构如下图所示:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421170619345.png",alt:"image-20220421170619345"}})]),t._v(" "),a("p",[t._v("(1)表空间")]),t._v(" "),a("p",[t._v("表空间是InnoDB存储引擎逻辑结构的最高层， 如果用户启用了参数 innodb_file_per_table(在\n8.0版本中默认开启) ，则每张表都会有一个表空间（xxx.ibd），一个mysql实例可以对应多个表空\n间，用于存储记录、索引等数据。")]),t._v(" "),a("p",[t._v("(2)段")]),t._v(" "),a("p",[t._v("段，分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段\n（Rollback segment），InnoDB是索引组织表，数据段就是B+树的叶子节点， 索引段即为B+树的\n非叶子节点。段用来管理多个Extent（区）。")]),t._v(" "),a("p",[t._v("(3)区\n区，表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为16K， 即一\n个区中一共有64个连续的页。")]),t._v(" "),a("p",[t._v("(4)页\n页，是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默认为 16KB。为了保证页的连续性，\nInnoDB 存储引擎每次从磁盘申请 4-5 个区。")]),t._v(" "),a("p",[t._v("(5)行\n行，InnoDB 存储引擎数据是按行进行存放的。\n在行中，默认有两个隐藏字段：\nTrx_id：每次对某条记录进行改动时，都会把对应的事务id赋值给trx_id隐藏列。\nRoll_pointer：每次对某条引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个\n隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。")]),t._v(" "),a("h2",{attrs:{id:"_10-2-innodb-是如何存储数据的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-innodb-是如何存储数据的"}},[t._v("#")]),t._v(" 10.2 InnoDB 是如何存储数据的？")]),t._v(" "),a("p",[t._v("记录是按照行来存储的，但是数据库的读取并不以「行」为单位，否则一次读取（也就是一次 I/O 操作）只能处理一行数据，效率会非常低。")]),t._v(" "),a("p",[t._v("因此，"),a("strong",[t._v("InnoDB 的数据是按「数据页」为单位来读写的")]),t._v("，也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。")]),t._v(" "),a("p",[t._v("数据库的 I/O 操作的最小单位是页，"),a("strong",[t._v("InnoDB 数据页的默认大小是 16KB")]),t._v("，意味着数据库每次读写都是以 16KB 为单位的，一次最少从磁盘中读取 16K 的内容到内存中，一次最少把内存中的 16K 内容刷新到磁盘中。")]),t._v(" "),a("p",[t._v("数据页包括七个部分，结构如下图：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://img.aismy.top/img/243b1466779a9e107ae3ef0155604a17.png",alt:"图片"}}),t._v(" "),a("p",[t._v("这 7 个部分的作用如下图：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://img.aismy.top/img/fabd6dadd61a0aa342d7107213955a72.png",alt:"图片"}}),t._v(" "),a("p",[t._v("在 File Header 中有两个指针，分别指向上一个数据页和下一个数据页，连接起来的页相当于一个双向的链表，如下图所示：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://img.aismy.top/img/557d17e05ce90f18591c2305871af665.png",alt:"图片"}}),t._v(" "),a("p",[t._v("采用链表的结构是让数据页之间不需要是物理上的连续的，而是逻辑上的连续。")]),t._v(" "),a("p",[t._v("数据页的主要作用是存储记录，也就是数据库的数据，所以重点说一下数据页中的 User Records 是怎么组织数据的。")]),t._v(" "),a("p",[a("strong",[t._v("数据页中的记录按照「主键」顺序组成单向链表")]),t._v("，单向链表的特点就是插入、删除非常方便，但是检索效率不高，最差的情况下需要遍历链表上的所有节点才能完成检索。")]),t._v(" "),a("p",[t._v("因此，数据页中有一个"),a("strong",[t._v("页目录")]),t._v("，起到记录的索引作用，就像我们书那样，针对书中内容的每个章节设立了一个目录，想看某个章节的时候，可以查看目录，快速找到对应的章节的页数，而数据页中的页目录就是为了能快速找到记录。")]),t._v(" "),a("p",[t._v("那 InnoDB 是如何给记录创建页目录的呢？页目录与记录的关系如下图：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"http://img.aismy.top/img/261011d237bec993821aa198b97ae8ce.png",alt:"图片"}}),t._v(" "),a("p",[t._v("页目录创建的过程如下：")]),t._v(" "),a("ol",[a("li",[t._v("将所有的记录划分成几个组，这些记录包括最小记录和最大记录，但不包括标记为“已删除”的记录；")]),t._v(" "),a("li",[t._v("每个记录组的最后一条记录就是组内最大的那条记录，并且最后一条记录的头信息中会存储该组一共有多少条记录，作为 n_owned 字段（上图中粉红色字段）")]),t._v(" "),a("li",[t._v("页目录用来存储每组最后一条记录的地址偏移量，这些地址偏移量会按照先后顺序存储起来，每组的地址偏移量也被称之为槽（slot），"),a("strong",[t._v("每个槽相当于指针指向了不同组的最后一个记录")]),t._v("。")])]),t._v(" "),a("p",[t._v("从图可以看到，"),a("strong",[t._v("页目录就是由多个槽组成的，槽相当于分组记录的索引")]),t._v("。然后，因为记录是按照「主键值」从小到大排序的，所以"),a("strong",[t._v("我们通过槽查找记录时，可以使用二分法快速定位要查询的记录在哪个槽（哪个记录分组），定位到槽后，再遍历槽内的所有记录，找到对应的记录")]),t._v("，无需从最小记录开始遍历整个页中的记录链表。")]),t._v(" "),a("p",[t._v("以上面那张图举个例子，5 个槽的编号分别为 0，1，2，3，4，我想查找主键为 11 的用户记录：")]),t._v(" "),a("ul",[a("li",[t._v("先二分得出槽中间位是 (0+4)/2=2 ，2号槽里最大的记录为 8。因为 11 > 8，所以需要从 2 号槽后继续搜索记录；")]),t._v(" "),a("li",[t._v("再使用二分搜索出 2 号和 4 槽的中间位是 (2+4)/2= 3，3 号槽里最大的记录为 12。因为 11 < 12，所以主键为 11 的记录在 3 号槽里；")]),t._v(" "),a("li",[t._v("这里有个问题，"),a("strong",[t._v("「槽对应的值都是这个组的主键最大的记录，如何找到组里最小的记录」")]),t._v("？比如槽 3 对应最大主键是 12 的记录，那如何找到最小记录 9。解决办法是：通过槽 3 找到 槽 2 对应的记录，也就是主键为 8 的记录。主键为 8 的记录的下一条记录就是槽 3 当中主键最小的 9 记录，然后开始向下搜索 2 次，定位到主键为 11 的记录，取出该条记录的信息即为我们想要查找的内容。")])]),t._v(" "),a("p",[t._v("看到第三步的时候，可能有的同学会疑问，如果某个槽内的记录很多，然后因为记录都是单向链表串起来的，那这样在槽内查找某个记录的时间复杂度不就是 O(n) 了吗？")]),t._v(" "),a("p",[t._v("这点不用担心，InnoDB 对每个分组中的记录条数都是有规定的，槽内的记录就只有几条：")]),t._v(" "),a("ul",[a("li",[t._v("第一个分组中的记录只能有 1 条记录；")]),t._v(" "),a("li",[t._v("最后一个分组中的记录条数范围只能在 1-8 条之间；")]),t._v(" "),a("li",[t._v("剩下的分组中记录条数范围只能在 4-8 条之间。")])]),t._v(" "),a("blockquote",[a("p",[t._v("来源:https://xiaolincoding.com/mysql/index/page.html#b-%E6%A0%91%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%9F%A5%E8%AF%A2%E7%9A%84")])]),t._v(" "),a("h2",{attrs:{id:"_10-3-架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-架构"}},[t._v("#")]),t._v(" 10.3 架构")]),t._v(" "),a("p",[t._v("MySQL5.5 版本开始，默认使用InnoDB存储引擎，它擅长事务处理，具有崩溃恢复特性，在日常开发\n中使用非常广泛。下面是InnoDB架构图，左侧为内存结构，右侧为磁盘结构。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421172440109.png",alt:"image-20220421172440109"}})]),t._v(" "),a("h3",{attrs:{id:"_10-3-1-内存结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-1-内存结构"}},[t._v("#")]),t._v(" 10.3.1 内存结构")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421172706409.png",alt:"image-20220421172706409"}})]),t._v(" "),a("p",[t._v("在左侧的内存结构中，主要分为这么四大块儿： Buffer Pool、Change Buffer、AdaptiveHash Index、Log Buffer。 接下来介绍一下这四个部分。")]),t._v(" "),a("h4",{attrs:{id:"_10-3-3-1-buffer-pool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-3-1-buffer-pool"}},[t._v("#")]),t._v(" 10.3.3.1 Buffer Pool")]),t._v(" "),a("p",[t._v("InnoDB存储引擎基于磁盘文件存储，访问物理硬盘和在内存中进行访问，速度相差很大，为了尽可能\n弥补这两者之间的I/O效率的差值，就需要把经常使用的数据加载到缓冲池中，避免每次访问都进行磁\n盘I/O。\n在InnoDB的缓冲池中不仅缓存了索引页和数据页，还包含了undo页、插入缓存、自适应哈希索引以及\nInnoDB的锁信息等等。")]),t._v(" "),a("p",[t._v("缓冲池 Buffer Pool，是主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增\n删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频\n率刷新到磁盘，从而减少磁盘IO，加快处理速度。")]),t._v(" "),a("p",[t._v("缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态，将Page分为三种类型：")]),t._v(" "),a("ul",[a("li",[t._v("free page：空闲page，未被使用。")]),t._v(" "),a("li",[t._v("clean page：被使用page，数据没有被修改过。")]),t._v(" "),a("li",[t._v("dirty page：脏页，被使用page，数据被修改过，页中数据与磁盘的数据产生了不一致。")])]),t._v(" "),a("p",[t._v("在专用服务器上，通常将多达80％的物理内存分配给缓冲池 。参数设置："),a("code",[t._v("show variables like 'innodb_buffer_pool_size'")]),t._v(";")]),t._v(" "),a("h4",{attrs:{id:"_10-3-3-2-change-buffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-3-2-change-buffer"}},[t._v("#")]),t._v(" 10.3.3.2 Change Buffer")]),t._v(" "),a("p",[t._v("Change Buffer，更改缓冲区（针对于非唯一二级索引页），在执行DML语句时，如果这些数据Page\n没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区 Change Buffer\n中，在未来数据被读取时，再将数据合并恢复到Buffer Pool中，再将合并后的数据刷新到磁盘中。\nChange Buffer的意义是什么呢?\n先来看一幅图，这个是二级索引的结构图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421173352489.png",alt:"image-20220421173352489"}})]),t._v(" "),a("p",[t._v("与聚集索引不同，二级索引通常是非唯一的，并且以相对随机的顺序插入二级索引。同样，删除和更新\n可能会影响索引树中不相邻的二级索引页，如果每一次都操作磁盘，会造成大量的磁盘IO。有了\nChangeBuffer之后，我们可以在缓冲池中进行合并处理，减少磁盘IO。")]),t._v(" "),a("h4",{attrs:{id:"_10-3-3-3-adaptive-hash-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-3-3-adaptive-hash-index"}},[t._v("#")]),t._v(" 10.3.3.3 Adaptive Hash Index")]),t._v(" "),a("p",[t._v("自适应hash索引，用于优化对Buffer Pool数据的查询。MySQL的innoDB引擎中虽然没有直接支持\nhash索引，但是给我们提供了一个功能就是这个自适应hash索引。因为前面我们讲到过，hash索引在\n进行等值匹配时，一般性能是要高于B+树的，因为hash索引一般只需要一次IO即可，而B+树，可能需\n要几次匹配，所以hash索引的效率要高，但是hash索引又不适合做范围查询、模糊匹配等。\nInnoDB存储引擎会监控对表上各索引页的查询，如果观察到在特定的条件下hash索引可以提升速度，\n则建立hash索引，称之为自适应hash索引。")]),t._v(" "),a("p",[t._v("自适应哈希索引，无需人工干预，是系统根据情况自动完成。\n参数： "),a("code",[t._v("adaptive_hash_index")])]),t._v(" "),a("h4",{attrs:{id:"_10-3-3-4-log-buffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-3-4-log-buffer"}},[t._v("#")]),t._v(" 10.3.3.4 Log Buffer")]),t._v(" "),a("p",[t._v("Log Buffer：日志缓冲区，用来保存要写入到磁盘中的log日志数据（redo log 、undo log），\n默认大小为 16MB，日志缓冲区的日志会定期刷新到磁盘中。如果需要更新、插入或删除许多行的事\n务，增加日志缓冲区的大小可以节省磁盘 I/O。")]),t._v(" "),a("p",[a("strong",[t._v("参数:")]),t._v(" "),a("code",[t._v("innodb_log_buffer_size")]),t._v("：缓冲区大小\n"),a("code",[t._v("innodb_flush_log_at_trx_commit")]),t._v("：日志刷新到磁盘时机，取值主要包含以下三个：")]),t._v(" "),a("ul",[a("li",[t._v("1: 日志在每次事务提交时写入并刷新到磁盘，默认值。")]),t._v(" "),a("li",[t._v("0:每秒将日志写入并刷新到磁盘一次。")]),t._v(" "),a("li",[t._v("2:日志在每次事务提交后写入，并每秒刷新到磁盘一次。")])]),t._v(" "),a("h3",{attrs:{id:"_10-3-2-磁盘结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-2-磁盘结构"}},[t._v("#")]),t._v(" 10.3.2 磁盘结构")]),t._v(" "),a("p",[t._v("接下来，再来看看InnoDB体系结构的右边部分，也就是磁盘结构：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421174317748.png",alt:"image-20220421174317748"}})]),t._v(" "),a("h4",{attrs:{id:"_10-3-2-1-system-tablespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-2-1-system-tablespace"}},[t._v("#")]),t._v(" 10.3.2.1 System Tablespace")]),t._v(" "),a("p",[t._v("系统表空间是更改缓冲区的存储区域。如果表是在系统表空间而不是每个表文件或通用表空间中创建\n的，它也可能包含表和索引数据。(在MySQL5.x版本中还包含InnoDB数据字典、undolog等)")]),t._v(" "),a("p",[t._v("参数："),a("code",[t._v("innodb_data_file_path")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421174502265.png",alt:"image-20220421174502265"}})]),t._v(" "),a("p",[t._v("系统表空间，默认的文件名叫 ibdata1")]),t._v(" "),a("h4",{attrs:{id:"_10-3-2-2-file-per-table-tablespaces"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-2-2-file-per-table-tablespaces"}},[t._v("#")]),t._v(" 10.3.2.2 File-Per-Table Tablespaces")]),t._v(" "),a("p",[t._v("如果开启了"),a("code",[t._v("innodb_file_per_table")]),t._v("开关 ，则每个表的文件表空间包含单个InnoDB表的数据和索\n引 ，并存储在文件系统上的单个数据文件中。\n开关参数："),a("code",[t._v("innodb_file_per_table")]),t._v(" ，该参数默认开启。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421174702241.png",alt:"image-20220421174702241"}})]),t._v(" "),a("p",[t._v("那也就是说，我们每创建一个表，都会产生一个表空间文件，如图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421175158293.png",alt:"image-20220421175158293"}})]),t._v(" "),a("h4",{attrs:{id:"_10-3-2-3-general-tablespaces"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-2-3-general-tablespaces"}},[t._v("#")]),t._v(" 10.3.2.3 General Tablespaces")]),t._v(" "),a("p",[t._v("通用表空间，需要通过 CREATE TABLESPACE 语法创建通用表空间，在创建表时，可以指定该表空\n间。")]),t._v(" "),a("p",[t._v("创建表空间")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE TABLESPACE ts_name ADD DATAFILE 'file_name' ENGINE = engine_name; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("创建表时指定表空间")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE TABLE xxx ... TABLESPACE ts_name; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h4",{attrs:{id:"_10-3-2-4-undo-tablespaces"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-2-4-undo-tablespaces"}},[t._v("#")]),t._v(" 10.3.2.4 Undo Tablespaces")]),t._v(" "),a("p",[t._v("撤销表空间，MySQL实例在初始化时会自动创建两个默认的undo表空间（初始大小16M），用于存储\nundo log日志。")]),t._v(" "),a("h4",{attrs:{id:"_10-3-2-5-temporary-tablespaces"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-2-5-temporary-tablespaces"}},[t._v("#")]),t._v(" 10.3.2.5 Temporary Tablespaces")]),t._v(" "),a("p",[t._v("InnoDB 使用会话临时表空间和全局临时表空间。存储用户创建的临时表等数据。")]),t._v(" "),a("h4",{attrs:{id:"_10-3-2-6-doublewrite-buffer-files"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-2-6-doublewrite-buffer-files"}},[t._v("#")]),t._v(" 10.3.2.6 Doublewrite Buffer Files")]),t._v(" "),a("p",[t._v("双写缓冲区，innoDB引擎将数据页从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件\n中，便于系统异常时恢复数据。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421175424023.png",alt:"image-20220421175424023"}})]),t._v(" "),a("h4",{attrs:{id:"_10-3-2-7-redo-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-2-7-redo-log"}},[t._v("#")]),t._v(" 10.3.2.7 Redo Log")]),t._v(" "),a("p",[t._v("重做日志，是用来实现事务的持久性。该日志文件由两部分组成：重做日志缓冲（redo log\nbuffer）以及重做日志文件（redo log）,前者是在内存中，后者在磁盘中。当事务提交之后会把所\n有修改信息都会存到该日志中, 用于在刷新脏页到磁盘时,发生错误时, 进行数据恢复使用。\n以循环方式写入重做日志文件，涉及两个文件：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421175506670.png",alt:"image-20220421175506670"}})]),t._v(" "),a("p",[t._v("前面我们介绍了InnoDB的内存结构，以及磁盘结构，那么内存中我们所更新的数据，又是如何到磁盘\n中的呢？ 此时，就涉及到一组后台线程，接下来，就来介绍一些InnoDB中涉及到的后台线程。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421175519410.png",alt:"image-20220421175519410"}})]),t._v(" "),a("h3",{attrs:{id:"_10-3-3后台线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-3后台线程"}},[t._v("#")]),t._v(" 10.3.3后台线程")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"http://img.aismy.top/img/image-20220421175630760.png",alt:"image-20220421175630760"}}),t._v(" "),a("p",[t._v("在InnoDB的后台线程中，分为4类，分别是：Master Thread 、IO Thread、Purge Thread、\nPage Cleaner Thread。")]),t._v(" "),a("h4",{attrs:{id:"master-thread"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master-thread"}},[t._v("#")]),t._v(" Master Thread")]),t._v(" "),a("p",[t._v("核心后台线程，负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中, 保持数据的一致性，\n还包括脏页的刷新、合并插入缓存、undo页的回收 。")]),t._v(" "),a("h4",{attrs:{id:"io-thread"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io-thread"}},[t._v("#")]),t._v(" IO Thread")]),t._v(" "),a("p",[t._v("在InnoDB存储引擎中大量使用了AIO来处理IO请求, 这样可以极大地提高数据库的性能，而IO\nThread主要负责这些IO请求的回调。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421175724325.png",alt:"image-20220421175724325"}})]),t._v(" "),a("p",[t._v("我们可以通过以下的这条指令，查看到InnoDB的状态信息，其中就包含IO Thread信息。")]),t._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("show engine innodb status \\G; \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://img.aismy.top/img/image-20220421175935401.png",alt:"image-20220421175935401"}}),t._v(" "),a("h4",{attrs:{id:"purge-thread"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#purge-thread"}},[t._v("#")]),t._v(" Purge Thread")]),t._v(" "),a("p",[t._v("主要用于回收事务已经提交了的undo log，在事务提交之后，undo log可能不用了，就用它来回\n收。")]),t._v(" "),a("h4",{attrs:{id:"page-cleaner-thread"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#page-cleaner-thread"}},[t._v("#")]),t._v(" Page Cleaner Thread")]),t._v(" "),a("p",[t._v("协助 Master Thread 刷新脏页到磁盘的线程，它可以减轻 Master Thread 的工作压力，减少阻\n塞。")]),t._v(" "),a("h2",{attrs:{id:"_10-4-事务原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-事务原理"}},[t._v("#")]),t._v(" 10.4 事务原理")]),t._v(" "),a("h3",{attrs:{id:"_10-4-1-事务基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-1-事务基础"}},[t._v("#")]),t._v(" 10.4.1 事务基础")]),t._v(" "),a("h4",{attrs:{id:"事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[t._v("#")]),t._v(" 事务")]),t._v(" "),a("p",[t._v("事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系\n统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。")]),t._v(" "),a("h4",{attrs:{id:"特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[t._v("#")]),t._v(" 特性")]),t._v(" "),a("ul",[a("li",[t._v("原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。")]),t._v(" "),a("li",[t._v("一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。")]),t._v(" "),a("li",[t._v("隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。")]),t._v(" "),a("li",[t._v("持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。")])]),t._v(" "),a("p",[t._v("那实际上，我们研究事务的原理，就是研究MySQL的InnoDB引擎是如何保证事务的这四大特性的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421180303363.png",alt:"image-20220421180303363"}})]),t._v(" "),a("p",[t._v("而对于这四大特性，实际上分为两个部分。 其中的原子性、一致性、持久化，实际上是由InnoDB中的\n两份日志来保证的，一份是redo log日志，一份是undo log日志。 而隔离性是通过数据库的锁，\n加上MVCC来保证的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421180339878.png",alt:"image-20220421180339878"}})]),t._v(" "),a("h3",{attrs:{id:"_10-4-2-redo-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-2-redo-log"}},[t._v("#")]),t._v(" 10.4.2 redo log")]),t._v(" "),a("p",[t._v("重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。")]),t._v(" "),a("p",[t._v("该日志文件由两部分组成：")]),t._v(" "),a("ul",[a("li",[t._v("重做日志缓冲（redo log buffer）")]),t._v(" "),a("li",[t._v("重做日志文件（redo logfile）")])]),t._v(" "),a("p",[t._v("前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中, 用\n于在刷新脏页到磁盘,发生错误时, 进行数据恢复使用。")]),t._v(" "),a("blockquote",[a("p",[t._v("如果没有redolog，可能会存在什么问题的？ 我们一起来分析一下。")])]),t._v(" "),a("p",[t._v("我们知道，在InnoDB引擎中的内存结构中，主要的内存区域就是缓冲池，在缓冲池中缓存了很多的数\n据页。 当我们在一个事务中，执行多个增删改的操作时，InnoDB引擎会先操作缓冲池中的数据，如果\n缓冲区没有对应的数据，会通过后台线程将磁盘中的数据加载出来，存放在缓冲区中，然后将缓冲池中\n的数据修改，修改后的数据页我们称为脏页。 而脏页则会在一定的时机，通过后台线程刷新到磁盘\n中，从而保证缓冲区与磁盘的数据一致。 而缓冲区的脏页数据并不是实时刷新的，而是一段时间之后\n将缓冲区的数据刷新到磁盘中，假如刷新到磁盘的过程出错了，而提示给用户事务提交成功，而数据却\n没有持久化下来，这就出现问题了，没有保证事务的持久性。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421180603940.png",alt:"image-20220421180603940"}})]),t._v(" "),a("p",[t._v("那么，如何解决上述的问题呢？ 在InnoDB中提供了一份日志 redo log，接下来我们再来分析一\n下，通过redolog如何解决这个问题。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220421180612894.png",alt:"image-20220421180612894"}})]),t._v(" "),a("p",[t._v("有了redolog之后，当对缓冲区的数据进行增删改之后，会首先将操作的数据页的变化，记录在redo log buffer中。在事务提交时，会将redo log buffer中的数据刷新到redo log磁盘文件中。过一段时间之后，如果刷新缓冲区的脏页到磁盘时，发生错误，此时就可以借助于redo log进行数据恢复，这样就保证了事务的持久性。 而如果脏页成功刷新到磁盘 或 或者涉及到的数据已经落盘，此时redolog就没有作用了，就可以删除了，所以存在的两个redolog文件是循环写的。那为什么每一次提交事务，要刷新redo log 到磁盘中呢，而不是直接将buffer pool中的脏页刷新到磁盘呢 ?为在业务操作中，我们操作数据一般都是随机读写磁盘的，而不是顺序读写磁盘。 而redo log在往磁盘文件中写入数据，由于是日志文件，所以都是顺序写的。顺序写的效率，要远大于随机写。 这种先写日志的方式，称之为 WAL（Write-Ahead Logging）。")]),t._v(" "),a("h3",{attrs:{id:"_10-4-3-undo-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-3-undo-log"}},[t._v("#")]),t._v(" 10.4.3 undo log")]),t._v(" "),a("p",[t._v("回滚日志，"),a("strong",[t._v("用于记录数据被修改前的信息")]),t._v(" , 作用包含两个 : 提供回滚(保证事务的原子性) 和\nMVCC(多版本并发控制) 。")]),t._v(" "),a("p",[t._v("undo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undo\nlog中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的\nupdate记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。\nUndo log销毁：undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些\n日志可能还用于MVCC。")]),t._v(" "),a("p",[t._v("Undo log存储：undo log采用段的方式进行管理和记录，存放在前面介绍的 rollback segment\n回滚段中，内部包含1024个undo log segment。")]),t._v(" "),a("h2",{attrs:{id:"_10-5-mvcc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-mvcc"}},[t._v("#")]),t._v(" 10.5 MVCC")]),t._v(" "),a("h3",{attrs:{id:"_10-5-1-基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-1-基本概念"}},[t._v("#")]),t._v(" 10.5.1 基本概念")]),t._v(" "),a("h4",{attrs:{id:"_1-当前读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-当前读"}},[t._v("#")]),t._v(" (1)当前读")]),t._v(" "),a("p",[t._v("读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加\n锁。对于我们日常的操作，如：select ... lock in share mode(共享锁)，select ...for update、update、insert、delete(排他锁)都是一种当前读。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422101425042.png",alt:"image-20220422101425042"}})]),t._v(" "),a("p",[t._v("在测试中我们可以看到，即使是在默认的RR隔离级别下，事务A中依然可以读取到事务B最新提交的内\n容，因为在查询语句后面加上了 lock in share mode 共享锁，此时是当前读操作。当然，当我们\n加排他锁的时候，也是当前读操作。")]),t._v(" "),a("blockquote",[a("p",[t._v("因为要给记录加锁，因此需要读到最新记录，然后为其加锁")])]),t._v(" "),a("h4",{attrs:{id:"_2-快照读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-快照读"}},[t._v("#")]),t._v(" (2)快照读")]),t._v(" "),a("p",[t._v("简单的select（不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，\n不加锁，是非阻塞读。")]),t._v(" "),a("ul",[a("li",[t._v("Read Committed：每次select，都生成一个快照读。")]),t._v(" "),a("li",[t._v("Repeatable Read：开启事务后第一个select语句才是快照读的地方。")]),t._v(" "),a("li",[t._v("Serializable：快照读会退化为当前读。")])]),t._v(" "),a("p",[t._v("注意，执行「开始事务」命令，并不意味着启动了事务。在 MySQL 有两种开启事务的命令，分别是：")]),t._v(" "),a("ul",[a("li",[t._v("第一种：begin/start transaction 命令；")]),t._v(" "),a("li",[t._v("第二种：start transaction with consistent snapshot 命令；")])]),t._v(" "),a("p",[t._v("这两种开启事务的命令，事务的启动时机是不同的：")]),t._v(" "),a("ul",[a("li",[t._v("执行了 begin/start transaction 命令后，并不代表事务启动了。只有在执行这个命令后，执行了增删查改操作的 SQL 语句，才是事务真正启动的时机；")]),t._v(" "),a("li",[t._v("执行了 start transaction with consistent snapshot 命令，就会马上启动事务。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422101846488.png",alt:"image-20220422101846488"}})]),t._v(" "),a("p",[t._v("右边更新事务提交后，然后左边执行快照读操作，可见是可以读到被修改的数据的，验证了开启事务后第一个select语句才是快照读的地方。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422102055399.png",alt:"image-20220422102055399"}})]),t._v(" "),a("p",[t._v("右边客户端再次开启事务，执行更新操作后提交，但是左边读到的依然为第一次select生成的快照读。")]),t._v(" "),a("blockquote",[a("p",[t._v("普通的select是快照读，而在当前默认的RR隔离级别下，开启事务后第一个select语句才是快照读的地方，后面执行相同的select语句都是从快照中获取数据，可能不是当前的最新数据，这样也就保证了可重复读。")])]),t._v(" "),a("h4",{attrs:{id:"_3-mvcc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-mvcc"}},[t._v("#")]),t._v(" (3)MVCC")]),t._v(" "),a("p",[t._v("全称 Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为MySQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo log日志、readView。")]),t._v(" "),a("h3",{attrs:{id:"_10-5-2-隐藏字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-2-隐藏字段"}},[t._v("#")]),t._v(" 10.5.2 隐藏字段")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422102450540.png",alt:"image-20220422102450540"}})]),t._v(" "),a("p",[t._v("当我们创建了上面的这张表，我们在查看表结构的时候，就可以显式的看到这三个字段。 实际上除了\n这三个字段以外，InnoDB还会自动的给我们添加三个隐藏字段及其含义分别是：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422102522949.png",alt:"image-20220422102522949"}})]),t._v(" "),a("p",[t._v("而上述的前两个字段是肯定会添加的， 是否添加最后一个字段DB_ROW_ID，得看当前表有没有主键，\n如果有主键，则不会添加该隐藏字段。")]),t._v(" "),a("h3",{attrs:{id:"_10-5-3-记录版本链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-3-记录版本链表"}},[t._v("#")]),t._v(" 10.5.3 记录版本链表")]),t._v(" "),a("h4",{attrs:{id:"undo-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undo-log"}},[t._v("#")]),t._v(" undo log")]),t._v(" "),a("p",[t._v("回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。而update、delete的时候，产生的undo log日志不仅在回滚时需要，在快照读时也需要，不会立即被删除。")]),t._v(" "),a("h4",{attrs:{id:"版本链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本链"}},[t._v("#")]),t._v(" 版本链")]),t._v(" "),a("p",[t._v("有一张表原始数据为：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422103631089.png",alt:"image-20220422103631089"}})]),t._v(" "),a("blockquote",[a("p",[t._v("DB_TRX_ID : 代表最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID，是\n自增的。\nDB_ROLL_PTR ： 由于这条数据是才插入的，没有被更新过，所以该字段值为null。")])]),t._v(" "),a("p",[t._v("然后，有四个并发事务同时在访问这张表。")]),t._v(" "),a("p",[t._v("A. 第一步")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422103731316.png",alt:"image-20220422103731316"}})]),t._v(" "),a("p",[t._v("当事务2执行第一条修改语句时，会记录undo log日志，记录数据变更之前的样子; 然后更新记录，\n并且记录本次操作的事务ID，回滚指针，回滚指针用来指定如果发生回滚，回滚到哪一个版本。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422103741684.png",alt:"image-20220422103741684"}})]),t._v(" "),a("p",[t._v("B.第二步")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422103753105.png",alt:"image-20220422103753105"}})]),t._v(" "),a("p",[t._v("当事务3执行第一条修改语句时，也会记录undo log日志，记录数据变更之前的样子; 然后更新记\n录，并且记录本次操作的事务ID，回滚指针，回滚指针用来指定如果发生回滚，回滚到哪一个版本。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422103909459.png",alt:"image-20220422103909459"}})]),t._v(" "),a("p",[t._v("C. 第三步")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422103920091.png",alt:"image-20220422103920091"}})]),t._v(" "),a("p",[t._v("当事务4执行第一条修改语句时，也会记录undo log日志，记录数据变更之前的样子; 然后更新记\n录，并且记录本次操作的事务ID，回滚指针，回滚指针用来指定如果发生回滚，回滚到哪一个版本。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422103930681.png",alt:"image-20220422103930681"}})]),t._v(" "),a("blockquote",[a("p",[t._v("最终我们发现，不同事务或相同事务对同一条记录进行修改，会导致该记录的undolog生成一条\n记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录。")])]),t._v(" "),a("h3",{attrs:{id:"_10-5-4-readview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-4-readview"}},[t._v("#")]),t._v(" 10.5.4 readview")]),t._v(" "),a("blockquote",[a("p",[t._v("ReadView（读视图）是 快照读 SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id。")])]),t._v(" "),a("p",[t._v("ReadView中包含了四个核心字段：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/11a65cbc2e97f6855d7692a265dc2651.png",alt:"图片"}})]),t._v(" "),a("p",[t._v("Read View 有四个重要的字段：")]),t._v(" "),a("ul",[a("li",[t._v("m_ids ：指的是在创建 Read View 时，当前数据库中**「活跃事务」的事务 id 列表**，注意是一个列表，"),a("strong",[t._v("“活跃事务”指的就是，启动了但还没提交的事务")]),t._v("。")]),t._v(" "),a("li",[t._v("min_trx_id ：指的是在创建 Read View 时，当前数据库中**「活跃事务」中事务 id 最小的事务**，也就是 m_ids 的最小值。")]),t._v(" "),a("li",[t._v("max_trx_id ：这个并不是 m_ids 的最大值，而是"),a("strong",[t._v("创建 Read View 时当前数据库中应该给下一个事务的 id 值")]),t._v("，也就是全局事务中最大的事务 id 值 + 1；")]),t._v(" "),a("li",[t._v("creator_trx_id ：指的是"),a("strong",[t._v("创建该 Read View 的事务的事务 id")]),t._v("。")])]),t._v(" "),a("p",[t._v("而在readview中就规定了版本链数据的访问规则：trx_id 代表当前undolog版本链对应事务ID。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422104306577.png",alt:"image-20220422104306577"}})]),t._v(" "),a("p",[t._v("在创建 Read View 后，我们可以将记录中的 trx_id 划分这三种情况：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/ReadView.drawio.png",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("这种通过「版本链」来控制并发事务访问同一个记录时的行为就叫 MVCC（多版本并发控制）。")])]),t._v(" "),a("p",[t._v("不同的隔离级别，生成ReadView的时机不同：")]),t._v(" "),a("ul",[a("li",[t._v("READ COMMITTED ：在事务中每一次执行快照读时生成ReadView。")]),t._v(" "),a("li",[t._v("REPEATABLE READ：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。")])]),t._v(" "),a("h3",{attrs:{id:"_10-5-5-原理分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-5-原理分析"}},[t._v("#")]),t._v(" 10.5.5 原理分析")]),t._v(" "),a("ul",[a("li",[t._v("对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；")]),t._v(" "),a("li",[t._v("对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；")]),t._v(" "),a("li",[t._v("对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 "),a("strong",[t._v("Read View *"),a("em",[t._v("来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。*")]),t._v("「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View")]),t._v("。")])]),t._v(" "),a("h4",{attrs:{id:"_10-5-5-1-rc隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-5-1-rc隔离级别"}},[t._v("#")]),t._v(" 10.5.5.1 RC隔离级别")]),t._v(" "),a("p",[t._v("RC隔离级别下，在事务中每一次执行快照读时生成ReadView。我们就来分析事务5中，两次快照读读取数据，是如何获取数据的?")]),t._v(" "),a("p",[t._v("在事务5中，查询了两次id为30的记录，由于隔离级别为Read Committed，所以每一次进行快照读都会生成一个ReadView，那么两次生成的ReadView如下。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422104713975.png",alt:"image-20220422104713975"}})]),t._v(" "),a("p",[t._v("那么这两次快照读在获取数据时，就需要根据所生成的ReadView以及ReadView的版本链访问规则，\n到undolog版本链中匹配数据，最终决定此次快照读返回的数据。")]),t._v(" "),a("p",[t._v("A. 先来看第一次快照读具体的读取过程：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422110651754.png",alt:"image-20220422110651754"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422110657118.png",alt:"image-20220422110657118"}})]),t._v(" "),a("p",[t._v("在进行匹配时，会从undo log的版本链，从上到下进行挨个匹配：")]),t._v(" "),a("ul",[a("li",[t._v("先匹配"),a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422110712776.png",alt:"image-20220422110712776"}}),t._v(" 这条记录，这条记录对应的\ntrx_id为4，也就是将4带入右侧的匹配规则中。 ①不满足 ②不满足 ③不满足 ④也不满足 ，\n都不满足，则继续匹配undo log版本链的下一条。")]),t._v(" "),a("li",[t._v("再匹配第二条"),a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422110811544.png",alt:"image-20220422110811544"}}),t._v("，这条\n记录对应的trx_id为3，也就是将3带入右侧的匹配规则中。①不满足 ②不满足 ③不满足 ④也\n不满足 ，都不满足，则继续匹配undo log版本链的下一条。")]),t._v(" "),a("li",[t._v("再匹配第三条"),a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422110831555.png",alt:"image-20220422110831555"}}),t._v("，这条记\n录对应的trx_id为2，也就是将2带入右侧的匹配规则中。①不满足 ②满足 终止匹配，此次快照\n读，返回的数据就是版本链中记录的这条数据。")])]),t._v(" "),a("p",[t._v("B. 再来看第二次快照读具体的读取过程:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422111008802.png",alt:"image-20220422111008802"}}),a("img",{attrs:{src:"upload%5Cimage-20220422111013833.png",alt:"image-20220422111013833"}})]),t._v(" "),a("p",[t._v("在进行匹配时，会从undo log的版本链，从上到下进行挨个匹配：")]),t._v(" "),a("ul",[a("li",[t._v("先匹配"),a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422111138742.png",alt:"image-20220422111138742"}}),t._v("这条记录，这条记录对应的\ntrx_id为4，也就是将4带入右侧的匹配规则中。 ①不满足 ②不满足 ③不满足 ④也不满足 ，\n都不满足，则继续匹配undo log版本链的下一条。")]),t._v(" "),a("li",[t._v("再匹配第二条 "),a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422111153117.png",alt:"image-20220422111153117"}}),t._v("，这条\n记录对应的trx_id为3，也就是将3带入右侧的匹配规则中。①不满足 ②满足 。终止匹配，此次\n快照读，返回的数据就是版本链中记录的这条数据。")])]),t._v(" "),a("h4",{attrs:{id:"_10-5-5-2-rr隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-5-2-rr隔离级别"}},[t._v("#")]),t._v(" 10.5.5.2 RR隔离级别")]),t._v(" "),a("p",[t._v("RR隔离级别下，仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。 而RR 是可重复读，在一个事务中，执行两次相同的select语句，查询到的结果是一样的。\n那MySQL是如何做到可重复读的呢? 我们简单分析一下就知道了")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422111334685.png",alt:"image-20220422111334685"}})]),t._v(" "),a("p",[t._v("我们看到，在RR隔离级别下，只是在事务中第一次快照读时生成ReadView，后续都是复用该\nReadView，那么既然ReadView都一样， ReadView的版本链匹配规则也一样， 那么最终快照读返\n回的结果也是一样的。")]),t._v(" "),a("p",[t._v("所以呢，MVCC的实现原理就是通过 InnoDB表的隐藏字段、UndoLog 版本链、ReadView来实现的。\n而MVCC + 锁，则实现了事务的隔离性。 而一致性则是由redolog 与 undolog保证。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/img/image-20220422111411111.png",alt:"image-20220422111411111"}})]),t._v(" "),a("h2",{attrs:{id:"小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("事务是在 MySQL 引擎层实现的，我们常见的 InnoDB 引擎是支持事务的，事务的四大特性是原子性、一致性、隔离性、持久性，我们这次主要讲的是隔离性。")]),t._v(" "),a("p",[t._v("当多个事务并发执行的时候，会引发脏读、不可重复读、幻读这些问题，那为了避免这些问题，SQL 提出了四种隔离级别，分别是读未提交、读已提交、可重复读、串行化，从左往右隔离级别顺序递增，隔离级别越高，意味着性能越差，InnoDB 引擎的默认隔离级别是可重复读。")]),t._v(" "),a("p",[t._v("要解决脏读现象，就要将隔离级别升级到读已提交以上的隔离级别，要解决不可重复读现象，就要将隔离级别升级到可重复读以上的隔离级别。")]),t._v(" "),a("p",[t._v("而对于幻读现象，不建议将隔离级别升级为串行化，因为这会导致数据库并发时性能很差。InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它通过 next-key lock 锁（行锁+间隙锁的组合）来锁住记录之间的“间隙”和记录本身，防止其他事务在这个记录之间插入新的记录，这样就避免了幻读现象。")]),t._v(" "),a("p",[t._v("对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 **Read View **来实现的，它们的区别在于创建 Read View 的时机不同：")]),t._v(" "),a("ul",[a("li",[t._v("「读提交」隔离级别是在每个 select 都会生成一个新的 Read View，也意味着，事务期间的多次读取同一条数据，前后两次读的数据可能会出现不一致，因为可能这期间另外一个事务修改了该记录，并提交了事务。")]),t._v(" "),a("li",[t._v("「可重复读」隔离级别是启动事务时生成一个 Read View，然后整个事务期间都在用这个 Read View，这样就保证了在事务期间读到的数据都是事务启动前的记录。")])]),t._v(" "),a("p",[t._v("这两个隔离级别实现是通过「事务的 Read View 里的字段」和「记录中的两个隐藏列」的比对，来控制并发事务访问同一个记录时的行为，这就叫 MVCC（多版本并发控制）。")]),t._v(" "),a("p",[t._v("在可重复读隔离级别中，普通的 select 语句就是基于 MVCC 实现的快照读，也就是不会加锁的。而 select .. for update 语句就不是快照读了，而是当前读了，也就是每次读都是拿到最新版本的数据，但是它会对读到的记录加上 next-key lock 锁。")]),t._v(" "),a("h2",{attrs:{id:"详解buffer-pool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#详解buffer-pool"}},[t._v("#")]),t._v(" 详解Buffer Pool")]),t._v(" "),a("img",{staticStyle:{zoom:"33%"},attrs:{src:"http://img.aismy.top/img/e5a23e5c53ef471b947b5007866229fe.png",alt:"img"}}),t._v(" "),a("h3",{attrs:{id:"为什么要有-buffer-pool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有-buffer-pool"}},[t._v("#")]),t._v(" 为什么要有 Buffer Pool？")]),t._v(" "),a("p",[t._v("虽然说 MySQL 的数据是存储在磁盘里的，但是也不能每次都从磁盘里面读取数据，这样性能是极差的。")]),t._v(" "),a("p",[t._v("要想提升查询性能，加个缓存就行了嘛。所以，当数据从磁盘中取出后，缓存内存中，下次查询同样的数据的时候，直接从内存中读取。")]),t._v(" "),a("p",[t._v("为此，Innodb 存储引擎设计了一个"),a("strong",[t._v("缓冲池（*Buffer Pool*）")]),t._v("，来提高数据库的读写性能。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/mysql/innodb/缓冲池.drawio.png",alt:"img"}}),t._v(" "),a("p",[t._v("有了缓冲池后：")]),t._v(" "),a("ul",[a("li",[t._v("当读取数据时，如果数据存在于 Buffer Pool 中，客户端就会直接读取 Buffer Pool 中的数据，否则再去磁盘中读取。")]),t._v(" "),a("li",[t._v("当修改数据时，首先是修改 Buffer Pool 中数据所在的页，然后将其页设置为脏页，最后由后台线程将脏页写入到磁盘。")])]),t._v(" "),a("h5",{attrs:{id:"buffer-pool-有多大"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#buffer-pool-有多大"}},[t._v("#")]),t._v(" Buffer Pool 有多大？")]),t._v(" "),a("p",[t._v("Buffer Pool 是在 MySQL 启动的时候，向操作系统申请的一片连续的内存空间，默认配置下 Buffer Pool 只有 "),a("code",[t._v("128MB")]),t._v(" 。")]),t._v(" "),a("p",[t._v("可以通过调整 "),a("code",[t._v("innodb_buffer_pool_size")]),t._v(" 参数来设置 Buffer Pool 的大小，一般建议设置成可用物理内存的 60%~80%。")]),t._v(" "),a("h5",{attrs:{id:"buffer-pool-缓存什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#buffer-pool-缓存什么"}},[t._v("#")]),t._v(" Buffer Pool 缓存什么？")]),t._v(" "),a("p",[t._v("InnoDB 会把存储的数据划分为若干个「页」，以页作为磁盘和内存交互的基本单位，一个页的默认大小为 16KB。因此，Buffer Pool 同样需要按「页」来划分。")]),t._v(" "),a("p",[t._v("在 MySQL 启动的时候，"),a("strong",[t._v("InnoDB 会为 Buffer Pool 申请一片连续的内存空间，然后按照默认的"),a("code",[t._v("16KB")]),t._v("的大小划分出一个个的页， Buffer Pool 中的页就叫做缓存页")]),t._v("。此时这些缓存页都是空闲的，之后随着程序的运行，才会有磁盘上的页被缓存到 Buffer Pool 中。")]),t._v(" "),a("p",[t._v("所以，MySQL 刚启动的时候，你会观察到使用的虚拟内存空间很大，而使用到的物理内存空间却很小，这是因为只有这些虚拟内存被访问后，操作系统才会触发缺页中断，接着将虚拟地址和物理地址建立映射关系。")]),t._v(" "),a("p",[t._v("Buffer Pool 除了缓存「索引页」和「数据页」，还包括了 undo 页，插入缓存、自适应哈希索引、锁信息等等。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/mysql/innodb/bufferpool%E5%86%85%E5%AE%B9.drawio.png",alt:"img"}})]),t._v(" "),a("p",[t._v("为了更好的管理这些在 Buffer Pool 中的缓存页，InnoDB 为每一个缓存页都创建了一个"),a("strong",[t._v("控制块")]),t._v("，控制块信息包括「缓存页的表空间、页号、缓存页地址、链表节点」等等。")]),t._v(" "),a("p",[t._v("控制块也是占有内存空间的，它是放在 Buffer Pool 的最前面，接着才是缓存页，如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/mysql/innodb/%E7%BC%93%E5%AD%98%E9%A1%B5.drawio.png",alt:"img"}})]),t._v(" "),a("p",[t._v("上图中控制块和缓存页之间灰色部分称为碎片空间。")]),t._v(" "),a("blockquote",[a("p",[t._v("为什么会有碎片空间呢？")])]),t._v(" "),a("p",[t._v("你想想啊，每一个控制块都对应一个缓存页，那在分配足够多的控制块和缓存页后，可能剩余的那点儿空间不够一对控制块和缓存页的大小，自然就用不到喽，这个用不到的那点儿内存空间就被称为碎片了。")]),t._v(" "),a("p",[t._v("当然，如果你把 Buffer Pool 的大小设置的刚刚好的话，也可能不会产生碎片。")]),t._v(" "),a("blockquote",[a("p",[t._v("查询一条记录，就只需要缓冲一条记录吗？")])]),t._v(" "),a("p",[t._v("不是的。")]),t._v(" "),a("p",[t._v("当我们查询一条记录时，InnoDB 是会把整个页的数据加载到 Buffer Pool 中，因为，通过索引只能定位到磁盘中的页，而不能定位到页中的一条记录。将页加载到 Buffer Pool 后，再通过页里的页目录去定位到某条具体的记录。")]),t._v(" "),a("h3",{attrs:{id:"如何管理-buffer-pool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何管理-buffer-pool"}},[t._v("#")]),t._v(" 如何管理 Buffer Pool？")]),t._v(" "),a("h4",{attrs:{id:"如何管理空闲页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何管理空闲页"}},[t._v("#")]),t._v(" 如何管理空闲页？")]),t._v(" "),a("p",[t._v("Buffer Pool 是一片连续的内存空间，当 MySQL 运行一段时间后，这片连续的内存空间中的缓存页既有空闲的，也有被使用的。")]),t._v(" "),a("p",[t._v("那当我们从磁盘读取数据的时候，总不能通过遍历这一片连续的内存空间来找到空闲的缓存页吧，这样效率太低了。")]),t._v(" "),a("p",[t._v("所以，为了能够快速找到空闲的缓存页，可以使用链表结构，将空闲缓存页的「控制块」作为链表的节点，这个链表称为 "),a("strong",[t._v("Free 链表")]),t._v("（空闲链表）。")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/mysql/innodb/freelist.drawio.png",alt:"img"}}),t._v(" "),a("p",[t._v("Free 链表上除了有控制块，还有一个头节点，该头节点包含链表的头节点地址，尾节点地址，以及当前链表中节点的数量等信息。")]),t._v(" "),a("p",[t._v("Free 链表节点是一个一个的控制块，而每个控制块包含着对应缓存页的地址，所以相当于 Free 链表节点都对应一个空闲的缓存页。")]),t._v(" "),a("p",[t._v("有了 Free 链表后，每当需要从磁盘中加载一个页到 Buffer Pool 中时，就从 Free链表中取一个空闲的缓存页，并且把该缓存页对应的控制块的信息填上，然后把该缓存页对应的控制块从 Free 链表中移除。")]),t._v(" "),a("h4",{attrs:{id:"如何管理脏页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何管理脏页"}},[t._v("#")]),t._v(" 如何管理脏页？")]),t._v(" "),a("p",[t._v("设计 Buffer Pool 除了能提高读性能，还能提高写性能，也就是更新数据的时候，不需要每次都要写入磁盘，而是将 Buffer Pool 对应的缓存页标记为"),a("strong",[t._v("脏页")]),t._v("，然后再由后台线程将脏页写入到磁盘。")]),t._v(" "),a("p",[t._v("那为了能快速知道哪些缓存页是脏的，于是就设计出 "),a("strong",[t._v("Flush 链表")]),t._v("，它跟 Free 链表类似的，链表的节点也是控制块，区别在于 Flush 链表的元素都是脏页。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/%E5%9B%BE%E5%83%8F1/Flush.drawio.png",alt:"img"}})]),t._v(" "),a("p",[t._v("有了 Flush 链表后，后台线程就可以遍历 Flush 链表，将脏页写入到磁盘。")]),t._v(" "),a("h4",{attrs:{id:"如何提高缓存命中率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何提高缓存命中率"}},[t._v("#")]),t._v(" 如何提高缓存命中率？")]),t._v(" "),a("p",[t._v("Buffer Pool 的大小是有限的，对于一些频繁访问的数据我们希望可以一直留在 Buffer Pool 中，而一些很少访问的数据希望可以在某些时机可以淘汰掉，从而保证 Buffer Pool 不会因为满了而导致无法再缓存新的数据，同时还能保证常用数据留在 Buffer Pool 中。")]),t._v(" "),a("p",[t._v("要实现这个，最容易想到的就是 LRU（Least recently used）算法。")]),t._v(" "),a("p",[t._v("该算法的思路是，链表头部的节点是最近使用的，而链表末尾的节点是最久没被使用的。那么，当空间不够了，就淘汰最久没被使用的节点，从而腾出空间。")]),t._v(" "),a("p",[t._v("简单的 LRU 算法的实现思路是这样的：")]),t._v(" "),a("ul",[a("li",[t._v("当访问的页在 Buffer Pool 里，就直接把该页对应的 LRU 链表节点移动到链表的头部。")]),t._v(" "),a("li",[t._v("当访问的页不在 Buffer Pool 里，除了要把页放入到 LRU 链表的头部，还要淘汰 LRU 链表末尾的节点。")])]),t._v(" "),a("p",[t._v("比如下图，假设 LRU 链表长度为 5，LRU 链表从左到右有 1，2，3，4，5 的页。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/%E5%9B%BE%E5%83%8F1/lru.png",alt:"img"}})]),t._v(" "),a("p",[t._v("如果访问了 3 号的页，因为 3 号页在 Buffer Pool 里，所以把 3 号页移动到头部即可。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/%E5%9B%BE%E5%83%8F1/lru2.png",alt:"img"}})]),t._v(" "),a("p",[t._v("而如果接下来，访问了 8 号页，因为 8 号页不在 Buffer Pool 里，所以需要先淘汰末尾的 5 号页，然后再将 8 号页加入到头部。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/%E5%9B%BE%E5%83%8F1/lru3.png",alt:"img"}})]),t._v(" "),a("p",[t._v("到这里我们可以知道，Buffer Pool 里有三种页和链表来管理数据。")]),t._v(" "),a("p",[t._v("图中：")]),t._v(" "),a("ul",[a("li",[t._v("Free Page（空闲页），表示此页未被使用，位于 Free 链表；")]),t._v(" "),a("li",[t._v("Clean Page（干净页），表示此页已被使用，但是页面未发生修改，位于LRU 链表。")]),t._v(" "),a("li",[t._v("Dirty Page（脏页），表示此页「已被使用」且「已经被修改」，其数据和磁盘上的数据已经不一致。当脏页上的数据写入磁盘后，内存数据和磁盘数据一致，那么该页就变成了干净页。脏页同时存在于 LRU 链表和 Flush 链表。")])]),t._v(" "),a("p",[t._v("简单的 LRU 算法并没有被 MySQL 使用，因为简单的 LRU 算法无法避免下面这两个问题：")]),t._v(" "),a("ul",[a("li",[t._v("预读失效；")]),t._v(" "),a("li",[t._v("Buffer Pool 污染；")])]),t._v(" "),a("blockquote",[a("p",[t._v("什么是预读失效？")])]),t._v(" "),a("p",[t._v("先来说说 MySQL 的预读机制。程序是有空间局部性的，靠近当前被访问数据的数据，在未来很大概率会被访问到。")]),t._v(" "),a("p",[t._v("所以，MySQL 在加载数据页时，会提前把它相邻的数据页一并加载进来，目的是为了减少磁盘 IO。")]),t._v(" "),a("p",[t._v("但是可能这些"),a("strong",[t._v("被提前加载进来的数据页，并没有被访问")]),t._v("，相当于这个预读是白做了，这个就是"),a("strong",[t._v("预读失效")]),t._v("。")]),t._v(" "),a("p",[t._v("如果使用简单的 LRU 算法，就会把预读页放到 LRU 链表头部，而当 Buffer Pool空间不够的时候，还需要把末尾的页淘汰掉。")]),t._v(" "),a("p",[t._v("如果这些预读页如果一直不会被访问到，就会出现一个很奇怪的问题，不会被访问的预读页却占用了 LRU 链表前排的位置，而末尾淘汰的页，可能是频繁访问的页，这样就大大降低了缓存命中率。")]),t._v(" "),a("blockquote",[a("p",[t._v("怎么解决预读失效而导致缓存命中率降低的问题？")])]),t._v(" "),a("p",[t._v("我们不能因为害怕预读失效，而将预读机制去掉，大部分情况下，局部性原理还是成立的。")]),t._v(" "),a("p",[t._v("要避免预读失效带来影响，最好就是"),a("strong",[t._v("让预读的页停留在 Buffer Pool 里的时间要尽可能的短，让真正被访问的页才移动到 LRU 链表的头部，从而保证真正被读取的热数据留在 Buffer Pool 里的时间尽可能长")]),t._v("。")]),t._v(" "),a("p",[t._v("那到底怎么才能避免呢？")]),t._v(" "),a("p",[t._v("MySQL 是这样做的，它改进了 LRU 算法，将 LRU 划分了 2 个区域："),a("strong",[t._v("old 区域 和 young 区域")]),t._v("。")]),t._v(" "),a("p",[t._v("young 区域在 LRU 链表的前半部分，old 区域则是在后半部分，如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/%E5%9B%BE%E5%83%8F1/young+old.png",alt:"img"}})]),t._v(" "),a("p",[t._v("old 区域占整个 LRU 链表长度的比例可以通过 "),a("code",[t._v("innodb_old_blocks_pc")]),t._v(" 参数来设置，默认是 37，代表整个 LRU 链表中 young 区域与 old 区域比例是 63:37。")]),t._v(" "),a("p",[a("strong",[t._v("划分这两个区域后，预读的页就只需要加入到 old 区域的头部，当页被真正访问的时候，才将页插入 young 区域的头部")]),t._v("。如果预读的页一直没有被访问，就会从 old 区域移除，这样就不会影响 young 区域中的热点数据。")]),t._v(" "),a("p",[t._v("接下来，给大家举个例子。")]),t._v(" "),a("p",[t._v("假设有一个长度为 10 的 LRU 链表，其中 young 区域占比 70 %，old 区域占比 20 %。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/%E5%9B%BE%E5%83%8F1/lrutwo.drawio.png",alt:"img"}})]),t._v(" "),a("p",[t._v("现在有个编号为 20 的页被预读了，这个页只会被插入到 old 区域头部，而 old 区域末尾的页（10号）会被淘汰掉。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/mysql/innodb/lrutwo2.png",alt:"img"}})]),t._v(" "),a("p",[t._v("如果 20 号页一直不会被访问，它也没有占用到 young 区域的位置，而且还会比 young 区域的数据更早被淘汰出去。")]),t._v(" "),a("p",[t._v("如果 20 号页被预读后，立刻被访问了，那么就会将它插入到 young 区域的头部，young 区域末尾的页（7号），会被挤到 old 区域，作为 old 区域的头部，这个过程并不会有页被淘汰。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/mysql/innodb/lrutwo3.png",alt:"img"}})]),t._v(" "),a("p",[t._v("虽然通过划分 old 区域 和 young 区域避免了预读失效带来的影响，但是还有个问题无法解决，那就是 Buffer Pool 污染的问题。")]),t._v(" "),a("blockquote",[a("p",[t._v("什么是 Buffer Pool 污染？")])]),t._v(" "),a("p",[t._v("当某一个 SQL 语句"),a("strong",[t._v("扫描了大量的数据")]),t._v("时，在 Buffer Pool 空间比较有限的情况下，可能会将 "),a("strong",[t._v("Buffer Pool 里的所有页都替换出去，导致大量热数据被淘汰了")]),t._v("，等这些热数据又被再次访问的时候，由于缓存未命中，就会产生大量的磁盘 IO，MySQL 性能就会急剧下降，这个过程被称为 "),a("strong",[t._v("Buffer Pool 污染")]),t._v("。")]),t._v(" "),a("p",[t._v("注意， Buffer Pool 污染并不只是查询语句查询出了大量的数据才出现的问题，即使查询出来的结果集很小，也会造成 Buffer Pool 污染。")]),t._v(" "),a("p",[t._v("比如，在一个数据量非常大的表，执行了这条语句：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t_user "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%xiaolin%"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("可能这个查询出来的结果就几条记录，但是由于这条语句会发生索引失效，所以这个查询过程是全表扫描的，接着会发生如下的过程：")]),t._v(" "),a("ul",[a("li",[t._v("从磁盘读到的页加入到 LRU 链表的 old 区域头部；")]),t._v(" "),a("li",[t._v("当从页里读取行记录时，也就是页被访问的时候，就要将该页放到 young 区域头部；")]),t._v(" "),a("li",[t._v("接下来拿行记录的 name 字段和字符串 xiaolin 进行模糊匹配，如果符合条件，就加入到结果集里；")]),t._v(" "),a("li",[t._v("如此往复，直到扫描完表中的所有记录。")])]),t._v(" "),a("p",[t._v("经过这一番折腾，原本 young 区域的热点数据都会被替换掉。")]),t._v(" "),a("p",[t._v("举个例子，假设需要批量扫描：21，22，23，24，25 这五个页，这些页都会被逐一访问（读取页里的记录）。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/%E5%9B%BE%E5%83%8F1/lruthree.drawio.png",alt:"img"}})]),t._v(" "),a("p",[t._v("在批量访问这些数据的时候，会被逐一插入到 young 区域头部。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.aismy.top/%E5%9B%BE%E5%83%8F1/lruthree1.png",alt:"img"}})]),t._v(" "),a("p",[t._v("可以看到，原本在 young 区域的热点数据 6 和 7 号页都被淘汰了，这就是 Buffer Pool 污染的问题。")]),t._v(" "),a("blockquote",[a("p",[t._v("怎么解决出现 Buffer Pool 污染而导致缓存命中率下降的问题？")])]),t._v(" "),a("p",[t._v("像前面这种全表扫描的查询，很多缓冲页其实只会被访问一次，但是它却只因为被访问了一次而进入到 young 区域，从而导致热点数据被替换了。")]),t._v(" "),a("p",[t._v("LRU 链表中 young 区域就是热点数据，只要我们提高进入到 young 区域的门槛，就能有效地保证 young 区域里的热点数据不会被替换掉。")]),t._v(" "),a("p",[t._v("MySQL 是这样做的，进入到 young 区域条件增加了一个"),a("strong",[t._v("停留在 old 区域的时间判断")]),t._v("。")]),t._v(" "),a("p",[t._v("具体是这样做的，在对某个处在 old 区域的缓存页进行第一次访问时，就在它对应的控制块中记录下来这个访问时间：")]),t._v(" "),a("ul",[a("li",[t._v("如果后续的访问时间与第一次访问的时间"),a("strong",[t._v("在某个时间间隔内")]),t._v("，那么"),a("strong",[t._v("该缓存页就不会被从 old 区域移动到 young 区域的头部")]),t._v("；")]),t._v(" "),a("li",[t._v("如果后续的访问时间与第一次访问的时间"),a("strong",[t._v("不在某个时间间隔内")]),t._v("，那么"),a("strong",[t._v("该缓存页移动到 young 区域的头部")]),t._v("；")])]),t._v(" "),a("p",[t._v("这个间隔时间是由 "),a("code",[t._v("innodb_old_blocks_time")]),t._v(" 控制的，默认是 1000 ms。")]),t._v(" "),a("p",[t._v("也就说，"),a("strong",[t._v("只有同时满足「被访问」与「在 old 区域停留时间超过 1 秒」两个条件，才会被插入到 young 区域头部")]),t._v("，这样就解决了 Buffer Pool 污染的问题 。")]),t._v(" "),a("p",[t._v("另外，MySQL 针对 young 区域其实做了一个优化，为了防止 young 区域节点频繁移动到头部。young 区域前面 1/4 被访问不会移动到链表头部，只有后面的 3/4被访问了才会。")]),t._v(" "),a("h4",{attrs:{id:"脏页什么时候会被刷入磁盘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#脏页什么时候会被刷入磁盘"}},[t._v("#")]),t._v(" 脏页什么时候会被刷入磁盘？")]),t._v(" "),a("p",[t._v("引入了 Buffer Pool 后，当修改数据时，首先是修改 Buffer Pool 中数据所在的页，然后将其页设置为脏页，但是磁盘中还是原数据。")]),t._v(" "),a("p",[t._v("因此，脏页需要被刷入磁盘，保证缓存和磁盘数据一致，但是若每次修改数据都刷入磁盘，则性能会很差，因此一般都会在一定时机进行批量刷盘。")]),t._v(" "),a("p",[t._v("可能大家担心，如果在脏页还没有来得及刷入到磁盘时，MySQL 宕机了，不就丢失数据了吗？")]),t._v(" "),a("p",[t._v("这个不用担心，InnoDB 的更新操作采用的是 Write Ahead Log 策略，即先写日志，再写入磁盘，通过 redo log 日志让 MySQL 拥有了崩溃恢复能力。")]),t._v(" "),a("p",[t._v("下面几种情况会触发脏页的刷新：")]),t._v(" "),a("ul",[a("li",[t._v("当 redo log 日志满了的情况下，会主动触发脏页刷新到磁盘；")]),t._v(" "),a("li",[t._v("Buffer Pool 空间不足时，需要将一部分数据页淘汰掉，如果淘汰的是脏页，需要先将脏页同步到磁盘；")]),t._v(" "),a("li",[t._v("MySQL 认为空闲时，后台线程回定期将适量的脏页刷入到磁盘；")]),t._v(" "),a("li",[t._v("MySQL 正常关闭之前，会把所有的脏页刷入到磁盘；")])]),t._v(" "),a("p",[t._v("在我们开启了慢 SQL 监控后，如果你发现**「偶尔」会出现一些用时稍长的 SQL**，这可能是因为脏页在刷新到磁盘时可能会给数据库带来性能开销，导致数据库操作抖动。")]),t._v(" "),a("p",[t._v("如果间断出现这种现象，就需要调大 Buffer Pool 空间或 redo log 日志的大小。")]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("Innodb 存储引擎设计了一个"),a("strong",[t._v("缓冲池（*Buffer Pool*）")]),t._v("，来提高数据库的读写性能。")]),t._v(" "),a("p",[t._v("Buffer Pool 以页为单位缓冲数据，可以通过 "),a("code",[t._v("innodb_buffer_pool_size")]),t._v(" 参数调整缓冲池的大小，默认是 128 M。")]),t._v(" "),a("p",[t._v("Innodb 通过三种链表来管理缓页：")]),t._v(" "),a("ul",[a("li",[t._v("Free List （空闲页链表），管理空闲页；")]),t._v(" "),a("li",[t._v("Flush List （脏页链表），管理脏页；")]),t._v(" "),a("li",[t._v("LRU List，管理脏页+干净页，将最近且经常查询的数据缓存在其中，而不常查询的数据就淘汰出去。；")])]),t._v(" "),a("p",[t._v("InnoDB 对 LRU 做了一些优化，我们熟悉的 LRU 算法通常是将最近查询的数据放到 LRU 链表的头部，而 InnoDB 做 2 点优化：")]),t._v(" "),a("ul",[a("li",[t._v("将 LRU 链表 分为"),a("strong",[t._v("young 和 old 两个区域")]),t._v("，加入缓冲池的页，优先插入 old 区域；页被访问时，才进入 young 区域，目的是为了解决预读失效的问题。")]),t._v(" "),a("li",[t._v("当**「页被访问」且「 old 区域停留时间超过 "),a("code",[t._v("innodb_old_blocks_time")]),t._v(" 阈值（默认为1秒）」**时，才会将页插入到 young 区域，否则还是插入到 old 区域，目的是为了解决批量数据访问，大量热数据淘汰的问题。")])]),t._v(" "),a("p",[t._v("可以通过调整 "),a("code",[t._v("innodb_old_blocks_pc")]),t._v(" 参数，设置 young 区域和 old 区域比例。")]),t._v(" "),a("p",[t._v("在开启了慢 SQL 监控后，如果你发现「偶尔」会出现一些用时稍长的 SQL，这可因为脏页在刷新到磁盘时导致数据库性能抖动。如果在很短的时间出现这种现象，就需要调大 Buffer Pool 空间或 redo log 日志的大小。")])])}),[],!1,null,null,null);a.default=_.exports}}]);